{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/pages/News.vue?8f76","webpack:///./src/pages/Message.vue?45d3","webpack:///./src/App3.vue?b668","webpack:///./src/components/Banner.vue?52b4","webpack:///src/components/Banner.vue","webpack:///./src/components/Banner.vue?e8ae","webpack:///./src/components/Banner.vue","webpack:///src/App3.vue","webpack:///./src/App3.vue?2307","webpack:///./src/App3.vue","webpack:///./src/pages/About.vue?bc90","webpack:///src/pages/About.vue","webpack:///./src/pages/About.vue?e7a2","webpack:///./src/pages/About.vue","webpack:///./src/pages/Home.vue?0e75","webpack:///src/pages/Home.vue","webpack:///./src/pages/Home.vue?8a9a","webpack:///./src/pages/Home.vue","webpack:///./src/pages/News.vue?d608","webpack:///src/pages/News.vue","webpack:///./src/pages/News.vue?d78c","webpack:///./src/pages/News.vue","webpack:///./src/pages/Message.vue?5459","webpack:///src/pages/Message.vue","webpack:///./src/pages/Message.vue?ef70","webpack:///./src/pages/Message.vue","webpack:///./src/pages/Detail.vue?2a6b","webpack:///src/pages/Detail.vue","webpack:///./src/pages/Detail.vue?9a0e","webpack:///./src/pages/Detail.vue","webpack:///./src/pages/Movies.vue?6b5a","webpack:///src/pages/Movies.vue","webpack:///./src/pages/Movies.vue?26ff","webpack:///./src/pages/Movies.vue","webpack:///./src/pages/ElementUIView.vue?07eb","webpack:///src/pages/ElementUIView.vue","webpack:///./src/pages/ElementUIView.vue?f89d","webpack:///./src/pages/ElementUIView.vue","webpack:///./src/router/index.js","webpack:///./src/store/count-store.js","webpack:///./src/store/person-store.js","webpack:///./src/store/index.js","webpack:///./src/main.js"],"names":["webpackJsonpCallback","data","moduleId","chunkId","chunkIds","moreModules","executeModules","i","resolves","length","Object","prototype","hasOwnProperty","call","installedChunks","push","modules","parentJsonpFunction","shift","deferredModules","apply","checkDeferredModules","result","deferredModule","fulfilled","j","depId","splice","__webpack_require__","s","installedModules","exports","module","l","m","c","d","name","getter","o","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","p","jsonpArray","window","oldJsonpFunction","slice","_vm","this","_h","$createElement","_c","_self","staticClass","attrs","_v","user","pass","path","query","username","password","params","mid","title","staticRenderFns","on","$event","back","forward","goto","methods","console","log","$route","fullPath","$router","go","component","components","Banner","beforeDestroy","destroyed","mounted","aboutRoute","aboutRouter","beforeRouteEnter","to","from","meta","token","localStorage","getItem","next","alert","beforeRouteLeave","style","opacity","_m","activated","timer","setInterval","deactivated","clearInterval","_l","id","_s","pushShow","replaceShow","messageList","replace","a","b","props","computed","Vue","use","VueRouter","router","base","process","routes","redirect","About","isAuth","Home","children","News","Message","Detail","Movies","ElementUIView","beforeEach","afterEach","document","namespaced","state","countSum","countMessage","countStatus","getters","mutations","actions","personSum","personMessage","personStatus","personList","age","firstName","ADD_PERSON","unshift","Vuex","store","Store","sum","message","status","list","nickname","isDelete","dataProcessing","ADD","SUB","ADD_LIST","addOdd","context","commit","addWait","setTimeout","countStore","personStore","config","productionTip","ElementUI","render","h","App","beforeCreate","$bus","$mount"],"mappings":"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","file":"js/app.80958652.js","sourcesContent":[" \t// install a JSONP callback for chunk loading\n \tfunction webpackJsonpCallback(data) {\n \t\tvar chunkIds = data[0];\n \t\tvar moreModules = data[1];\n \t\tvar executeModules = data[2];\n\n \t\t// add \"moreModules\" to the modules object,\n \t\t// then flag all \"chunkIds\" as loaded and fire callback\n \t\tvar moduleId, chunkId, i = 0, resolves = [];\n \t\tfor(;i < chunkIds.length; i++) {\n \t\t\tchunkId = chunkIds[i];\n \t\t\tif(Object.prototype.hasOwnProperty.call(installedChunks, chunkId) && installedChunks[chunkId]) {\n \t\t\t\tresolves.push(installedChunks[chunkId][0]);\n \t\t\t}\n \t\t\tinstalledChunks[chunkId] = 0;\n \t\t}\n \t\tfor(moduleId in moreModules) {\n \t\t\tif(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\n \t\t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t\t}\n \t\t}\n \t\tif(parentJsonpFunction) parentJsonpFunction(data);\n\n \t\twhile(resolves.length) {\n \t\t\tresolves.shift()();\n \t\t}\n\n \t\t// add entry modules from loaded chunk to deferred list\n \t\tdeferredModules.push.apply(deferredModules, executeModules || []);\n\n \t\t// run deferred modules when all chunks ready\n \t\treturn checkDeferredModules();\n \t};\n \tfunction checkDeferredModules() {\n \t\tvar result;\n \t\tfor(var i = 0; i < deferredModules.length; i++) {\n \t\t\tvar deferredModule = deferredModules[i];\n \t\t\tvar fulfilled = true;\n \t\t\tfor(var j = 1; j < deferredModule.length; j++) {\n \t\t\t\tvar depId = deferredModule[j];\n \t\t\t\tif(installedChunks[depId] !== 0) fulfilled = false;\n \t\t\t}\n \t\t\tif(fulfilled) {\n \t\t\t\tdeferredModules.splice(i--, 1);\n \t\t\t\tresult = __webpack_require__(__webpack_require__.s = deferredModule[0]);\n \t\t\t}\n \t\t}\n\n \t\treturn result;\n \t}\n\n \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading chunks\n \t// undefined = chunk not loaded, null = chunk preloaded/prefetched\n \t// Promise = chunk loading, 0 = chunk loaded\n \tvar installedChunks = {\n \t\t\"app\": 0\n \t};\n\n \tvar deferredModules = [];\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/\";\n\n \tvar jsonpArray = window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || [];\n \tvar oldJsonpFunction = jsonpArray.push.bind(jsonpArray);\n \tjsonpArray.push = webpackJsonpCallback;\n \tjsonpArray = jsonpArray.slice();\n \tfor(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);\n \tvar parentJsonpFunction = oldJsonpFunction;\n\n\n \t// add entry module to deferred list\n \tdeferredModules.push([0,\"chunk-vendors\"]);\n \t// run deferred modules when ready\n \treturn checkDeferredModules();\n","export * from \"-!../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--10-oneOf-1-0!../../node_modules/css-loader/dist/cjs.js??ref--10-oneOf-1-1!../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../node_modules/postcss-loader/src/index.js??ref--10-oneOf-1-2!../../node_modules/less-loader/dist/cjs.js??ref--10-oneOf-1-3!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./News.vue?vue&type=style&index=0&id=c9c6a8f2&lang=less&scoped=true&\"","export * from \"-!../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--10-oneOf-1-0!../../node_modules/css-loader/dist/cjs.js??ref--10-oneOf-1-1!../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../node_modules/postcss-loader/src/index.js??ref--10-oneOf-1-2!../../node_modules/less-loader/dist/cjs.js??ref--10-oneOf-1-3!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Message.vue?vue&type=style&index=0&id=35b96cf0&lang=less&scoped=true&\"","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',[_c('div',{staticClass:\"row\"},[_c('Banner')],1),_c('div',{staticClass:\"row\"},[_c('div',{staticClass:\"col-xs-2 col-xs-offset-2\"},[_c('div',{staticClass:\"list-group\"},[_c('router-link',{staticClass:\"list-group-item\",attrs:{\"active-class\":\"active\",\"to\":\"/about\"}},[_vm._v(\"关于我们\")]),_c('router-link',{staticClass:\"list-group-item\",attrs:{\"active-class\":\"active\",\"to\":(\"/movies/12306/andy?username=\" + _vm.user + \"&password=\" + _vm.pass)}},[_vm._v(\"中国铁路\")]),_c('router-link',{staticClass:\"list-group-item\",attrs:{\"active-class\":\"active\",\"to\":{path:'/movies/10086/jack',query:{username:_vm.user,password:_vm.pass}}}},[_vm._v(\"中国移动\")]),_c('router-link',{staticClass:\"list-group-item\",attrs:{\"active-class\":\"active\",\"to\":{name:'movies',params:{mid:10000,title:'lucy'}}}},[_vm._v(\"中国电信\")]),_c('router-link',{staticClass:\"list-group-item\",attrs:{\"active-class\":\"active\",\"to\":\"/home\"}},[_vm._v(\"公司主页\")]),_c('router-link',{staticClass:\"list-group-item\",attrs:{\"active-class\":\"active\",\"to\":\"/elemeui\"}},[_vm._v(\"饿了么库\")])],1)]),_c('div',{staticClass:\"col-xs-6\"},[_c('div',{staticClass:\"panel\"},[_c('div',{staticClass:\"panel-body\"},[_c('router-view')],1)])])])])}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"col-xs-offset-2 col-xs-8\"},[_c('div',{staticClass:\"page-header\"},[_c('h2',[_vm._v(\"Vue Router 路由管理\")]),_c('button',{staticClass:\"btn btn-primary\",attrs:{\"type\":\"button\"},on:{\"click\":function($event){return _vm.back()}}},[_vm._v(\" 后退 \")]),_vm._v(\"  \"),_c('button',{staticClass:\"btn btn-success\",attrs:{\"type\":\"button\"},on:{\"click\":function($event){return _vm.forward()}}},[_vm._v(\" 前进 \")]),_vm._v(\"  \"),_c('button',{staticClass:\"btn btn-danger\",attrs:{\"type\":\"button\"},on:{\"click\":function($event){return _vm.goto()}}},[_vm._v(\" goto(n) \")])])])}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\r\n  <div class=\"col-xs-offset-2 col-xs-8\">\r\n    <div class=\"page-header\">\r\n      <h2>Vue Router 路由管理</h2>\r\n      <button type=\"button\" class=\"btn btn-primary\" @click=\"back()\">&nbsp;后退&nbsp;</button>&nbsp;\r\n      <button type=\"button\" class=\"btn btn-success\" @click=\"forward()\">&nbsp;前进&nbsp;</button>&nbsp;\r\n      <button type=\"button\" class=\"btn btn-danger\" @click=\"goto()\">&nbsp;goto(n)&nbsp;</button>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  name: 'Banner',\r\n  methods: {\r\n    back() {\r\n      console.log('路由规则Route地址fullPath：', this.$route.fullPath);\r\n      this.$router.back();\r\n    },\r\n    forward() {\r\n      console.log('路由规则Route地址fullPath：', this.$route.fullPath);\r\n      this.$router.forward();\r\n    },\r\n    goto() {\r\n      console.log('路由规则Route地址fullPath：', this.$route.fullPath);\r\n      this.$router.go(2);\r\n    }\r\n  },\r\n}\r\n</script>\r\n","import mod from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Banner.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Banner.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./Banner.vue?vue&type=template&id=59fec2c4&\"\nimport script from \"./Banner.vue?vue&type=script&lang=js&\"\nexport * from \"./Banner.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","<template>\r\n  <div>\r\n    <div class=\"row\">\r\n      <!-- 头部区域：BannerView.vue -->\r\n      <Banner></Banner>\r\n    </div>\r\n    <div class=\"row\">\r\n      <div class=\"col-xs-2 col-xs-offset-2\">\r\n        <div class=\"list-group\">\r\n          <!-- 原始html中我们使用a标签实现页面的跳转 -->\r\n          <!-- <a class=\"list-group-item active\" href=\"./about.html\">About</a> -->\r\n          <!-- <a class=\"list-group-item\" href=\"./home.html\">Home</a> -->\r\n\r\n          <!-- 第07步：定义路由的【链接】router-link -->\r\n          <router-link class=\"list-group-item\" active-class=\"active\" to=\"/about\">关于我们</router-link>\r\n          <router-link class=\"list-group-item\" active-class=\"active\" :to=\"`/movies/12306/andy?username=${user}&password=${pass}`\">中国铁路</router-link>\r\n          <router-link class=\"list-group-item\" active-class=\"active\" :to=\"{path:'/movies/10086/jack',query:{username:user,password:pass}}\">中国移动</router-link>\r\n          <router-link class=\"list-group-item\" active-class=\"active\" :to=\"{name:'movies',params:{mid:10000,title:'lucy'}}\">中国电信</router-link>\r\n          <router-link class=\"list-group-item\" active-class=\"active\" to=\"/home\">公司主页</router-link>\r\n          <router-link class=\"list-group-item\" active-class=\"active\" to=\"/elemeui\">饿了么库</router-link>\r\n        </div>\r\n      </div>\r\n      <div class=\"col-xs-6\">\r\n        <div class=\"panel\">\r\n          <div class=\"panel-body\">\r\n            <!-- 第07步：定义路由的【占位符】router-view -->\r\n            <router-view></router-view>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport Banner from '@/components/Banner.vue';\r\n\r\nexport default {\r\n  name: 'App',\r\n  data() {\r\n    return {\r\n      user: 'LiuWeiWei',\r\n      pass: '123456789'\r\n    }\r\n  },\r\n  components: {\r\n    Banner\r\n  }\r\n}\r\n</script>\r\n\r\n\r\n\r\n","import mod from \"-!../node_modules/cache-loader/dist/cjs.js??ref--12-0!../node_modules/thread-loader/dist/cjs.js!../node_modules/babel-loader/lib/index.js!../node_modules/cache-loader/dist/cjs.js??ref--0-0!../node_modules/vue-loader/lib/index.js??vue-loader-options!./App3.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../node_modules/cache-loader/dist/cjs.js??ref--12-0!../node_modules/thread-loader/dist/cjs.js!../node_modules/babel-loader/lib/index.js!../node_modules/cache-loader/dist/cjs.js??ref--0-0!../node_modules/vue-loader/lib/index.js??vue-loader-options!./App3.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./App3.vue?vue&type=template&id=87209330&\"\nimport script from \"./App3.vue?vue&type=script&lang=js&\"\nexport * from \"./App3.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('h2',[_vm._v(\"About 组件\")])}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\r\n  <h2>About 组件</h2>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  name: 'About',\r\n  beforeDestroy() {\r\n    console.log('About组件即将被销毁了呀！');\r\n  },\r\n  destroyed() {\r\n    console.log('About组件即将被销毁了呀！！！');\r\n  },\r\n  mounted() {\r\n    console.log('About组件挂载完毕了呀！！！', this);\r\n    window.aboutRoute = this.$route;\r\n    window.aboutRouter = this.$router;\r\n  },\r\n  // 组件内守卫：进入守卫，通过路由规则，进入该组件时被调用\r\n  beforeRouteEnter(to, from, next) {\r\n    console.log('组件内进入守卫', to, from);\r\n    if (to.meta.token) {\r\n      if (localStorage.getItem('token') === to.meta.token) {\r\n        next();\r\n      } else {\r\n        alert(`认证失败！鉴权无效！返回登录页面！！！`);\r\n        next('/login');\r\n      }\r\n    } else {\r\n      next();\r\n    }\r\n  },\r\n  // 组件内守卫：离开守卫，通过路由规则，离开该组件时被调用\r\n  beforeRouteLeave(to, from, next) {\r\n    console.log('组件内离开守卫', to, from);\r\n    next();\r\n  }\r\n}\r\n</script>\r\n","import mod from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./About.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./About.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./About.vue?vue&type=template&id=33e8667a&\"\nimport script from \"./About.vue?vue&type=script&lang=js&\"\nexport * from \"./About.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',[_c('h2',[_vm._v(\"Home 组件\")]),_c('div',[_c('ul',{staticClass:\"nav nav-tabs\"},[_c('li',[_c('router-link',{staticClass:\"list-group-item\",attrs:{\"active-class\":\"active\",\"to\":\"/home/news\"}},[_vm._v(\"News\")])],1),_c('li',[_c('router-link',{staticClass:\"list-group-item\",attrs:{\"active-class\":\"active\",\"to\":\"/home/message\"}},[_vm._v(\"Message\")])],1)]),_c('keep-alive',[_c('router-view')],1)],1)])}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\r\n  <div>\r\n    <h2>Home 组件</h2>\r\n    <div>\r\n      <ul class=\"nav nav-tabs\">\r\n        <li>\r\n          <router-link class=\"list-group-item\" active-class=\"active\" to=\"/home/news\">News</router-link>\r\n        </li>\r\n        <li>\r\n          <router-link class=\"list-group-item\" active-class=\"active\" to=\"/home/message\">Message</router-link>\r\n        </li>\r\n      </ul>\r\n      <!-- 缓存多个路由组件 -->\r\n      <!-- <keep-alive :include=\"['News','Message']\"> -->\r\n      <!-- 缓存一个路由组件 -->\r\n      <keep-alive>\r\n        <!-- 第07步：定义路由的【占位符】router-view -->\r\n        <router-view></router-view>\r\n      </keep-alive>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  name: 'Home',\r\n  /* beforeDestroy() {\r\n    console.log('Home组件即将被销毁了')\r\n  }, */\r\n  /* mounted() {\r\n    console.log('Home组件挂载完毕了',this)\r\n    window.homeRoute = this.$route\r\n    window.homeRouter = this.$router\r\n  },  */\r\n}\r\n</script>\r\n","import mod from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Home.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Home.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./Home.vue?vue&type=template&id=67086f19&\"\nimport script from \"./Home.vue?vue&type=script&lang=js&\"\nexport * from \"./Home.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',[_c('br'),_c('h4',{style:({opacity: _vm.opacity})},[_vm._v(\" > Home组件 > New组件 \")]),_c('span',[_vm._v(\"填写列表：\")]),_vm._m(0)])}\nvar staticRenderFns = [function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('ul',[_c('li',[_vm._v(\"一级内容：\"),_c('input',{attrs:{\"type\":\"text\"}})]),_c('li',[_vm._v(\"二级内容：\"),_c('input',{attrs:{\"type\":\"text\"}})]),_c('li',[_vm._v(\"三级内容：\"),_c('input',{attrs:{\"type\":\"text\"}})])])}]\n\nexport { render, staticRenderFns }","<template>\r\n  <div>\r\n    <br>\r\n    <h4 v-bind:style=\"{opacity}\">&nbsp;>&nbsp;Home组件&nbsp;>&nbsp;New组件&nbsp;</h4>\r\n    <span>填写列表：</span>\r\n    <ul>\r\n      <li>一级内容：<input type=\"text\"></li>\r\n      <li>二级内容：<input type=\"text\"></li>\r\n      <li>三级内容：<input type=\"text\"></li>\r\n    </ul>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  name: 'News',\r\n  data() {\r\n    return {\r\n      opacity: 1\r\n    }\r\n  },\r\n  /* beforeDestroy() {\r\n    console.log('News组件即将被销毁了')\r\n    clearInterval(this.timer)\r\n  }, */\r\n  /* mounted(){\r\n    this.timer = setInterval(() => {\r\n      console.log('@')\r\n      this.opacity -= 0.01\r\n      if(this.opacity <= 0) this.opacity = 1\r\n    },16)\r\n  }, */\r\n  beforeDestroy() {\r\n    console.log('Home组件的News组件即将被销毁了呀！');\r\n  },\r\n  destroyed() {\r\n    console.log('Home组件的News组件即将被销毁了呀！！！');\r\n  },\r\n  activated() {\r\n    console.log('Home组件的News组件被激活了呀！！！');\r\n    this.timer = setInterval(() => {\r\n      console.log('@');\r\n      this.opacity -= 0.01;\r\n      if (this.opacity <= 0) {\r\n        this.opacity = 1;\r\n      }\r\n    }, 15);\r\n  },\r\n  deactivated() {\r\n    console.log('Home组件的News组件被缓存了呀！！！');\r\n    clearInterval(this.timer);\r\n  },\r\n}\r\n</script>\r\n\r\n<style lang=\"less\" scoped>\r\n  h4 {\r\n    color: darkblue;\r\n  }\r\n  li {\r\n    list-style-type: none;\r\n  }\r\n</style>\r\n","import mod from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./News.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./News.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./News.vue?vue&type=template&id=c9c6a8f2&scoped=true&\"\nimport script from \"./News.vue?vue&type=script&lang=js&\"\nexport * from \"./News.vue?vue&type=script&lang=js&\"\nimport style0 from \"./News.vue?vue&type=style&index=0&id=c9c6a8f2&lang=less&scoped=true&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"c9c6a8f2\",\n  null\n  \n)\n\nexport default component.exports","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',[_c('br'),_c('h4',{style:({opacity: _vm.opacity})},[_vm._v(\" > Home组件 > Message组件 \")]),_c('span',[_vm._v(\"填写列表：\")]),_c('ul',_vm._l((_vm.messageList),function(m){return _c('li',{key:m.id},[_c('router-link',{attrs:{\"to\":{name:'details',query:{id:m.id,title:m.title}}}},[_vm._v(_vm._s(m.title))]),_vm._v(\"  \"),_c('button',{staticClass:\"btn btn-default\",attrs:{\"type\":\"button\"},on:{\"click\":function($event){return _vm.pushShow(m)}}},[_vm._v(\"push查看\")]),_vm._v(\"  \"),_c('button',{staticClass:\"btn btn-default\",attrs:{\"type\":\"button\"},on:{\"click\":function($event){return _vm.replaceShow(m)}}},[_vm._v(\"replace查看\")])],1)}),0),_c('hr'),_c('router-view')],1)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\r\n  <div>\r\n    <br>\r\n    <h4 v-bind:style=\"{opacity}\">&nbsp;>&nbsp;Home组件&nbsp;>&nbsp;Message组件&nbsp;</h4>\r\n    <span>填写列表：</span>\r\n    <ul>\r\n      <li v-for=\"m in messageList\" :key=\"m.id\">\r\n        <!-- 跳转路由并携带params参数，to的字符串写法 -->\r\n        <!-- <router-link :to=\"`/home/message/detail/${m.id}/${m.title}`\">{{m.title}}</router-link>&nbsp;&nbsp; -->\r\n\r\n        <!-- 跳转路由并携带params参数，to的对象写法 -->\r\n        <router-link :to=\"{name:'details',query:{id:m.id,title:m.title}}\">{{ m.title }}</router-link>&nbsp;\r\n\r\n        <button type=\"button\" class=\"btn btn-default\" @click=\"pushShow(m)\">push查看</button>&nbsp;\r\n        <button type=\"button\" class=\"btn btn-default\" @click=\"replaceShow(m)\">replace查看</button>\r\n      </li>\r\n    </ul>\r\n    <hr>\r\n    <!-- 第07步：定义路由的【占位符】router-view -->\r\n    <router-view></router-view>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  name: 'Message',\r\n  data() {\r\n    return {\r\n      opacity: 1,\r\n      messageList: [\r\n        {id: 10000, title: '中国电信'},\r\n        {id: 10010, title: '中国联通'},\r\n        {id: 10086, title: '中国移动'}\r\n      ]\r\n    }\r\n  },\r\n  methods: {\r\n    pushShow(m) {\r\n      this.$router.push({\r\n        name: 'details',\r\n        query: {\r\n          id: m.id,\r\n          title: m.title\r\n        }\r\n      })\r\n    },\r\n    replaceShow(m) {\r\n      this.$router.replace({\r\n        name: 'details',\r\n        query: {\r\n          id: m.id,\r\n          title: m.title\r\n        }\r\n      })\r\n    }\r\n  },\r\n  beforeDestroy() {\r\n    console.log('Home组件的Message组件即将被销毁了呀！');\r\n  },\r\n  destroyed() {\r\n    console.log('Home组件的Message组件即将被销毁了呀！！！');\r\n  },\r\n  activated() {\r\n    console.log('Home组件的Message组件被激活了呀！！！');\r\n    this.timer = setInterval(() => {\r\n      console.log('@');\r\n      this.opacity -= 0.01;\r\n      if (this.opacity <= 0) {\r\n        this.opacity = 1;\r\n      }\r\n    }, 15);\r\n  },\r\n  deactivated() {\r\n    console.log('Home组件的Message组件被缓存了呀！！！');\r\n    clearInterval(this.timer);\r\n  },\r\n}\r\n</script>\r\n\r\n<style lang=\"less\" scoped>\r\nh4 {\r\n  color: darkblue;\r\n}\r\nli {\r\n  list-style-type: none;\r\n}\r\n</style>\r\n","import mod from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Message.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Message.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./Message.vue?vue&type=template&id=35b96cf0&scoped=true&\"\nimport script from \"./Message.vue?vue&type=script&lang=js&\"\nexport * from \"./Message.vue?vue&type=script&lang=js&\"\nimport style0 from \"./Message.vue?vue&type=style&index=0&id=35b96cf0&lang=less&scoped=true&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"35b96cf0\",\n  null\n  \n)\n\nexport default component.exports","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',[_c('h4',[_vm._v(\"Details 详情组件\")]),_c('ul',[_c('li',[_vm._v(\"获取VueRouter插件$route对象query参数：\"+_vm._s(_vm.id))]),_c('li',[_vm._v(\"获取VueRouter插件$route对象query参数：\"+_vm._s(_vm.title))]),_c('li',[_vm._v(\"获取VueRouter插件$route对象query参数：\"+_vm._s(_vm.a))]),_c('li',[_vm._v(\"获取VueRouter插件$route对象query参数：\"+_vm._s(_vm.b))])])])}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\r\n  <div>\r\n    <h4>Details 详情组件</h4>\r\n    <ul>\r\n      <li>获取VueRouter插件$route对象query参数：{{ id }}</li>\r\n      <li>获取VueRouter插件$route对象query参数：{{ title }}</li>\r\n      <li>获取VueRouter插件$route对象query参数：{{ a }}</li>\r\n      <li>获取VueRouter插件$route对象query参数：{{ b }}</li>\r\n    </ul>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  name: 'Detail',\r\n  props: [\r\n    'id',\r\n    'title',\r\n    'a',\r\n    'b'\r\n  ],\r\n  computed: {\r\n    // id(){\r\n    // \treturn this.$route.query.id\r\n    // },\r\n    // title(){\r\n    // \treturn this.$route.query.title\r\n    // },\r\n  },\r\n  mounted() {\r\n    // console.log(this.$route)\r\n  },\r\n}\r\n</script>\r\n","import mod from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Detail.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Detail.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./Detail.vue?vue&type=template&id=a3a1c986&\"\nimport script from \"./Detail.vue?vue&type=script&lang=js&\"\nexport * from \"./Detail.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',[_c('h2',[_vm._v(\"Movies 组件\")]),_c('h6',[_vm._v(\"获取VueRouter插件$route对象中的query参数：\"+_vm._s(this.$route.query.username)+\"，密码：\"+_vm._s(this.$route.query.password))]),_c('h6',[_vm._v(\"获取VueRouter插件$route对象中的params参数：\"+_vm._s(this.$route.params.mid)+\"，密码：\"+_vm._s(this.$route.params.title))]),_c('h6',[_vm._v(\"编码：\"+_vm._s(_vm.mid)+\"，标题：\"+_vm._s(_vm.title))])])}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\r\n  <div>\r\n    <h2>Movies 组件</h2>\r\n    <!-- 跳转路由并携带【query】参数，to的字符串写法 -->\r\n    <!-- <router-link :to=\"`/home/message/detail?id=${item.id}&title=${item.title}`\">{{item.name}}</router-link> -->\r\n    <!-- <router-link :to=\"`/movies/12306/jessica?username=LiuWeiWei&password=123456`\">中国铁路</router-link> -->\r\n    <!-- 跳转路由并携带【query】参数，to的对象的写法 -->\r\n    <!-- <router-link :to=\"{path:'/home/message/detail',query:{id:item.id,title:item.title}}\">{{item.name}}</router-link> -->\r\n    <!-- <router-link :to=\"{path:'/movies/10086/jessica',query:{username:'LiuWeiWei',password:123456}}\">中国移动</router-link> -->\r\n\r\n    <!-- 跳转路由并携带【params】参数，to的字符串写法 -->\r\n    <!-- <router-link :to=\"`/home/message/detail/${item.id}/${item.title}`\">{{item.name}}</router-link> -->\r\n    <!-- <router-link :to=\"`/movies/12306/jessica`\">中国铁路</router-link> -->\r\n    <!-- 跳转路由并携带【params】参数，to的对象的写法 -->\r\n    <!-- <router-link :to=\"{name:'xiangqing',params:{id:item.id,title:item.title}}\">{{item.name}}</router-link> -->\r\n    <!-- <router-link :to=\"{name:'movies',params:{id:10010,title:'lucy'}}\">中国电信</router-link> -->\r\n\r\n    <h6>获取VueRouter插件$route对象中的query参数：{{ this.$route.query.username }}，密码：{{ this.$route.query.password }}</h6>\r\n    <h6>获取VueRouter插件$route对象中的params参数：{{ this.$route.params.mid }}，密码：{{ this.$route.params.title }}</h6>\r\n    <h6>编码：{{ mid }}，标题：{{ title }}</h6>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  name:'Movies',\r\n  props: [\r\n      'mid',\r\n      'title'\r\n  ],\r\n  mounted() {\r\n    console.log('阿西八', this.$route);\r\n  }\r\n}\r\n</script>\r\n","import mod from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Movies.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Movies.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./Movies.vue?vue&type=template&id=b36264d6&\"\nimport script from \"./Movies.vue?vue&type=script&lang=js&\"\nexport * from \"./Movies.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',[_c('h4',[_vm._v(\"ElementUI 组件\")]),_c('button',{attrs:{\"type\":\"button\"}},[_vm._v(\"原生按钮\")]),_c('input',{attrs:{\"type\":\"text\"}}),_c('el-button',[_vm._v(\"默认按钮\")]),_c('el-button',{attrs:{\"type\":\"primary\"}},[_vm._v(\"主要按钮\")]),_c('el-button',{attrs:{\"type\":\"success\"}},[_vm._v(\"成功按钮\")]),_c('el-button',{attrs:{\"type\":\"info\"}},[_vm._v(\"信息按钮\")]),_c('el-button',{attrs:{\"type\":\"warning\"}},[_vm._v(\"警告按钮\")]),_c('el-button',{attrs:{\"type\":\"danger\"}},[_vm._v(\"危险按钮\")]),_c('el-button',{attrs:{\"icon\":\"el-icon-search\",\"circle\":\"\"}}),_c('el-button',{attrs:{\"type\":\"primary\",\"icon\":\"el-icon-s-check\",\"circle\":\"\"}}),_c('el-button',{attrs:{\"type\":\"success\",\"icon\":\"el-icon-check\",\"circle\":\"\"}}),_c('el-button',{attrs:{\"type\":\"info\",\"icon\":\"el-icon-message\",\"circle\":\"\"}}),_c('el-button',{attrs:{\"type\":\"warning\",\"icon\":\"el-icon-star-off\",\"circle\":\"\"}}),_c('el-button',{attrs:{\"type\":\"danger\",\"icon\":\"el-icon-delete\",\"circle\":\"\"}})],1)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\r\n  <div>\r\n    <h4>ElementUI 组件</h4>\r\n    <button type=\"button\">原生按钮</button>\r\n    <input type=\"text\">\r\n    <el-button>默认按钮</el-button>\r\n    <el-button type=\"primary\">主要按钮</el-button>\r\n    <el-button type=\"success\">成功按钮</el-button>\r\n    <el-button type=\"info\">信息按钮</el-button>\r\n    <el-button type=\"warning\">警告按钮</el-button>\r\n    <el-button type=\"danger\">危险按钮</el-button>\r\n    <el-button icon=\"el-icon-search\" circle></el-button>\r\n    <el-button type=\"primary\" icon=\"el-icon-s-check\" circle></el-button>\r\n    <el-button type=\"success\" icon=\"el-icon-check\" circle></el-button>\r\n    <el-button type=\"info\" icon=\"el-icon-message\" circle></el-button>\r\n    <el-button type=\"warning\" icon=\"el-icon-star-off\" circle></el-button>\r\n    <el-button type=\"danger\" icon=\"el-icon-delete\" circle></el-button>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  name: 'ElementUIView',\r\n  computed: {\r\n    // id(){\r\n    // \treturn this.$route.query.id\r\n    // },\r\n    // title(){\r\n    // \treturn this.$route.query.title\r\n    // },\r\n  },\r\n  mounted() {\r\n    // console.log(this.$route)\r\n  },\r\n}\r\n</script>\r\n","import mod from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./ElementUIView.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./ElementUIView.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./ElementUIView.vue?vue&type=template&id=c624fc0e&\"\nimport script from \"./ElementUIView.vue?vue&type=script&lang=js&\"\nexport * from \"./ElementUIView.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","// 第00步：安装vue-router路由依赖包\r\n// peer vue@\"^2.6.11\" from the root project\r\n// peer vue@\"^3.2.0\" from vue-router@4.2.4\r\n\r\nimport Vue from \"vue\";\r\n// 第01步：导入第三方路由模块（依赖包）\r\nimport VueRouter from 'vue-router';\r\n\r\n// import Home from \"@/components/Home.vue\";\r\n// import Movie from \"@/components/Movie.vue\";\r\n// import About from \"@/components/VueRouterView.vue\";\r\n// import Tab1 from \"@/components/tabs/Tab1.vue\";\r\n// import Tab2 from \"@/components/tabs/Tab2.vue\";\r\n// import Main from \"@/components/Main.vue\";\r\n// import Login from \"@/components/Login.vue\";\r\n// import ContainerView from \"@/components/ElementUIView.vue\";\r\n// import SupportView from \"@/components/VuexStoreView.vue\";\r\n// import Cat1 from \"@/components/cats/VuexStoreCountView1.vue\";\r\n// import Cat2 from \"@/components/cats/VuexStorePersonView2.vue\";\r\n\r\nimport About from \"@/pages/About.vue\";\r\nimport Home from \"@/pages/Home.vue\";\r\nimport News from \"@/pages/News.vue\";\r\nimport Message from \"@/pages/Message.vue\";\r\nimport Detail from \"@/pages/Detail.vue\";\r\nimport Movies from \"@/pages/Movies.vue\";\r\nimport ElementUIView from \"../pages/ElementUIView.vue\";\r\n\r\n// 第02步：调用Vue.use()函数，把VueRouter安装为Vue插件\r\nVue.use(VueRouter);\r\n\r\n// 第03步：创建路由模块实例对象\r\nconst router = new VueRouter({\r\n    // 配置路由模式（两种：hash，history）\r\n    mode: 'history',\r\n    // 应用的基路径\r\n    base: process.env.BASE_URL,\r\n    // 配置路由规则\r\n    routes: [\r\n        // 第08步：配置路由规则（前面需要加斜杠（/））\r\n        {\r\n            path: '/',\r\n            redirect: '/about'\r\n        },\r\n        {\r\n            name: 'about',\r\n            path: '/about',\r\n            component: About,\r\n            meta: {\r\n              isAuth: true,\r\n              title: '关于我们'\r\n            }\r\n        },\r\n        {\r\n            name: 'home',\r\n            path: '/home',\r\n            component: Home,\r\n            children: [\r\n                {\r\n                    path: '/',\r\n                    redirect: 'news'\r\n                },\r\n                // 子级路由前面不需要加斜杠（/）哈！底层遍历的时候会自动加上哈！！！\r\n                {\r\n                    name: 'news',\r\n                    path: 'news',\r\n                    component: News,\r\n                    meta: {\r\n                      isAuth: true,\r\n                      title: '新联联播'\r\n                    }\r\n                },\r\n                // {\r\n                //     name: 'news',\r\n                //     path: 'news',\r\n                //     component: News,\r\n                //     // 配置独享路由守卫（就此路由规则享用此路由守卫）\r\n                //     meta: {\r\n                //         token: true,\r\n                //         title: '新闻联播'\r\n                //     },\r\n                //     beforeEnter: function (to, from, next) {\r\n                //         console.log('独享路由守卫', to.name, from.name);\r\n                //         if (to.meta.token) {\r\n                //             if (localStorage.getItem('token') === to.meta.token) {\r\n                //                 next();\r\n                //             } else {\r\n                //                 alert(`认证失败！无权登录！返回登录页面！！！`);\r\n                //                 next('/login');\r\n                //             }\r\n                //         } else {\r\n                //             next();\r\n                //         }\r\n                //     }\r\n                // },\r\n                {\r\n                    path: 'message',\r\n                    component: Message,\r\n                    children: [\r\n                        {\r\n                            name: 'details',\r\n                            path: 'detail',\r\n                            component: Detail,\r\n                            // 第一种写法：值为对象。该对象中的所有key-value都会以props的形式传给组件。\r\n                            // props:{a: 12306, b: '中国铁路'}\r\n                            // 第二种写法：值为布尔值。若布尔值为真，就会把该路由组件收到的所有params参数，以props的形式传给组件。\r\n                            // props:true\r\n                            // 第三种写法：值为函数。\r\n                            props($route) {\r\n                                return {\r\n                                    id: $route.query.id,\r\n                                    title: $route.query.title,\r\n                                    a: 12306,\r\n                                    b: '中国铁路'\r\n                                }\r\n                            },\r\n                            meta: {\r\n                              isAuth: true,\r\n                              title: '详细信息'\r\n                            }\r\n                        }\r\n                    ],\r\n                    meta: {\r\n                      isAuth: true,\r\n                      title: '消息中心'\r\n                    }\r\n                }\r\n            ]\r\n        },\r\n        {\r\n            name: 'movies',\r\n            path: '/movies/:mid/:title',\r\n            component: Movies,\r\n            props: true,\r\n            meta: {\r\n              isAuth: true,\r\n              title: '影视专区'\r\n            }\r\n        },\r\n        // 第08步：配置路由规则，开启 props 传递参数，从而获取动态参数（/:mid）的值。\r\n        // {\r\n        //     name: 'alias',\r\n        //     path: '/movie/:mid',\r\n        //     component: Movie,\r\n        //     props: true\r\n        // },\r\n        // {\r\n        //     name: 'about',\r\n        //     path: '/about',\r\n        //     component: About,\r\n        //     children: [\r\n        //         // 第08步：配置子路由规则（注意：前面不要加斜杠（/）），非默认\r\n        //         // {path: 'tab1', component: Tab1},\r\n        //         // 第08步：配置子路由规则（注意：前面不要加斜杠（/）），默认tab1可以省略，对应<router-link to=\"/about\">Table-1</router-link>\r\n        //         {\r\n        //             path: '',\r\n        //             component: Tab1},\r\n        //         {\r\n        //             name: 'tab2',\r\n        //             path: 'tab2',\r\n        //             component: Tab2\r\n        //         }\r\n        //     ]\r\n        // },\r\n        // {\r\n        //     path: '/support',\r\n        //     component: SupportView,\r\n        //     children: [\r\n        //         {\r\n        //             path: '/',\r\n        //             redirect: 'cat1'\r\n        //         },\r\n        //         {\r\n        //             name: 'cat1',\r\n        //             path: 'cat1',\r\n        //             component: Cat1\r\n        //         },\r\n        //         {\r\n        //             name: 'cat2',\r\n        //             path: 'cat2',\r\n        //             component: Cat2\r\n        //         }\r\n        //     ]\r\n        // },\r\n        // {name: 'main', path: '/main', component: Main},\r\n        // {name: 'login', path: '/login', component: Login},\r\n        // {name: 'contain', path: '/contain', component: ContainerView}\r\n        {\r\n            name: 'elemeui',\r\n            path: '/elemeui',\r\n            component: ElementUIView,\r\n            meta: {\r\n              isAuth: true,\r\n              title: '饿了么库'\r\n            }\r\n        }\r\n    ]\r\n});\r\n\r\n// 第03步：全局前置守卫（全局前置监听器）\r\n// 第03步：全局前置路由守卫————初始化的时候被调用、每次路由切换之前被调用\r\nrouter.beforeEach(function (to, from, next) {\r\n    // to     参数是将要访问的路由的信息对象。去哪里的路由规则。\r\n    // from   参数是将要离开的路由的信息对象。从哪来的路由规则。\r\n    // next() 函数表示放行，允许这次路由导航。放行函数。\r\n    // 当前用户拥有后台主页的访问权限，直接放行：next()\r\n    // 当前用户没有后台主页的访问权限，强制其跳转到登录页面：next('/login')\r\n    // 当前用户没有后台主页的访问权限，不允许跳转到后台主页：next(false)\r\n    if (to.path === '/main') {\r\n        const token = localStorage.getItem('token');\r\n        console.log(token);\r\n        if (token) {\r\n            next();\r\n        } else {\r\n            next('/login');\r\n        }\r\n    } else {\r\n        next();\r\n    }\r\n});\r\n\r\n// 第03步：全局后置守卫（全局后置监听器）\r\n// 第03步：全局后置路由守卫————初始化的时候被调用、每次路由切换之后被调用\r\nrouter.afterEach(function (to, from) {\r\n    console.log('After Each: ', to.name, from.name);\r\n    console.log('After Each: ', to.path, from.path);\r\n    console.log('After Each: ', to.fullPath, from.fullPath);\r\n    document.title = to.meta.title || '如果Meta没有标题就用我吧';\r\n});\r\n\r\n// 第04步：向外共享路由的实例对象\r\nexport default router;\r\n\r\n\r\n\r\n","export default {\r\n    // 模板：开启命名空间\r\n    namespaced: true,\r\n    // 材料：准备state——用于存储数据（state）\r\n    state: {\r\n        countSum: 2,\r\n        countMessage: 'Hello World - Count',\r\n        countStatus: 200\r\n    },\r\n    // 加工：准备getters——用于将state中的数据进行加工\r\n    getters: {\r\n\r\n    },\r\n    // 后厨：准备mutations——用于操作数据（state）\r\n    mutations: {\r\n\r\n    },\r\n    // 迎宾：准备actions——用于响应组件中的动作\r\n    actions: {\r\n\r\n    }\r\n}\r\n","export default {\r\n    // 模板：开启命名空间\r\n    namespaced: true,\r\n    // 材料：准备state——用于存储数据（state）\r\n    state: {\r\n        personSum: 5,\r\n        personMessage: 'Hello World - Person',\r\n        personStatus: 500,\r\n        personList: [\r\n            {id: 10001, name: 'Jack', age: 28, state: 1},\r\n            {id: 10008, name: 'Lucy', age: 38, state: 0},\r\n            {id: 10004, name: 'Lisa', age: 48, state: 0},\r\n            {id: 10002, name: 'Andy', age: 54, state: 1}\r\n        ]\r\n    },\r\n    // 加工：准备getters——用于将state中的数据进行加工\r\n    getters: {\r\n        firstName(state) {\r\n            return state.personList[0].name;\r\n        }\r\n    },\r\n    // 后厨：准备mutations——用于操作数据（state）\r\n    mutations: {\r\n        ADD_PERSON(state, value) {\r\n            console.log(`Vuex.Store.person-store.mutations().ADD_PERSON()函数被调用了呀！！！`);\r\n            state.personList.unshift(value);\r\n        }\r\n    },\r\n    // 迎宾：准备actions——用于响应组件中的动作\r\n    actions: {\r\n\r\n    }\r\n}\r\n","// 第00步：下载第三方模块插件依赖包vuex\r\n// npm install vuex@3.6.2\r\n\r\n/**\r\n * 在2022年02月07日，vue3成为了默认版本。\r\n * 如果手动npm install vue，则安装的直接就是vue3版本。\r\n * 当vue3成为默认版本的同时，vuex也更新到了vuex4版本。\r\n * 而vuex4版本，只能在vue3版本中使用。\r\n * vue2中，使用vuex3版本。\r\n * vue3中，使用vuex4版本。\r\n * vuex 核心函数：\r\n *     (0).state:{} 材料对象。\r\n *         1).attribute 数据。注意：mutate()函数来跟State对象对话。\r\n *     (1).mutations:{} 后厨对象。\r\n *         1).commit(state, value) 函数调用。注意：commit()函数是跟mutations对象对话。注意：devTools开发者工具是跟Mutations对象对话。\r\n *     (2).actions:{} 迎宾对象。\r\n *         1).dispatch(context, value) 函数调用。注意：dispatch()函数是跟actions对象对话。\r\n *     (3).getters:{} 加工对象。\r\n *     (4).modules:{} 模块对象。\r\n * 注意：mutate()函数来跟State对象对话。\r\n * 注意：commit()函数是跟Mutations对象对话。\r\n * 注意：devTools开发者工具是跟Mutations对象对话。\r\n * 注意：dispatch()函数是跟Actions对象对话。\r\n * vuex 操作流程：\r\n *     (1).迎宾：准备actions——用于响应组件中的动作。\r\n *     (2).后厨：准备mutations——用于操作数据（state）。\r\n *     (3).材料：准备state——用于存储数据（state）。\r\n * vuex 加工：\r\n *     // 加工：准备getters——用于将state中的数据进行加工\r\n *     getters: {\r\n *         dataProcessing(state) {\r\n *             return state.sum * 10;\r\n *         }\r\n *     },\r\n * Vuex中的四个map函数基本使用：\r\n *     (1) ...mapState({ 对象形式 })\r\n *     (1) ...mapState([ 数组形式 ])\r\n *     (2) ...mapGetters({ 对象形式 })\r\n *     (2) ...mapGetters([ 数组形式 ])\r\n *     // 渲染：\r\n *     <!-- Vuex.$store.mapState()或者Vuex.$store.mapGetters() -->\r\n *     <button v-on:click=\"increment()\">递增+1</button>\r\n *     <button v-on:click=\"decrement()\">递减-1</button>\r\n *     <button v-on:click=\"incrementOdd()\">当前求和为奇数再加</button>\r\n *     <button v-on:click=\"incrementWait()\">等一等再加</button>\r\n *     <h4>通过Vuex插件mapState()函数获取state中的数据：{{key1}}，{{key2}}，{{key3}}</h4>\r\n *     <h4>通过Vuex插件mapState()函数获取state中的数据：{{sum}}，{{message}}，{{status}}</h4>\r\n *     <h4>通过Vuex插件mapGetters()函数获取getters中的数据：{{bigSum}}</h4>\r\n *     <h4>通过Vuex插件mapGetters()函数获取getters中的数据：{{dataProcessing}}</h4>\r\n *     // 获取：\r\n *     computed: {\r\n *         // 借助mapState生成计算属性，从state中读取数据。（对象写法）\r\n *         ...mapState({key1: 'sum', key2: 'message', key3: 'status'}),\r\n *         // 借助mapState生成计算属性，从state中读取数据。（数组写法）\r\n *         ...mapState(['sum', 'message', 'status']),\r\n *\r\n *         // 借助mapGetters生成计算属性，从getters中读取数据。（对象写法）\r\n *         ...mapGetters({bigSum: 'dataProcessing'}),\r\n *         // 借助mapGetters生成计算属性，从getters中读取数据。（数组写法）\r\n *         ...mapGetters(['dataProcessing']),\r\n *     },\r\n *     (3) ...mapMutations({ 对象形式 })\r\n *     (3) ...mapMutations([ 数组形式 ])\r\n *     (4) ...mapActions({ 对象形式 })\r\n *     (4) ...mapActions([ 数组形式 ])\r\n *     <!-- Vuex.$store.mapMutations()或者Vuex.$store.mapActions() -->\r\n *     <button v-on:click=\"increment(n)\">递增+1</button>\r\n *     <button v-on:click=\"decrement(n)\">递减-1</button>\r\n *     <button v-on:click=\"incrementOdd(n)\">当前求和为奇数再加</button>\r\n *     <button v-on:click=\"incrementWait(n)\">等一等再加</button>\r\n *     methods: {\r\n *         // 靠mapActions生成：increment、decrement（对象形式）\r\n *         ...mapMutations({increment:'ADD', decrement:'SUB'}),\r\n *         // 靠mapMutations生成：ADD、SUB（对象形式）\r\n *         ...mapMutations(['ADD', 'SUB']),\r\n *\r\n *         // 靠mapActions生成：incrementOdd、incrementWait（对象形式）\r\n *         ...mapActions({incrementOdd: 'addOdd', incrementWait: 'addWait'}),\r\n *         // 靠mapActions生成：incrementOdd、incrementWait（数组形式）\r\n *         ...mapActions(['addOdd', 'addWait']),\r\n *     },\r\n * Vuex模块化+命名空间基本使用：\r\n *    (1).目的：让代码更好维护，让多种数据分类更加明确。\r\n *     (2).修改：@/store/index.js。\r\n *         // 统计命名空间一\r\n *         const countAbout = {\r\n *             // 开启命名空间\r\n *             namespaced:true,\r\n *             state:{},\r\n *             getters: {}\r\n *             mutations: {},\r\n *             actions: {}\r\n *         }\r\n *         // 职工命名空间二\r\n *         const personAbout = {\r\n *             // 开启命名空间\r\n *             namespaced:true,\r\n *             state:{},\r\n *             getters:{},\r\n *             mutations: {},\r\n *             actions: {}\r\n *         }\r\n *         // 创建状态管理实例对象\r\n *         const store = new Vuex.Store({\r\n *             modules: {\r\n *                 countAbout,\r\n *                 personAbout\r\n *             }\r\n *         });\r\n *         // 向外共享状态管理实例对象\r\n *         export default store;\r\n *     提示：或者创建两个不同的JS文件，比如：@/store/count-store.js和@/store/person-store.js，然后在@/store/index.js中引入。\r\n *     (3).开启命名空间后，组件中读取state数据：\r\n *         // 方式一：自己直接读取\r\n *         this.$store.state.personAbout.list;\r\n *         // 方式二：借助mapState读取：\r\n *         ...mapState('countAbout',['sum', 'school', 'subject']),\r\n *     （4）.开启命名空间后，组件中读取getters数据：\r\n *         // 方式一：自己直接读取\r\n *         this.$store.getters['personAbout/firstPersonName'];\r\n *         // 方式二：借助mapGetters读取：\r\n *         ...mapGetters('countAbout', ['bigSum']);\r\n *     （5）.开启命名空间后，组件中调用dispatch\r\n *         // 方式一：自己直接dispatch\r\n *         this.$store.dispatch('personAbout/addPersonWang', person);\r\n *         // 方式二：借助mapActions：\r\n *         ...mapActions('countAbout', {incrementOdd:'jiaOdd', incrementWait:'jiaWait'});\r\n *     （6）.开启命名空间后，组件中调用commit\r\n *         //方式一：自己直接commit\r\n *         this.$store.commit('personAbout/ADD_PERSON', person);\r\n *         //方式二：借助mapMutations：\r\n *         ...mapMutations('countAbout',{increment:'ADD', decrement:'SUB'}),\r\n *\r\n */\r\n\r\nimport Vue from 'vue';\r\n// 第01步：引入第三方模块插件依赖包vuex\r\nimport Vuex from 'vuex';\r\nimport countStore from \"@/store/count-store.js\";\r\nimport personStore from \"@/store/person-store.js\";\r\n\r\n// 第02步：使用第三方模块插件vuex\r\nVue.use(Vuex);\r\n\r\n// 第03步：创建状态管理的实例对象\r\nconst store = new Vuex.Store({\r\n    // 材料：准备state——用于存储数据（state）\r\n    state: {\r\n        // 当前的和\r\n        sum: 1,\r\n        message: 'Hello World',\r\n        status: 200,\r\n        list: [\r\n            {id: 10086, nickname: '中国移动', state: 0, isDelete: false},\r\n            {id: 10010, nickname: '中国联通', state: 1, isDelete: true},\r\n            {id: 10000, nickname: '中国电信', state: 1, isDelete: true},\r\n            {id: 12306, nickname: '中国铁路', state: 0, isDelete: false}\r\n        ]\r\n    },\r\n    // 加工：准备getters——用于将state中的数据进行加工\r\n    getters: {\r\n        dataProcessing(state) {\r\n            return state.sum * 10;\r\n        }\r\n    },\r\n    // 后厨：准备mutations——用于操作数据（state）\r\n    mutations: {\r\n        ADD(state, value) {\r\n            console.log(`Vuex.Store.mutations().ADD()函数被调用了呀！！！`);\r\n            state.sum += value;\r\n        },\r\n        SUB(state, value) {\r\n            console.log(`Vuex.Store.mutations().SUB()函数被调用了呀！！！`);\r\n            state.sum -= value;\r\n        },\r\n        ADD_LIST(state, value) {\r\n            console.log(`Vuex.Store.mutations().ADD_LIST()函数被调用了呀！！！`);\r\n            state.list.unshift(value);\r\n        }\r\n    },\r\n    // 迎宾：准备actions——用于响应组件中的动作\r\n    actions: {\r\n        addOdd(context, value) {\r\n            console.log(`Vuex.Store.actions().addOdd()函数被调用了呀！！！`);\r\n            if (context.state.sum % 2) {\r\n                context.commit('ADD', value);\r\n            }\r\n        },\r\n        addWait(context, value) {\r\n            console.log(`Vuex.Store.actions().addWait()函数被调用了呀！！！`);\r\n            setTimeout(() => {\r\n                context.commit('ADD', value);\r\n            }, 1000);\r\n        }\r\n    },\r\n    // 解释：模块化。命名空间namespaced。\r\n    modules: {\r\n        countStore: countStore,\r\n        personStore: personStore\r\n    }\r\n});\r\n\r\n// 第04步：向外共享状态管理的实例对象\r\nexport default store;\r\n\r\n\r\n\r\n","/**\r\n * 一、webpack前端工程化章节：\r\n * 什么是webpack前端工程化解决方案\r\n * 功能：它提供了友好的前端模块化开发支持，以及代码压缩混淆、处理浏览器端 JavaScript 的兼容性、性能优化等强大的功能。\r\n * 优点：让程序员把工作的重心放到具体功能的实现上，提高了前端开发效率和项目的可维护性。\r\n * 注意：目前 Vue，React 等前端项目，基本上都是基于 webpack 进行工程化开发的。\r\n * 基本使用：\r\n * 01.创建空白项目（创建目录，比如：webpack-demo1），并且运行 npm init -y 命令，初始化包管理配置文件 package.json。\r\n * 02.新建 src 源码目录。\r\n * 03.新建 src/index.html 首页，和 src/index.js 首页脚本文件。\r\n * 04.初始化首页的基本结构，说白了就是写点东西哒。\r\n * 05.运行 npm install jquery -S 命令，安装 jQuery 类库。\r\n * 06.通过 ES6 模块化的方式导入 jQuery，这种已经通过 npm 方式安装，不必啰嗦。\r\n * 07.在项目中安装 webpack 前端化工程模块依赖包 webpack 和 webpack-cli。\r\n * 08.在项目中配置 webpack 前端化工程，根目录下创建文件 webpack.config.js。\r\n * module.exports = {\r\n *     mode: 'development' // mode 用来指定构建模式，可选值有 development 和 production。会被 package.json 中目录 scripts 下打包 build 属性覆盖。\r\n * }\r\n * 09.在项目中配置 package.json 包文件。\r\n * \"scripts\": {\r\n *     \"dev\": \"webpack\" // script 节点下的脚本，可以通过 npm run 执行。例如：npm run dev。\r\n * }\r\n * 10.在终端中运行 npm run dev 命令，启动 webpack 进行项目的打包构建。\r\n * 11.自定义 webpack 打包的入口（Entry节点）与出口（Output节点）。\r\n * const path = require('path');\r\n * module.exports = {\r\n *     mode: 'development', // mode 用来指定构建模式，可选值有 development 和 production。\r\n *     entry: path.join(__dirname, './src/index.js'), // 打包入口文件的路径。\r\n *     output: {\r\n *         path: path.join(__dirname, './dist'), // 输出文件的存放路径。\r\n *         filename: \"main.js\" // 输出文件的名称。\r\n *     },\r\n * }\r\n * 12.可以让 webpack 监听项目源码的变化插件 webpack-dev-server，从而进行自动打包构建。\r\n * 13.在项目中配置 package.json 包文件。\r\n * \"scripts\": {\r\n *     \"dev\": \"webpack serve\" // script 节点下的脚本，可以通过 npm run 执行。例如：npm run dev。\r\n * }\r\n * 14.两次运行 npm run dev 命令，重新进行项目的打包，在浏览器中访问 http://localhost:8080/ 地址，查看实时打包效果。\r\n * 15.可以让 webpack 中的 HTML 插件，通过此插件自定制 index.html 页面的内容。\r\n * # npm init -y\r\n * # npm install jquery -S\r\n * # npm install webpack@5.42.1 webpack-cli@4.7.2 -D\r\n * # npm install webpack-dev-server@3.11.2 -D\r\n * # npm install html-webpack-plugin@5.3.2 -D\r\n * 16.自定义 webpack 打包的插件节点plugins，以及开发服务节点devServer。\r\n * const path = require('path');\r\n * // 导入HTML插件，得到一个构造函数。\r\n * const HtmlPlugin = require('html-webpack-plugin');\r\n * // 创建HTML插件的实例对象。\r\n * const htmlPlugin = new HtmlPlugin({\r\n *     template: './src/index.html',\r\n *     filename: './index.html'\r\n * });\r\n * module.exports = {\r\n *     mode: \"development\",                            // mode 用来指定构建模式，可选值有 development 和 production。\r\n *     entry: path.join(__dirname, './src/index.js'),  // 打包入口文件的路径。\r\n *     output: {\r\n *         path: path.join(__dirname, './dist'),       // 输出文件的存放路径。\r\n *         filename: \"main.js\"                         // 输出文件的名称。\r\n *     },\r\n *     plugins: [htmlPlugin],                          // 通过 plugins 节点，使 htmlPlugin 插件生效。\r\n *     devServer: {\r\n *         open: true,                                 // 初次打包完成后，自动打开浏览器。\r\n *         host: '127.0.0.1',                          // 实时打包所使用的主机地址。\r\n *         port: 80                                    // 实时打包所使用的端口号。\r\n *     }\r\n * }\r\n * 17.使用 webpack 插件加载器 loader 插件，协助 webpack 打包处理特定的文件模块。\r\n * 比如：css-loader处理.css文件、less-loader处理.less文件、babel-loader处理JS语法。\r\n * # npm init -y\r\n * # npm install jquery -S\r\n * # npm install webpack@5.42.1 webpack-cli@4.7.2 -D\r\n * # npm install webpack-dev-server@3.11.2 -D\r\n * # npm install html-webpack-plugin@5.3.2 -D\r\n * 比如：打包处理 CSS 文件\r\n * # npm install style-loader@3.0.0 css-loader@5.2.6 -D\r\n * 比如：打包处理 LESS 文件\r\n * # npm install less-loader@10.0.1 less@4.1.1 -D\r\n * 比如：打包处理 URL 路径相关的文件\r\n * # npm install url-loader@4.1.1 file-loader@6.2.0 -D\r\n * 比如：打包处理 JS 文件\r\n * # npm install babel-loader@8.2.2 @babel/core@7.14.6 @babel/plugin-proposal-decorators@7.14.5 -D\r\n * 配置：webpack.config.js\r\n * const path = require('path');\r\n * const HtmlPlugin = require('html-webpack-plugin');\r\n * const htmlPlugin = new HtmlPlugin({\r\n *     template: './src/index.html',\r\n *     filename: './index.html'\r\n * });\r\n * module.exports = {\r\n *     mode: \"development\", // mode 用来指定构建模式，可选值有 development 和 production。会被 package.json 中目录 scripts 下打包 build 属性覆盖。\r\n *     entry: path.join(__dirname, './src/index.js'), // 打包入口文件的路径\r\n *     output: {\r\n *         path: path.join(__dirname, './dist'), // 输出文件的存放路径\r\n *         filename: \"main.js\" // 输出文件的名称\r\n *     },\r\n *     plugins: [htmlPlugin], // 通过 plugins 节点，使 htmlPlugin 插件生效\r\n *     devServer: {\r\n *         open: true, // 初次打包完成后，自动打开浏览器\r\n *         host: '127.0.0.1', // 实时打包所使用的主机地址\r\n *         port: 80 // 实时打包所使用的端口号\r\n *     },\r\n *     module: { // 所有第三方文件模块的匹配规则\r\n *         rules: [ // 文件后缀名的匹配规则\r\n *             {\r\n *                 test: /\\.css/, // 表示匹配的文件类型\r\n *                 use: ['style-loader', 'css-loader'] // 表示对应要调用的加载器\r\n *             },\r\n *             {\r\n *                 test: /\\.less$/, // 表示文件后缀名的匹配规则\r\n *                 use: ['style-loader', 'css-loader', 'less-loader']\r\n *             },\r\n *             {\r\n *                 test: /\\.jpg|png|gif$/,\r\n *                 use: 'url-loader?limit=22229' // 用来指定图片的大小，单位是字节（Byte）\r\n *             },\r\n *             {\r\n *                 test: /\\.js$/,\r\n *                 use: 'babel-loader',\r\n *                 exclude: /node_modules/\r\n *             }\r\n *         ]\r\n *     }\r\n * }\r\n * 18.在项目根目录下，创建名为 babel.config.js 的配置文件，定义 Babel 的配置项如下：\r\n * module.exports = {\r\n *     plugins: [\r\n *         [\r\n *             '@babel/plugin-proposal-decorators',\r\n *             {\r\n *                 legacy: true\r\n *             }\r\n *         ]\r\n *     ]\r\n * }\r\n * 19.打包发布。\r\n * 在项目中配置 package.json 包文件，新增 build 命令如下：\r\n * \"scripts\": {\r\n *     \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\",\r\n *     \"dev\": \"webpack serve\", // 开发环境中，运行 dev 命令\r\n *     \"build\": \"webpack --mode production\" // 项目发布时，运行 build 命令\r\n * },\r\n * // 通过 --model 是一个参数项，用来指定 webpack 的运行模式。production 代表生产环境，会对打包生成的文件进行代码压缩和性能优化。\r\n * // 通过 --model 指定的参数项，会覆盖 webpack.config.js 中的 model 选项。\r\n * 20.自动清理 dist 目录下的旧文件插件 clean-webpack-plugin。\r\n * # npm install clean-webpack-plugin@3.0.0 -D\r\n * 配置：webpack.config.js\r\n * const { CleanWebpackPlugin } = require('clean-webpack-plugin');\r\n * const cleanWebpackPlugin = new CleanWebpackPlugin();\r\n * module.exports = {\r\n *     plugins: [htmlPlugin, cleanWebpackPlugin], // 通过 plugins 节点，使 htmlPlugin 插件生效。挂载创建清除插件到 plugins 节点。\r\n * }\r\n *\r\n * 二、vue基础章节：\r\n * MVVM 工作原理？\r\n * MVVM是vue实现数据驱动视图和双向数据绑定的核心原理。\r\n * MVVM是指Model、ViewModel、View。\r\n * 03.View      表示当前页面所渲染的DOM结构。\r\n * 02.ViewModel 表示vue的实例，它是MVVM的核心。\r\n * 01.Model     表示当前页面渲染时所依赖的数据源。\r\n * ViewModel作为 MVVM 的核心，是它把当前页面的数据源 Model 和页面的结构 View 连接在了一起。\r\n * 当数据源发生变化时，会被 ViewModel 监听到，VM 会根据最新的数据源自动更新页面的结构。\r\n * 当表单元素的值发生变化时，也会被 VM 监听到，VM 会把变化过后最新的值自动同步到 Model 数据源中。\r\n *\r\n * vue-devtools 调试工具？\r\n * vue 官方提供的 vue-devtools 调试工具，能够方便开发者对 vue 项目进行调试与开发。\r\n * Chrome 浏览器在线安装 vue-devtools ：\r\n * https://chrome.google.com/webstore/detail/vuejs-devtools/nhdogjmejiglipccpnnnanhbledajbpd/\r\n * FireFox 浏览器在线安装 vue-devtools ：\r\n * https://addons.mozilla.org/zh-CN/firefox/addon/vue-js-devtools/\r\n * 点击 Chrome 浏览器右上角的 按钮，选择更多工具 - 扩展程序 - Vue.js devtools 详细信息，并勾选如下的两个选项：\r\n * 允许此扩展程序读取和更改您在所访问的网站上留存的所有数据。\r\n * 允许访问文件网址。\r\n * 在浏览器中访问一个使用了 vue 的页面，打开浏览器的开发者工具，切换到 Vue 面板，即可使用 vue-devtools 调试当前的页面。\r\n *\r\n * vue 指令？\r\n * 第一种创建 Vue 实例对象方式。\r\n * const vm = new Vue({\r\n *     // 3.2.指定Model数据源。\r\n *     data: {\r\n *         username: 'Jessica'\r\n *     }\r\n * });\r\n * // 3.1.指定当前vm实例对象要控制页面的哪个区域。\r\n * vm.mount('#app');\r\n * 第二种创建 Vue 实例对象方式。\r\n * const vm = new Vue({\r\n *     // 3.1.el 属性指向的选择器，就是View视图区域。\r\n *     el: '#app',\r\n *     // 3.2.data 属性指向的对象，就是Model数据源。\r\n *     data: {\r\n *         username: 'Jessica'\r\n *     }\r\n * });\r\n * 第三种创建 Vue 实例对象方式。\r\n * export default {\r\n *     data() {\r\n *         return {\r\n *             username: 'Jessica'\r\n *         }\r\n *     },\r\n * }\r\n * import Vue from 'vue';\r\n * import App from '@/App.vue';\r\n * import router from \"@/router/index.js\";\r\n * new Vue({ render: h => h(App), router: router }).$mount('#app');\r\n * vue 中的指令按照不同的用途可以划分为如下 6 大类：\r\n * 01).内容渲染指令（内容渲染指令用来辅助开发者渲染 DOM 元素的文本内容。常用的内容渲染指令有如下三个：）\r\n *     {{}}    使用插值表达式，将对应的值渲染到元素的内容节点中。\r\n *     v-text  指令和插值表达式只能渲染纯文本内容。\r\n *     v-html  如果需要把包含HTML标签的字符串渲染为页面的HTML元素，则需要用到v-html这个指令。\r\n * 02).属性绑定指令\r\n *     v-bind  如果需要为元素的属性动态绑定属性值，则需要用到v-bind属性绑定指令。\r\n * 03).事件绑定指令\r\n *     v-on    提供了v-on事件绑定指令，用来辅助程序员为DOM元素绑定事件监听。\r\n * 04).双向绑定指令\r\n *     v-model 提供了v-model双向数据绑定指令，用来辅助开发者在不操作DOM的前提下，快速获取表单的数据。\r\n * 05).条件渲染指令（条件渲染指令用来辅助开发者按需控制 DOM 的显示与隐藏。条件渲染指令有如下两个：）\r\n *     v-if    指令会动态地创建或移除DOM元素，从而控制元素在页面上的显示与隐藏；\r\n *     v-show  指令会动态为元素添加或移除style=\"display:none;\"样式，从而控制元素的显示与隐藏；\r\n * 06).列表渲染指令\r\n *     v-for   提供了v-for列表渲染指令，用来辅助开发者基于一个数组来循环渲染一个列表结构。v-for指令需要使用(item in items)形式的特殊语法，其中：items是待循环的数组，item是被循环的每一项。\r\n *\r\n * 过滤器？\r\n * filters 过滤器是vue为开发者提供的功能，常用于文本的格式化。过滤器可以用在两个地方：插值表达式和v-bind属性绑定。\r\n * 过滤器应该被添加在 JavaScript 表达式的尾部，由【管道符】进行调用，示例代码如下：\r\n * 01).自定义私有过滤器\r\n * <!-- 在双大括号中通过【管道符】竖线调用 capitalize 过滤器，对 message 的值进行需求处理。 -->\r\n * <p>{{ message | capitalize }}</p>\r\n * export default {\r\n *   data() {\r\n *     return {\r\n *       message: uuid.v4()\r\n *     };\r\n *   },\r\n *   filters: {\r\n *     capitalize(str) {\r\n *       return str.toString().replaceAll('-', '').toUpperCase();\r\n *     }\r\n *   }\r\n * }\r\n * 02).自定义全局过滤器\r\n * 在 filters 节点下定义的过滤器，称为【私有过滤器】，因为它只能在当前vm实例所控制的el区域内使用。\r\n * 如果希望在多个vue实例之间共享过滤器，则可以按照如下的格式定义全局过滤器：\r\n * Vue.filter('capitalize', (str) => { return str.toString().replaceAll('-', '').toUpperCase() });\r\n * 03).自定义多个私有过滤器\r\n * <!-- 在双大括号中通过【管道符】竖线调用 capitalize 过滤器，对 message 的值进行需求处理。 -->\r\n * <p>{{ message | capitalize | other }}</p>\r\n * export default {\r\n *   data() {\r\n *     return {\r\n *       message: uuid.v4()\r\n *     };\r\n *   },\r\n *   filters: {\r\n *     // 此过滤器函数处理字符替换需求\r\n *     capitalize(str) {\r\n *       return str.toString().replaceAll('-', '');\r\n *     },\r\n *     // 此过滤器函数处理字符大写转换需求\r\n *     other(str) {\r\n *       return str.toUpperCase();\r\n *     }\r\n *   }\r\n * }\r\n * 04).自定义多个私有多参数过滤器\r\n * <!-- 在双大括号中通过【管道符】竖线调用 capitalize 过滤器，对 message 的值进行需求处理。 -->\r\n * <p>{{ message | capitalize | other | addition(uuid.v4(), '2023') }}</p>\r\n * export default {\r\n *   name: 'Home',\r\n *   data() {\r\n *     return {\r\n *       message: uuid.v4(),\r\n *       uuid: uuid\r\n *     };\r\n *   },\r\n *   filters: {\r\n *     capitalize(str) {\r\n *       return str.toString().replaceAll('-', '');\r\n *     },\r\n *     other(str) {\r\n *       return str.toUpperCase();\r\n *     },\r\n *     addition(str, arg1, arg2) {\r\n *       return str + arg1 + arg2;\r\n *     }\r\n *   }\r\n * }\r\n *\r\n * 侦听器？\r\n * watch 侦听器允许开发者监视数据的变化，从而针对数据的变化做特定的操作。\r\n * 默认情况下，组件在初次加载完毕后不会调用 watch 侦听器。如果想让 watch 侦听器立即被调用，则需要使用 immediate 属性选项。\r\n * 账号：<input type=\"text\" name=\"username\" id=\"username\" v-model=\"username\">\r\n * <span>侦听用户账号：{{ username }}</span>\r\n * export default {\r\n *   data() {\r\n *     return {\r\n *       username: ''\r\n *     };\r\n *   },\r\n *   filters: {},\r\n *   watch: {\r\n *     // 侦听 username 属性的值的变化\r\n *     username(newVal, oldVal) {\r\n *       console.log(`旧值：${newVal}，新值：${oldVal}`);\r\n *     }\r\n *   }\r\n * }\r\n * 场景：监听 username 值的变化，并使用 axios 发起 Ajax 请求，检测当前输入的用户名是否可用：\r\n * watch: {\r\n *     async username(newVal) {\r\n *         if ('' === newVal) {\r\n *             return;\r\n *         }\r\n *         const { data: res } = await axios.get('http://127.0.0.1:3307/checkAccount/' + newVal);\r\n *         console.log(res);\r\n *     }\r\n * }\r\n * 默认情况下，组件在初次加载完毕后不会调用 watch 侦听器。如果想让 watch 侦听器立即被调用，则需要使用 immediate 属性选项。\r\n * 示例代码如下：\r\n * watch: {\r\n *     username: {\r\n *         handler: async function(newVal) {\r\n *             if ('' === newVal) {\r\n *                 return;\r\n *             }\r\n *             const { data: res } = await axios.get('http://127.0.0.1:3307/checkAccount/' + newVal);\r\n *             console.log(res);\r\n *         }\r\n *         // 表示页面初次渲染好之后，就立即触发当前的 watch 监听器。\r\n *         immediate: true\r\n *     }\r\n * }\r\n * 如果 watch 侦听的是一个对象，如果对象中的属性值发生了变化，则无法被监听到。此时需要使用 deep 属性选项，\r\n * 代码示例如下：\r\n * watch: {\r\n *     username: {\r\n *         handler: async function(newVal) {\r\n *             if ('' === newVal) {\r\n *                 return;\r\n *             }\r\n *             const { data: res } = await axios.get('http://127.0.0.1:3307/checkAccount/' + newVal);\r\n *             console.log(res);\r\n *         }\r\n *         // 表示页面初次渲染好之后，就立即触发当前的 watch 监听器。\r\n *         immediate: true,\r\n *         // 表示侦听的是一个对象，如果对象中的属性的属性值发生变化，则被监听到。\r\n *         deep: true\r\n *     }\r\n * }\r\n * 如果只想监听对象中单个属性的变化，则可以按照如下的方式定义 watch 侦听器：\r\n * el: '#app',\r\n * data: {\r\n *     userInfo: {\r\n *         username: 'admin',\r\n *         password: '12345'\r\n *     }\r\n * },\r\n * watch: {\r\n *     'userInfo.username': {\r\n *         handler(newVal) {\r\n *             console.log(newVal);\r\n *         }\r\n *     }\r\n * }\r\n *\r\n * 计算属性？\r\n * 计算属性指的是通过一系列运算之后，最终得到一个属性值。\r\n * 这个动态计算出来的属性值可以被模板结构或 methods 方法使用。示例代码如下：\r\n * const vm = new Vue({\r\n *     el: '#app',\r\n *     data: {\r\n *         r: 0,\r\n *         g: 0,\r\n *         b: 0\r\n *     },\r\n *     computed: {\r\n *         rgb() {\r\n *             return `rgb(${this.r}, ${this.g}, ${this.b})`;\r\n *         }\r\n *     },\r\n *     methods: {\r\n *         show() {\r\n *             console.log(this.rgb);\r\n *         }\r\n *     }\r\n * });\r\n * 特点：\r\n * 1).虽然计算属性在声明的时候被定义为方法，但是计算属性的本质是一个属性。\r\n * 2).计算属性会缓存计算的结果，只有计算属性依赖的数据变化时，才会重新进行运算。\r\n *\r\n * vue-cli脚手架？\r\n * 什么是单页面程序？\r\n * 单页面应用程序（英文名：Single Page Application）简称 SPA，顾名思义，\r\n * 指的是一个 Web 网站中只有唯一的一个 HTML 页面，所有的功能与交互都在这唯一的一个页面内完成。\r\n * 什么是vue-cli脚手架工具？\r\n * vue-cli 是 Vue.js 开发的标准工具。它简化了程序员基于 webpack 创建工程化的 Vue 项目的过程。\r\n * 引用自 vue-cli 官网上的一句话：程序员可以专注在撰写应用上，而不必花好几天去纠结 webpack 配置的问题。\r\n * 中文官网：https://cli.vuejs.org/zh/\r\n * vue-cli安装：\r\n * # 查看node版本\r\n * C:\\Users\\Administrator>node -v\r\n * v16.20.1\r\n * # 查看npm版本\r\n * C:\\Users\\Administrator>npm -v\r\n * 9.7.2\r\n * # 查看cnpm版本\r\n * C:\\Users\\Administrator>cnpm -v\r\n * cnpm@9.2.0 (C:\\Users\\Administrator\\AppData\\Roaming\\npm\\node_modules\\cnpm\\lib\\parse_argv.js)\r\n * npm@9.7.2 (C:\\Users\\Administrator\\AppData\\Roaming\\npm\\node_modules\\cnpm\\node_modules\\npm\\index.js)\r\n * node@16.20.1 (C:\\Program Files\\nodejs\\node.exe)\r\n * npminstall@7.9.0 (C:\\Users\\Administrator\\AppData\\Roaming\\npm\\node_modules\\cnpm\\node_modules\\npminstall\\lib\\index.js)\r\n * prefix=C:\\Program Files\\nodejs\r\n * registry=https://registry.npmmirror.com\r\n * # 升级cnpm版本\r\n * C:\\Users\\Administrator>npm install cnpm -g\r\n * # 升级npm版本（不建议：指定版本）\r\n * C:\\Users\\Administrator>cnpm install npm@9.7.2 -g\r\n * # 查看npm详情\r\n * C:\\Users\\Administrator>npm config list\r\n * # 查看nvm版本\r\n * C:\\Users\\Administrator>nvm -v\r\n * # 查看node当前使用版本\r\n * C:\\Users\\Administrator>nvm list\r\n * # 查看node可以安装版本\r\n * C:\\Users\\Administrator>nvm list available\r\n * # 安装vue版本\r\n * C:\\Users\\Administrator>cnpm install vue\r\n * # 安装vue-cli脚手架2版本（基于webpack3打造）\r\n * C:\\Users\\Administrator>cnpm install --global vue-cli\r\n * C:\\Users\\Administrator>vue init webpack vue2-cli2-demo2\r\n * # 安装vue-cli脚手架3版本（基于webpack4打造）\r\n * C:\\Users\\Administrator>cnpm install --global @vue/cli\r\n * C:\\Users\\Administrator>vue create vue2-cli3-demo4\r\n * # 查看vue-cli脚手架版本\r\n * C:\\Users\\Administrator>vue -V\r\n * @vue/cli 5.0.8\r\n * # 区别：\r\n * 1、vue-cli2是基于webpack3打造的。\r\n * 2、vue-cli3是基于webpack4打造的。\r\n * 2、vue-cli3的仓库github由原有独立的仓库github迁移到了vue项目下。\r\n * 2、vue-cli3的项目架构完全抛弃了vue-cli2的原有架构，vue-cli3的设计更加抽象和简洁。\r\n * 2、vue-cli3提供了vue ui命令，提供了可视化配置，更加人性化。\r\n * 2、vue-cli3也学习了rollup的零配置思路，所以项目初始化后，没有了以前熟悉的build目录，也就没有了webpack.base.config.js、webpack.dev.config.js、webpack.prod.config.js等配置文件。\r\n * 2、vue-cli3的设计原则是0配置，移除的配置文件根目录下的build和config等目录。\r\n * 2、vue-cli3移除了static文件夹，新增public文件夹，并且将index.html文件移动到了public文件夹中。\r\n * # 安装：\r\n * C:\\Users\\Administrator>vue create vue2-cli3-demo4\r\n * # 选择：\r\n * Vue CLI v5.0.8\r\n * ? Please pick a preset:\r\n *   Default ([Vue 3] babel, eslint)\r\n *   Default ([Vue 2] babel, eslint)\r\n * > Manually select features\r\n * # 选择：\r\n * Vue CLI v5.0.8\r\n * ? Please pick a preset: Manually select features\r\n * ? Check the features needed for your project: (Press <space> to select, <a> to toggle all, <i> to invert selection, and <enter> to proceed)\r\n * >(1) Babel\r\n * >( ) TypeScript\r\n * >( ) Progressive Web App (PWA) Support\r\n * >(4) Router\r\n * >(5) Vuex\r\n * >(6) CSS Pre-processors\r\n * >(7) Linter / Formatter\r\n * >( ) Unit Testing\r\n * >( ) E2E Testing\r\n * # 选择：\r\n * Vue CLI v5.0.8\r\n * ? Please pick a preset: Manually select features\r\n * ? Check the features needed for your project: Babel, Router, Vuex, CSS Pre-processors, Linter\r\n * ? Choose a version of Vue.js that you want to start the project with (Use arrow keys)\r\n *   3.x\r\n * > 2.x\r\n * # 选择：\r\n * ? Please pick a preset: Manually select features\r\n * ? Check the features needed for your project: Babel, Router, Vuex, CSS Pre-processors, Linter\r\n * ? Choose a version of Vue.js that you want to start the project with 2.x\r\n * ? Use class-style componet syntax? ( )\r\n * ? Use Babel alongside TypeScript? ( )\r\n * ? Use history mode for router? (Requires proper server setup for index fallback in production) (Y)\r\n * ? Pick a CSS pre-processors: (Less)\r\n *     Sass/SCSS (with dart-sass)\r\n *   > Less\r\n *     Stylus\r\n * ? Pick a linter / formatter config: (ESLint with error prevention only)\r\n *   > ESLint with error prevention only\r\n *     ESLint + Airbnb config\r\n *     ESLint + Standard config\r\n *     ESLint + Prettier\r\n * ? Pick additional lint features: (Lint on save)\r\n *   > Lint on save\r\n *     Lint and fix on commit\r\n * ? Where do you prefer placing config for Babel, ESLint, etc.? (In dedicated config files)\r\n *   > In dedicated config files\r\n *     In package.json\r\n * ? Save this as a preset for future project? (Y)\r\n * ? Save preset as: (Enter)\r\n * # 操作：\r\n * $ cd app\r\n * $ npm install\r\n * $ npm run build\r\n * $ npm run serve\r\n * # 目录结构：\r\n * # dist/\r\n * # node_modules/\r\n * # public/\r\n * # ....favicon.ico\r\n * # ....index.html\r\n * # src/\r\n * # ....assets/\r\n * # ........logo.png\r\n * # ....components/\r\n * # ........HelloWorld.vue\r\n * # ....router/\r\n * # ........index.js\r\n * # ....store/\r\n * # ........index.js\r\n * # ....views/\r\n * # ........AboutView.vue\r\n * # ........HomeView.vue\r\n * # ....App.vue\r\n * # ....main.js\r\n * # .browserslistrc\r\n * # .eslintrc.js\r\n * # .gitignore\r\n * # babel.config.js\r\n * # jsconfig.json\r\n * # package.json\r\n * # package-lock.json\r\n * # README.md\r\n * # vue.config.js\r\n * # 模板结构：\r\n * 在工程化的项目中，vue要做的事情非常简单，通过 main.js 把 App.vue 渲染到 index.html 的指定区域中。\r\n * 其中：\r\n * 1).App.vue    用来编写待渲染的模板结构。\r\n * 2).index.html 中需要预留一个 el 挂载点区域。\r\n * 3).main.js    把App.vue渲染到了index.html所预留的挂载点区域中。\r\n *\r\n * vue组件？\r\n * 组件化开发指的是：根据封装的思想，把页面上可重用的 UI 结构封装为组件，从而方便项目的开发和维护。\r\n * 组件在被封装好之后，彼此之间是相互独立的，不存在任何关系。\r\n * 然而，在使用组件的时候，根据彼此的嵌套关系，便形成了父子关系、或者兄弟关系。\r\n * 【组件关系】\r\n * 1).在 vue2.x 中，父组件向子组件共享数据需要使用【自定义属性】。\r\n * 2).在 vue2.x 中，子组件向父组件共享数据使用【自定义事件】。\r\n * 3).在 vue2.x 中，兄弟组件之间数据共享的方案是【EventBus】。\r\n * vue 是一个支持组件化开发的前端框架。\r\n * vue 规定：组件的后缀名是 .vue。之前接触到的 App.vue 文件本质上就是一个 vue 的组件。\r\n * 每个 .vue 组件都由 3 部分构成，分别是：\r\n * 【组件结构】\r\n * 1).template -> 组件的模板结构。\r\n * 2).script   -> 组件的 JavaScript 行为。\r\n * 3).style    -> 组件的样式。\r\n * 其中，每个组件中必须包含 template 模板结构，而 script 行为和 style 样式是可选的组成部分。\r\n * <template>\r\n *     // 当前组件的 DOM 结构，需要定义到 template 标签的内部\r\n * </template>\r\n * vue 规定：每个组件对应的模板结构，需要定义到 <template> 节点中。\r\n * 注意：template 是 vue 提供的容器标签，只起到包裹性质的作用，它不会被渲染为真正的 DOM 元素。\r\n * 注意：template 中只能包含唯一的根节点。\r\n * <script>\r\n *     // 从今往后，组件相关的 data 数据、methods 方法等等，都需要定义到 export default 所导出的对象中。\r\n * </script>\r\n * vue 规定：开发者可以在 <script> 节点中封装组件的 JavaScript 业务逻辑。\r\n * vue 规定：.vue 组件中的 data 必须是一个函数，不能直接指向一个数据对象。否则，会导致多个组件实例共用同一份数据的问题，\r\n * <style>\r\n *     h4 {\r\n *         font-weight: normal;\r\n *     }\r\n * </style>\r\n * vue 规定：组件内的 <style> 节点是可选的，开发者可以在 <style> 节点中编写样式美化当前组件的 UI 结构。\r\n * 让 style 中支持 less 语法，在 <style> 标签上添加 lang=\"less\" 属性，即可使用 less 语法编写组件的样式：\r\n * 使用组件的三个步骤：\r\n * 【组件使用】\r\n * 步骤3：使用 <组件名> 以标签形式使用刚才注册的组件。\r\n * 步骤1：使用 import 语法导入需要的组件。\r\n * 步骤2：使用 components 节点注册组件。\r\n * <div class=\"home-container\">\r\n *     <ComponentName></ComponentName>\r\n * </div>\r\n * import ComponentName from '@/component/ComponentName.vue';\r\n * export default {\r\n *     components: {\r\n *         ComponentName\r\n *     }\r\n * }\r\n * 【私有组件】\r\n * 通过 components 属性，注册的是私有子组件。\r\n * 注册全局组件：在 vue 项目的 main.js 入口文件中，通过 Vue.component() 方法，可以注册全局组件。\r\n * 示例代码如下：\r\n * 【全局组件】\r\n * // 导入需要全局注册的组件\r\n * import ComponentName from '@/component/ComponentName.vue';\r\n * // 参数一：字符串格式，表示组件的注册名称\r\n * // 参数二：需要被全局注册的那个组件\r\n * Vue.component('ComponentName', ComponentName);\r\n * 组件的 props：props 是组件的自定义属性，在封装通用组件的时候，合理地使用 props 可以极大的提高组件的复用性。\r\n * 它的语法格式如下：\r\n * export default {\r\n *     // 组件的自定义属性\r\n *     props: [\r\n *         '自定义属性A',\r\n *         '自定义属性B',\r\n *         '自定义属性N'\r\n *     ],\r\n *     // 组件的私有数据\r\n *     data() {\r\n *         return {\r\n *             what: ''\r\n *         }\r\n *     }\r\n * }\r\n * vue 规定：组件中封装的自定义属性是只读的，程序员不能直接修改 props 的值。否则会直接报错：\r\n * 要想修改 props 的值，可以把 props 的值转存到 data 中，因为 data 中的数据都是可读可写的。\r\n * 组件的 props 的 default 默认值：在声明自定义属性时，可以通过 default 来定义属性的默认值。\r\n * 示例代码如下：\r\n * export default {\r\n *     props: {\r\n *         init: {\r\n *             // 使用 default 属性定义属性的默认值\r\n *             default: 0\r\n *         }\r\n *     }\r\n * }\r\n * 组件的 props 的 type 值类型：在声明自定义属性时，可以通过 type 来定义属性的值类型。\r\n * 示例代码如下：\r\n * export default {\r\n *     props: {\r\n *         init: {\r\n *             // 使用 default 属性定义属性的默认值\r\n *             default: 0\r\n *             // 使用 type 属性定义属性的值类型，如果传递过来的值不符合此类型，则会在终端报错\r\n *             type: Number\r\n *         }\r\n *     }\r\n * }\r\n * 组件的 props 的 required 必填项：在声明自定义属性时，可以通过 required 选项，将属性设置为必填项，强制用户必须传递属性的值。\r\n * 示例代码如下：\r\n * export default {\r\n *     props: {\r\n *         init: {\r\n *             // 使用 default 属性定义属性的默认值\r\n *             default: 0\r\n *             // 使用 required 属性定义属性是必填值\r\n *             required: true\r\n *         }\r\n *     }\r\n * }\r\n * 默认情况下，写在 .vue 组件中的样式会全局生效，因此很容易造成多个组件之间的样式冲突问题。\r\n * 导致组件之间样式冲突的根本原因是：\r\n * 1).单页面应用程序中，所有组件的 DOM 结构，都是基于唯一的 index.html 页面进行呈现的。\r\n * 2).每个组件中的样式，都会影响整个 index.html 页面中的 DOM 元素。\r\n * 思考：如何解决组件样式冲突的问题？\r\n * 为每个组件分配唯一的自定义属性，在编写组件样式时，通过属性选择器来控制样式的作用域，示例代码如下：\r\n * <style>\r\n *     // 通过中括号【属性选择器】，来防止组件之间的【样式冲突问题】，因为每个组件分配的自定义属性是【唯一的】。\r\n *     .home-container[data-v-1001] {\r\n *         color: black;\r\n *     }\r\n * </style>\r\n * style 节点的 scoped 属性：\r\n * 为了提高开发效率和开发体验，vue 为 style 节点提供了 scoped 属性，从而防止组件之间的样式冲突问题：\r\n * // style 节点的 scoped 属性，用来自动为每个组件分配唯一的【自定义属性】，并且自动为当前组件的 DOM 标签和 style 样式应用这个自定义属性\r\n * <style scoped>\r\n *     .home-container {\r\n *         color: black;\r\n *     }\r\n * </style>\r\n * /deep/ 样式穿透\r\n * 如果给当前组件的 style 节点添加了 scoped 属性，则当前组件的样式对其子组件是不生效的。\r\n * 如果想让某些样式对子组件生效，可以使用 /deep/ 深度选择器。\r\n * <style lang=\"less\" scoped>\r\n *     // 不加 /deep/ 时，生成的选择器格式为 .home-container[data-v-1001de]\r\n *     .home-container {\r\n *         color: black;\r\n *     }\r\n *     // 加上 /deep/ 时，生成的选择器格式为 [data-v-1001de] .home-container\r\n *     /deep/ .home-container {\r\n *         color: black;\r\n *     }\r\n * </style>\r\n * 【组件之间的关系】\r\n * 在项目开发中，组件之间的最常见的关系分为如下两种：\r\n * 1).父子关系。\r\n * 2).兄弟关系。\r\n * 父子组件之间的数据共享又分为：\r\n * 1).父 -> 子共享数据。\r\n * 2).子 -> 父共享数据。\r\n * 父组件向子组件共享数据需要使用自定义属性。\r\n * 示例代码如下：\r\n * // Parent.vue\r\n * <Children v-bind:msg=\"message\" v-bind:user=\"userInfo\"></Children>\r\n * data() {\r\n *     return {\r\n *         message: 'Hello World',\r\n *         userInfo: {\r\n *             name: 'King',\r\n *             age: 28\r\n *         }\r\n *     }\r\n * }\r\n * // Children.vue\r\n * <template>\r\n *     <div>\r\n *         <span>父组件消息：{{ msg }}，对象：{{ user }}</span>\r\n *     </div>\r\n * </template>\r\n * <script>\r\n *     export default {\r\n *         props: [\r\n *             'msg',\r\n *             'user'\r\n *         ]\r\n *     }\r\n * </script>\r\n * 子组件向父组件共享数据使用自定义事件。\r\n * 示例代码如下：\r\n * // Children.vue\r\n * <template>\r\n *     <div>\r\n *         <span>子组件统计：{{ count }}</span>\r\n *     </div>\r\n * </template>\r\n * <script>\r\n *     export default {\r\n *         data() {\r\n *             return {\r\n *                 count: 0\r\n *             }\r\n *         },\r\n *         methods: {\r\n *             addition() {\r\n *                 this.count += 1;\r\n *                 this.$emit('share', this.count);\r\n *             }\r\n *         }\r\n *     }\r\n * </script>\r\n * // Parent.vue\r\n * <Children v-on:share=\"getChildrenCount()\"></Children>\r\n * export default {\r\n *     data() {\r\n *         return {\r\n *             countX: 0\r\n *         }\r\n *     },\r\n *     methods: {\r\n *         getChildrenCount(val) {\r\n *             this.countX = val;\r\n *         }\r\n *     }\r\n * }\r\n * 兄弟组件之间的数据共享：在 vue2.x 中，兄弟组件之间数据共享的方案是 EventBus。\r\n * 示例代码如下：\r\n * // eventBus.js\r\n * import Vue from 'vue';\r\n * export default new Vue();\r\n * // LeftView.vue\r\n * <button type=\"button\" v-on:click=\"sendMessage()\">发送</button>\r\n * import bus from '@/eventBus.js';\r\n * export default {\r\n *     data() {\r\n *         return {\r\n *             message: 'Hello World'\r\n *         }\r\n *     },\r\n *     methods: {\r\n *         sendMessage() {\r\n *             bus.$emit('share', this.message);\r\n *         }\r\n *     }\r\n * }\r\n * // RightView.vue\r\n * <span>{{ msg }}</span>\r\n * import bus from '@/eventBus.js';\r\n * export default {\r\n *     data() {\r\n *         return {\r\n *             msg: ''\r\n *         }\r\n *     },\r\n *     bus.$on('share', val => {\r\n *         this.msg = val;\r\n *     });\r\n * }\r\n * 【EventBus】的使用步骤：\r\n * 1).创建 eventBus.js 模块，并且向外共享一个 Vue 的实例对象。\r\n * 2).在数据发送方，调用 bus.$emit('事件名称', 事件数据主体) 方法，触发自定义事件。\r\n * 3).在数据接收方，调用 bus.$on('事件名称', 事件处理函数) 方法，注册一个自定义事件。\r\n *\r\n * ref 引用和 $refs 对象？\r\n * 什么是ref引用？\r\n * ref 用来辅助开发者在不依赖于 jQuery 的情况下，获取 DOM 元素或组件的引用。\r\n * 每个 vue 的组件实例上，都包含一个 $refs 对象，里面存储着对应的 DOM 元素或组件的引用。\r\n * 默认情况下，组件的 $refs 指向一个空对象。\r\n * 使用 ref 引用 DOM 元素：如果想要使用 ref 引用页面上的 DOM 元素，示例代码如下：\r\n * // 使用 ref 属性，为对应的 DOM 元素添加引用名称\r\n * <h3 ref=\"myH3\">使用ref引用</h3>\r\n * <button v-on:click=\"getRefsObj()\">获取$refs对象</button>\r\n * export default {\r\n *     method: {\r\n *         getRefsObj() {\r\n *             // 通过 vue 实例对象 this 获取引用对象 $refs\r\n *             console.log(this.$refs);\r\n *             // 操作DOM元素，把文本颜色设置为黄色\r\n *             this.$refs.myH3.style.color = 'yellow';\r\n *         }\r\n *     }\r\n * }\r\n * 使用 ref 引用组件实例：如果想要使用 ref 引用页面上的组件实例，示例代码如下：\r\n * 让文本框自动获得焦点：\r\n * 当文本框展示出来之后，如果希望它立即获得焦点，则可以为其添加 ref 引用，并调用原生 DOM 对象的 .focus() 方法即可。\r\n * 示例代码如下：\r\n * 账号：<input type=\"text\" name=\"username\" id=\"username\" v-model=\"username\" ref=\"iptUser\">\r\n * 切换：<input type=\"text\" name=\"visible\" id=\"visible\" v-if=\"iptVisible\" ref=\"iptVsb\">\r\n * export default {\r\n *   data() {\r\n *     return {\r\n *       // 控制文本框和按钮所需切换\r\n *       iptVisible: false\r\n *     };\r\n *   },\r\n *   computed: {},\r\n *   filters: {},\r\n *   watch: {},\r\n *   methods: {\r\n *     showIptVisible() {\r\n *       this.iptVisible = true;\r\n *       this.$refs.iptUser.focus();\r\n *     }\r\n *   }\r\n * }\r\n * 组件的 $nextTick(cb) 方法，会把 cb 回调推迟到下一个 DOM 更新周期之后执行。\r\n * 通俗的理解是：等组件的 DOM 更新完成之后，再执行 cb 回调函数。从而能保证 cb 回调函数可以操作到最新的 DOM 元素。\r\n * 示例代码如下：\r\n * 账号：<input type=\"text\" name=\"username\" id=\"username\" v-model=\"username\" ref=\"iptUser\">\r\n * 切换：<input type=\"text\" name=\"visible\" id=\"visible\" v-if=\"iptVisible\" ref=\"iptVsb\">\r\n * export default {\r\n *   data() {\r\n *     return {\r\n *       // 控制文本框和按钮所需切换\r\n *       iptVisible: false\r\n *     };\r\n *   },\r\n *   computed: {},\r\n *   filters: {},\r\n *   watch: {},\r\n *   methods: {\r\n *     showIptVisible() {\r\n *       this.iptVisible = true;\r\n *       // 加载之前就已经创建的DOM元素可以被引用生效。\r\n *       // this.$refs.iptUser.focus();\r\n *       // 点击改变之后的DOM元素需要DOM更新完成之后，再执行Callback回调函数可以操作到最新的DOM元素生效。\r\n *       this.$nextTick(() => {\r\n *         this.$refs.iptVsb.focus();\r\n *       });\r\n *     }\r\n *   }\r\n * }\r\n *\r\n * 三、生命周期章节：\r\n * 生命周期（Life Cycle）是指一个组件从创建 -> 运行 -> 销毁的整个阶段，强调的是一个时间段。\r\n * 生命周期函数：是由 vue 框架提供的内置函数，会伴随着组件的生命周期，自动按次序执行。\r\n *     注意：生命周期强调的是【时间段】，\r\n *     注意：生命周期函数强调的是【时间点】。\r\n * 组件生命周期的第一个阶段？\r\n *     组件创建阶段：\r\n *     new Vue() -> beforeCreate() -> created() -> beforeMount() -> mounted\r\n * 组件生命周期的第二个阶段？\r\n *     组件运行阶段：\r\n *     beforeUpdate() -> updated()\r\n * 组件生命周期的第三个阶段？\r\n *     组件销毁阶段：\r\n *     beforeDestroy() -> destroy()\r\n * 生命周期图示\r\n * 可以参考 vue 官方文档给出的【生命周期图示】，进一步理解组件生命周期执行的过程：\r\n *     https://cn.vuejs.org/v2/guide/instance.html#\r\n * 什么是生命周期钩子函数？\r\n * 01.beforeCreate:  在实例初始化之后、数据观测 (data observer) 和 event/watcher 事件配置之前被调用。在这个阶段，组件的选项对象已经合并，但是实例的属性和方法尚未初始化。\r\n * 02.created:       在实例创建完成后被立即调用。在此阶段，组件实例已经完成以下的配置：数据观测 (data observer)，属性和方法的设置，计算属性和观察者等。然而，挂载阶段还未开始，$el 属性尚不可用。\r\n * 03.beforeMount:   在挂载开始之前被调用，相关的 render 函数首次被调用。在此阶段，模板编译已完成，但尚未将渲染结果挂载到DOM中。\r\n * 04.mounted:       在实例挂载到 DOM 后被调用。此时，组件已经在 DOM 中渲染，并且可以进行 DOM 操作。通常在这里发起异步请求、操作 DOM 或与第三方库进行交互。\r\n * 05.beforeUpdate:  在响应式数据更新时，虚拟 DOM 重新渲染和打补丁之前被调用。可以在此时执行一些更新之前的操作。\r\n * 06.updated:       在虚拟 DOM 重新渲染和打补丁后被调用。此时，组件已经更新完成，并且可以执行 DOM 操作。注意避免无限循环更新，因为在此钩子中更新数据可能会导致再次触发更新。\r\n * 07.beforeDestroy: 在实例销毁之前被调用。这是组件销毁前的最后一个机会，可以进行一些清理工作，如清除定时器、取消订阅等。\r\n * 08.destroyed:     在实例被销毁后调用。此时，组件已经被销毁，事件监听器和子组件也都被移除。\r\n * 09.activated:     在实例被激活的时候使用，用于重复激活一个组件实例的时候。\r\n * 10.deactivated:   在实例没有被激活的时候。\r\n * 11.errorCaptured: 当捕获到一个来自后代组件的错误时被调用。\r\n * 样例：\r\n * <script>\r\n * export default {\r\n *   // 11.创建之前的钩子（在此生命周期函数执行的时候，Data和Methods中的数据都还没有初始化。）\r\n *   beforeCreate() {\r\n *     console.log(`生命周期钩子之创建之前的钩子！`);\r\n *   },\r\n *   // 11.创建时候的钩子（在此生命周期函数中，Data和Methods中的数据都已经被初始化，如果调用Methods中的方法，或者操作Data中的数据，最早只能在created()函数中操作。）\r\n *   created() {\r\n *     console.log(`生命周期钩子之创建时候的钩子！SettingsView.vue 组件被创建了呀！`);\r\n *   },\r\n *   // 12.挂载之前的钩子（在此生命周期函数执行的时候，模板已经在内存中编译，但是尚未挂载到页面中，此时页面还是旧页面。）\r\n *   beforeMount() {\r\n *     console.log(`生命周期钩子之挂载之前的钩子！`);\r\n *   },\r\n *   // 12.挂载时候的钩子（此时页面和内存中都是新的数据，这个钩子函数是最早可以操作DOM节点的方法。）\r\n *   mounted() {\r\n *     console.log(`生命周期钩子之挂载时候的钩子！SettingsView.vue 组件被挂载了呀！`);\r\n *   },\r\n *   // 13.更新之前的钩子（此时页面中显示的数据还是旧数据，但是Data中的数据是最新的，并且页面并未和最新的数据同步。）\r\n *   beforeUpdate() {\r\n *     console.log(`生命周期钩子之更新之前的钩子！`);\r\n *   },\r\n *   // 13.更新时候的钩子（此时页面显示数据和最新的Data数据同步。）\r\n *   updated() {\r\n *     console.log(`生命周期钩子之更新时候的钩子！SettingsView.vue 组件被更新了呀！`);\r\n *   },\r\n *   // 14.激活时候的钩子（实例被激活的时候使用，用于重复激活一个组件实例的时候。）\r\n *   activated() {\r\n *     console.log(`生命周期钩子之重新激活组件实例的钩子！`);\r\n *   },\r\n *   // 14.激活之前的钩子（组件实例没有被激活的时候。）\r\n *   deactivated() {\r\n *     console.log(`生命周期钩子之重新激活之前组件实例的钩子！SettingsView.vue 组件未被激活呀！`);\r\n *   },\r\n *   // 15.销毁之前的钩子（当执行该生命周期函数的时候，实例本身所有Data，所有Methods，以及过滤器等等都处于可用状态，并没有真正执行销毁。）\r\n *   beforeDestroy() {\r\n *     console.log(`生命周期钩子之销毁之前的钩子！`);\r\n *   },\r\n *   // 15.销毁时候的钩子（此时组件以及被完全销毁，实例中所有的数据、方法、属性、过滤器等等都已经不可用。）\r\n *   destroyed() {\r\n *     console.log(`生命周期钩子之销毁时候的钩子！SettingsView.vue 组件被销毁了呀！`);\r\n *   },\r\n *   // 16.错误调用的钩子（当捕获到一个来自后代组件的错误时被调用。）\r\n *   errorCaptured(err, vm, info) {\r\n *     console.log(`生命周期钩子之错误调用的钩子！`);\r\n *   },\r\n * }\r\n * </script>\r\n * 四、动态组件章节：\r\n * 什么是动态组件？\r\n *     动态组件指的是，动态切换组件的显示与隐藏。\r\n * 第01种：<component>\r\n *     vue 内置的<component>组件，专门用来实现动态组件的渲染。\r\n *     样例：\r\n *     // 1.当前需要渲染的组件名称\r\n *     data() { return { componentName: 'Left' } }\r\n *     // 2.通过 is 属性，动态指定需要渲染的组件。\r\n *     <component v-bind:is=\"componentName\"></component>\r\n *     // 3.点击按钮，动态切换组件的名称，实现动态组件的显示与隐藏。\r\n *     <button v-on:click=\" componentName = 'Left' \">展示 Left 组件</component>\r\n *     <button v-on:click=\" componentName = 'Right' \">展示 Right 组件</component>\r\n * 第02种：<component> + <keep-alive>\r\n *     vue 内置的<component>组件，专门用来实现动态组件的渲染。\r\n *     默认情况下，切换动态组件时【无法保持组件的状态】，此时可以使用 vue 内置的<keep-alive>组件，专门保持动态组件的状态。\r\n *     当组件【被缓存】时，会自动触发组件的【deactivated】生命周期函数。\r\n *     当组件【被激活】时，会自动触发组件的【activated】生命周期函数。\r\n *     样例：\r\n *     // 1.当前需要渲染的组件名称\r\n *     data()        { return { componentName: 'Left' } },\r\n *     created()     { console.log(`Left组件被创建了`) },\r\n *     destroyed()   { console.log(`Left组件被销毁了`) },\r\n *     activated()   { console.log(`Left组件被激活了`) },\r\n *     deactivated() { console.log(`Left组件被缓存了`) }\r\n *     // 2.通过 is 属性，动态指定需要渲染的组件。\r\n *     <keep-alive>\r\n *         <component v-bind:is=\"componentName\"></component>\r\n *     </keep-alive>\r\n *     // 3.点击按钮，动态切换组件的名称，实现动态组件的显示与隐藏。\r\n *     <button v-on:click=\" componentName = 'Left' \">展示 Left 组件</component>\r\n *     <button v-on:click=\" componentName = 'Right' \">展示 Right 组件</component>\r\n *     属性：\r\n *     <keep-alive include=\"\">\r\n *         <component v-bind:is=\"componentName\"></component>\r\n *     </keep-alive>\r\n *     include 属性用来指定，只有名称匹配的组件才会被缓存。多个组件名称之间使用英文逗号（,）分隔。\r\n *     exclude 属性用来指定，只有指定的组件被排队，即不会被缓存，其余组件则会被缓存。\r\n * 五、插槽章节：\r\n * 什么是插槽？\r\n *     插槽（slot）是vue为组件的封装者提供的能力。允许开发者在封装组件时，把不确定的、希望由用户指定的部分定义为插槽。\r\n *     样例：\r\n *     // 1.定义引用组件的模板组件\r\n *     <MySlot>\r\n *         <!-- slot 具名插槽的简写形式 -->\r\n *         <template #three>\r\n *             <span>设置中心</span>\r\n *         </template>\r\n *         <!-- slot 具名插槽 -->\r\n *         <template v-slot:one>\r\n *             <span>关于我们</span>\r\n *         </template>\r\n *         <!-- slot 具名插槽 -->\r\n *         <template v-slot:two>\r\n *             <span>退出登录</span>\r\n *         </template>\r\n *     </MySlot>\r\n *     // 2.定义组件插槽组件MySlot\r\n *     <a href=\"#\"><slot name=\"three\"></slot></a>\r\n *     <button type=\"button\"><slot name=\"one\"></slot></button>\r\n *     <button type=\"button\"><slot name=\"two\"></slot></button>\r\n *     面试题：\r\n *     问题：vue slot和router-view有啥区别？\r\n *     回答：\r\n *     slot        是一个抽象元素，有点类似 template，设计思想有点类似面向对象中的多态，用于组件中某一项需要单独定义，那么就应该使用 slot。核心概念是：组件当中某一项，可能是一个元素，也可能只是一个文本。\r\n *     router-view 是一个 functional 组件，它是一个组件，一个组件，一个组件，重要的事情说三遍，用于渲染路径匹配到的视图组件。核心概念是：路径匹配和渲染视图组件。\r\n *     slot        是用于父子组件内容分发的，\r\n *     router-view 是做路由导航的，\r\n * 六、自定义指令章节：\r\n * 什么是自定义指令？\r\n * 官方提供了常用的vue指令，除此之外，vue还允许开发者自定义指令。\r\n * vue中的自定义指令分为两类，分别是：\r\n *     全局自定义指令。\r\n *     私有自定义指令。\r\n * 1.定义私有自定义指令\r\n *     export default {\r\n *       directives: {\r\n *         color: {\r\n *           bind(el) {\r\n *             el.style.color = 'red';\r\n *           }\r\n *         }\r\n *       }\r\n *     }\r\n *     // 使用自定义指令\r\n *     <button type=\"button\" v-color>自定义指令</button>\r\n *     // 1.定义私有自定义指令\r\n *     export default {\r\n *     directives: {\r\n *       colorOne: {\r\n *         bind(el) {\r\n *           el.style.color = this.color;\r\n *         }\r\n *       },\r\n *       colorTwo: {\r\n *         // 当指令第一次被绑定到DOM元素时被调用\r\n *         bind(el, binding) {\r\n *           el.style.color = binding.value;\r\n *         },\r\n *         // 每次DOM元素更新时被调用\r\n *         update(el, binding) {\r\n *           el.style.color = binding.value;\r\n *         }\r\n *       },\r\n *       // 在insert和update时，会触发相同的业务逻辑\r\n *       colorThree(el, binding) {\r\n *         el.style.color = binding.value;\r\n *       }\r\n *     }\r\n *     // 使用自定义指令\r\n *     <button type=\"button\" v-color>自定义指令</button>\r\n * 2.定义全局自定义指令\r\n *     Vue.directive('color', function(el, binding) { el.style.color = binding.value });\r\n *     // 使用自定义指令\r\n *     <button type=\"button\" v-color>自定义指令</button>\r\n * 七、路由章节：\r\n * 什么是路由？\r\n *     路由（英文：router）就是对应关系。\r\n *     SPA 指的是一个 web 网站只有唯一的一个 HTML 页面，所有组件的展示与切换都在这唯一的一个页面内完成。\r\n *     此时，不同组件之间的切换需要通过前端路由来实现。\r\n *     结论：在 SPA 项目中，不同功能之间的切换，要依赖于前端路由来完成。\r\n * 什么是前端路由？\r\n *     通俗易懂的概念：Hash 地址与组件之间的对应关系。\r\n * 前端路由的工作方式？\r\n *     1).用户点击了页面上的路由链接。\r\n *     2).导致了 URL 地址栏中的 Hash 值发生了变化。\r\n *     3).前端路由监听了到 Hash 地址的变化。\r\n *     4).前端路由把当前 Hash 地址对应的组件渲染都浏览器中。\r\n *     【后者】结论：前端路由指的是 Hash 地址与组件之间的对应关系。\r\n *     // 通过 component 标签结合 componentName 动态渲染组件。\r\n *     <component v-bind:is=\"componentName\"></component>\r\n *     【前生】提示：\r\n *     // 原生锚点（#）方式为 a 链接添加对应的 hash 值。\r\n *     <a href=\"#/home\">公司首页</a>\r\n *     <a href=\"#/movie\">电影界面</a>\r\n *     <a href=\"#/about\">关于我们</a>\r\n * 实现简易的前端路由？\r\n * 步骤一：通过 <component> 标签，结合 compName 动态渲染组件。示例代码如下：\r\n *     // 通过 is 属性，指定要展示的组件的名称\r\n *     <component v-bind:is=\"compName\"></component>\r\n *     export default {\r\n *         name: '#app',\r\n *         data() {\r\n *             return {\r\n *                 compName: 'Home'\r\n *             }\r\n *         }\r\n *     }\r\n * 步骤二：在 App.vue 组件中，为 <a> 链接添加对应的 hash 值：\r\n *     <a href=\"#/home\">公司首页</a>\r\n *     <a href=\"#/movie\">电影界面</a>\r\n *     <a href=\"#/about\">关于我们</a>\r\n * 步骤三：在 created 生命周期函数中，监听浏览器地址栏中 hash 地址的变化，动态切换要展示的组件的名称：\r\n *     // 在生命周期函数 created() 中监听浏览器地址中 hash 地址的变化，动态切换要展示的组件的名称。\r\n *     created: function () {\r\n *       window.onhashchange = () => {\r\n *         console.log(`通过生命周期函数created()监听到了location对象的哈希属性hash地址的变化`, location.hash);\r\n *         switch (location.hash) {\r\n *           case '#/home':\r\n *             this.compName = 'Home';\r\n *             break;\r\n *           case '#/movie':\r\n *             this.compName = 'Movie';\r\n *             break;\r\n *           case '#/about':\r\n *             this.compName = 'About';\r\n *             break;\r\n *           default:\r\n *             break;\r\n *         }\r\n *       }\r\n *     }\r\n * 什么是 vue-router 路由？\r\n * vue-router 是 vue.js 官方给出的路由解决方案。它只能结合 vue 项目进行使用，能够轻松的管理 SPA 项目中组件的切换。\r\n * vue-router 的官方文档地址：https://router.vuejs.org/zh/\r\n * vue-router 路由安装和配置的步骤？\r\n *     1).安装 vue-router 包。\r\n *     2).创建路由模块。\r\n *     3).导入并挂载路由模块。\r\n *     4).声明路由链接和占位符。\r\n * 步骤一：在项目中安装 vue-router：在 vue2 项目中，安装 vue-router 的命令如下：\r\n *     // 00.下载路由依赖包 vue-router\r\n *     # npm install vue-router@3.5.2 -S\r\n * 步骤二：创建路由模板：在 src 源代码目录下，新建 router/index.js 路由模块，并且初始化如下的代码：\r\n *     // 01.导入 Vue 和 VueRouter 依赖包\r\n *     import Vue from 'vue';\r\n *     import VueRouter from 'vue-router';\r\n *     // 02.调用 Vue.use() 函数，把 VueRouter 安装为 Vue 的插件\r\n *     Vue.use(VueRouter);\r\n *     // 03.创建路由的实例对象\r\n *     const router = new VueRouter();\r\n *     // 04.向外共享路由的实例对象\r\n *     export default router;\r\n * 步骤三：导入并且挂载路由模块：在 src/main.js 入口文件中，导入并挂载路由模块。示例代码如下：\r\n *     // 05.导入自定义路径模块\r\n *     import router from '@/router/index.js';\r\n *     // 06.挂载路由模块\r\n *     new Vue(\r\n *         render: h => h(app),\r\n *         router: router\r\n *     ).$mount('#app');\r\n * 步骤四：声明路由链接和占位符，在 src/App.vue 组件中，使用 vue-router 提供的 <router-link> 和 <router-view> 声明路由链接和占位符：\r\n *     // 07.定义路由的链接\r\n *     <router-link to=\"/home\">公司首页</router-link>\r\n *     <router-link to=\"/movie\">电影专区</router-link>\r\n *     <router-link to=\"/about\">关于我们</router-link>\r\n *     // 07.定义路由的点位符\r\n *     <router-view></router-view>\r\n * 步骤五：声明路由的匹配规则：在 src/router/index.js 路由模块中，通过 routes 数组声明路由的匹配规则。示例代码如下：\r\n *     // 03.创建路由的实例对象\r\n *     const router = new VueRouter(\r\n *         // 08.在routes数组中，声明路由的匹配规则\r\n *         routes: [\r\n *             {path: '/home',  component: HomeView},\r\n *             {path: '/movie', component: MovieView},\r\n *             {path: '/about', component: AboutView}\r\n *         ]\r\n *     );\r\n *     // 03.配置全局前置守卫（全局前置监听器）\r\n *     router.beforeEach(function (to, from, next) {\r\n *         next();\r\n *     });\r\n * vue-router 的常见用法？\r\n * 1).路由重定向：\r\n * 路由重定向指的是：用户在访问地址 A 的时候，强制用户跳转到地址 C ，从而展示特定的组件页面。\r\n * 通过路由规则的 redirect 属性，指定一个新的路由地址，可以很方便地设置路由的重定向：\r\n *     const router = new VueRouter({\r\n *         // 08.在routes数组中，声明路由的匹配规则\r\n *         routes: [\r\n *             // 08.01.路由重定向，当访问 / 的时候，通过 redirect 属性跳转到 /home 对应的路由规则\r\n *             {path: '/', redirect: '/home'},\r\n *             {path: '/home', component: HomeView}\r\n *             {path: '/movie', component: MovieView},\r\n *             {path: '/about', component: AboutView}\r\n *         ]\r\n *     });\r\n *     <!-- 第07步：定义路由的【链接】router-link -->\r\n *     <router-link to=\"/home\">公司首页</router-link>\r\n *     <router-link to=\"/movie\">电影专区</router-link>\r\n *     <router-link to=\"/about\">关于我们</router-link>\r\n *     <!-- 第07步：定义路由的【占位符】router-view -->\r\n *     <router-view></router-view>\r\n * 2).嵌套路由：\r\n * 通过路由实现组件的嵌套展示，叫做嵌套路由。\r\n * 点击父级路由链接显示模板内容：模板内容中又有子级路由链接，点击子级路由链接显示子级模板内容。\r\n *     const router = new VueRouter({\r\n *         // 08.在routes数组中，声明路由的匹配规则\r\n *         routes: [\r\n *             // 08.01.路由重定向，当访问 / 的时候，通过 redirect 属性跳转到 /home 对应的路由规则\r\n *             {path: '/', redirect: '/home'},\r\n *             {path: '/home', component: HomeView}\r\n *             {path: '/movie', component: MovieView},\r\n *             // 08.02.嵌套路由，通过 children 属性，嵌套声明子级路由规则\r\n *             {path: '/about', component: AboutView, children: [\r\n *                 {path: 'tab1', component: TabOne},\r\n *                 {path: 'tab2', component: TabTwo}\r\n *             ]}\r\n *         ]\r\n *     });\r\n *     <!-- 第七步：定义路由的【链接】router-link -->\r\n *     <router-link to=\"/about/tab1\">Table-1</router-link>\r\n *     <router-link to=\"/about/tab2\">Table-2</router-link>\r\n *     <!-- 第七步：定义路由的【占位符】router-view -->\r\n *     <router-view></router-view>\r\n * 3).动态路由\r\n * 动态路由指的是：把 Hash 地址中可变的部分定义为参数项，从而提高路由规则的复用性。\r\n * 在 vue-router 中使用英文的冒号（:）来定义路由的参数项。\r\n * 示例代码如下：\r\n *     const router = new VueRouter({\r\n *         // 08.在routes数组中，声明路由的匹配规则\r\n *         routes: [\r\n *             // 08.01.路由重定向，当访问 / 的时候，通过 redirect 属性跳转到 /home 对应的路由规则\r\n *             {path: '/', redirect: '/home'},\r\n *             {path: '/home', component: HomeView}\r\n *             // 08.03.动态路由，路由中的动态参数以冒号 : 进行声明，冒号后面的是动态参数的名称，以及使用 props 属性接收\r\n *             {path: '/movie/:id', component: MovieView, props: true},\r\n *             // 08.02.嵌套路由，通过 children 属性，嵌套声明子级路由规则\r\n *             {path: '/about', component: AboutView, children: [\r\n *                 {path: 'tab1', component: TabOne},\r\n *                 {path: 'tab2', component: TabTwo}\r\n *             ]}\r\n *         ]\r\n *     });\r\n *     <!-- 第07步：定义路由的【链接】router-link -->\r\n *     <router-link to=\"/home\">公司首页</router-link>\r\n *     <router-link to=\"/movie/1001\">国产专区</router-link>\r\n *     <router-link to=\"/movie/1002\">日韩专区</router-link>\r\n *     <router-link to=\"/movie/1003\">欧美专区</router-link>\r\n *     <router-link to=\"/about\">关于我们</router-link>\r\n *     <!-- 第07步：定义路由的【占位符】router-view -->\r\n *     <router-view></router-view>\r\n * 4).使用$route对象.params参数接收\r\n * 在动态路由渲染出来的组件中，可以使用 this.$route.params 对象访问到动态匹配的参数值。\r\n * 示例代码如下：\r\n *     // 08.03.动态路由，路由中的动态参数以冒号 : 进行声明，冒号后面的是动态参数的名称\r\n *     // {path: '/movie/:id', component: MovieView},\r\n *     <span>使用 $router.params 对象.参数属性接收：{{ this.$router.params.id }}</span>\r\n * 5).使用props自定义属性接收\r\n * 为了简化路由参数的获取形式，vue-router 允许在路由规则中开启 props 传参。\r\n * 示例代码如下：\r\n *     // 08.03.动态路由，路由中的动态参数以冒号 : 进行声明，冒号后面的是动态参数的名称，以及使用 props 属性接收\r\n *     {path: '/movie/:id', component: MovieView, props: true},\r\n *     <span>使用 props 自定义属性接收：{{ id }}</span>\r\n *     export default {\r\n *         props: [\r\n *             'id'\r\n *         ]\r\n *     }\r\n * 声明式导航与编程式导航的区别？\r\n * 1).在浏览器中，点击链接实现导航的方式，叫做声明式导航。\r\n * 例如：普通网页中点击【<a>链接】、或者 VUE 项目中点击【<router-link>】都属于声明式导航。\r\n * 2).在浏览器中，调用 API 方法实现导航的方式，叫做编程式导航。\r\n * 例如：普通网页中调用【location.href】跳转到新页面的方式，属于编程式导航。\r\n * 编程式导航中的常见API方法？\r\n * vue-router 提供了许多编程式导航的 API，其中最常用的导航 API 分别是：\r\n * 1).this.$router.push('hash address')    跳转到指定 hash 地址，并增加一条历史记录。\r\n * 2).this.$router.replace('hash address') 跳转到指定的 hash 地址，并替换掉当前的历史记录。\r\n * 3).this.$router.go(Number n)            实现导航历史前进、历史后退。\r\n * 4).this.$router.back()                  在历史记录中，后退到上一个页面。\r\n * 5).this.$router.forward()               在历史记录中，前进到下一个页面。\r\n * vue-router 路由之导航守卫？\r\n * 导航守卫可以控制路由的访问权限。示意图如下：\r\n * 1).未登录的情况下，访问后台主页。\r\n * <router-link to=\"/main\">主页</router-link>\r\n * 无法控制访问权限，用户可以直接访问后台主页。\r\n * 2).未登录的情况下，访问后台主页。\r\n * <router-link to=\"/main\">主页</router-link>\r\n * 检测到未登录，强制跳转到登录页面。\r\n * 配置 vue-router 全局前置守卫：\r\n * 步骤二：创建路由模板：在 src 源代码目录下，新建 router/index.js 路由模块，并且初始化如下的代码：\r\n *     // 01.导入 Vue 和 VueRouter 依赖包\r\n *     import Vue from 'vue';\r\n *     import VueRouter from 'vue-router';\r\n *     // 02.调用 Vue.use() 函数，把 VueRouter 安装为 Vue 的插件\r\n *     Vue.use(VueRouter);\r\n *     // 03.创建路由的实例对象\r\n *     const router = new VueRouter();\r\n *     // 03.创建路由的实例对象的全局前置守卫（全局前置监听器）\r\n *     router.beforeEach(function (to, from, next) {\r\n *         if (to.path === '/main') {\r\n *             const token = localStorage.getItem('token');\r\n *             console.log(token);\r\n *             if (token) {\r\n *                 next();\r\n *             } else {\r\n *                 next('/login');\r\n *             }\r\n *         } else {\r\n *             next();\r\n *         }\r\n *     });\r\n *     // 04.向外共享路由的实例对象\r\n *     export default router;\r\n * 调用路由实例对象的 beforeEach(func()) 方法，即可声明【全局前置守卫】。\r\n * 每次发生路由导航跳转的时候，都会自动触发 func() 这个【回调函数】。\r\n * 路由全局前置守卫的三个形式参数解析：\r\n * // 1).to     参数是将要访问的路由的信息对象。\r\n * // 2).from   参数是将要离开的路由的信息对象。\r\n * // 3).next() 函数表示放行，允许这次路由导航。\r\n * next() 函数的三种调用方式？\r\n * // 当前用户拥有后台主页的访问权限，直接放行：next()\r\n * // 当前用户没有后台主页的访问权限，强制其跳转到登录页面：next('/login')\r\n * // 当前用户没有后台主页的访问权限，不允许跳转到后台主页：next(false)\r\n *\r\n */\r\n\r\n\r\n\r\n\r\n/**\r\n * Vue.js 官网学习教程：https://v2.cn.vuejs.org/v2/guide/\r\n * 一、基础\r\n * 01.01.安装\r\n *     # 兼容性\r\n *     Vue 不支持 IE8 及以下版本，因为 Vue 使用了 IE8 无法模拟的 ECMAScript 5 特性。但它支持所有兼容 ECMAScript 5 的浏览器。\r\n *     # 语义化版本控制\r\n *     Vue 在其所有项目中公布的功能和行为都遵循语义化版本控制。对于未公布的或内部暴露的行为，其变更会描述在发布说明中。\r\n *     # 更新日志\r\n *     最新稳定版本：2.7.14\r\n *     每个版本的更新日志见 GitHub。\r\n *     # Vue Devtools\r\n *     在使用 Vue 时，我们推荐在你的浏览器上安装 Vue Devtools。它允许你在一个更友好的界面中审查和调试 Vue 应用。\r\n *     # 直接用 <script> 引入\r\n *     直接下载并用 <script> 标签引入，Vue 会被注册为一个全局变量。\r\n *     # CDN\r\n *     对于制作原型或学习，你可以这样使用最新版本：\r\n *     <script src=\"https://cdn.jsdelivr.net/npm/vue@2.7.14/dist/vue.js\"></script>\r\n *     对于生产环境，我们推荐链接到一个明确的版本号和构建文件，以避免新版本造成的不可预期的破坏：\r\n *     <script src=\"https://cdn.jsdelivr.net/npm/vue@2.7.14\"></script>\r\n *     # NPM\r\n *     在用 Vue 构建大型应用时推荐使用 NPM 安装[1]。\r\n *     NPM 能很好地和诸如 webpack 或 Browserify 模块打包器配合使用。\r\n *     同时 Vue 也提供配套工具来开发单文件组件。\r\n *     # 最新稳定版\r\n *     $ npm install vue\r\n *     # 命令行工具 (CLI)\r\n *     Vue 提供了一个官方的 CLI，为单页面应用 (SPA) 快速搭建繁杂的脚手架。它为现代前端工作流提供了开箱即用的构建设置。\r\n *     只需要几分钟的时间就可以运行起来并带有热重载、保存时 lint 校验，以及生产环境可用的构建版本。\r\n *     更多详情可查阅 Vue CLI 的文档。\r\n *     CLI 工具假定用户对 Node.js 和相关构建工具有一定程度的了解。\r\n *     如果你是新手，我们强烈建议先在不用构建工具的情况下通读指南，在熟悉 Vue 本身之后再使用 CLI。\r\n *     # 术语\r\n *     完整版：同时包含编译器和运行时的版本。\r\n *     编译器：用来将模板字符串编译成为 JavaScript 渲染函数的代码。\r\n *     运行时：用来创建 Vue 实例、渲染并处理虚拟 DOM 等的代码。基本上就是除去编译器的其它一切。\r\n * 01.02.介绍\r\n *     # Vue.js 是什么\r\n *     Vue (读音 /vjuː/，类似于 view) 是一套用于构建用户界面的渐进式框架。\r\n *     与其它大型框架不同的是，Vue 被设计为可以自底向上逐层应用。\r\n *     Vue 的核心库只关注视图层，不仅易于上手，还便于与第三方库或既有项目整合。\r\n *     另一方面，当与现代化的工具链以及各种支持类库结合使用时，Vue 也完全能够为复杂的单页应用提供驱动。\r\n *     如果你想在深入学习 Vue 之前对它有更多了解，我们制作了一个视频，带您了解其核心概念和一个示例工程。\r\n *     如果你已经是有经验的前端开发者，想知道 Vue 与其它库/框架有哪些区别，请查看对比其它框架。\r\n *     # 起步\r\n *     尝试 Vue.js 最简单的方法是使用 Hello World 例子。你可以在浏览器新标签页中打开它，跟着例子学习一些基础用法。\r\n *     或者你也可以创建一个 .html 文件，然后通过如下方式引入 Vue：\r\n *     <!-- 开发环境版本，包含了有帮助的命令行警告 -->\r\n *     <script src=\"https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js\"></script>\r\n *     或者：\r\n *     <!-- 生产环境版本，优化了尺寸和速度 -->\r\n *     <script src=\"https://cdn.jsdelivr.net/npm/vue@2\"></script>\r\n *     安装教程给出了更多安装 Vue 的方式。请注意我们不推荐新手直接使用 vue-cli，尤其是在你还不熟悉基于 Node.js 的构建工具时。\r\n *     # 声明式渲染\r\n *     Vue.js 的核心是一个允许采用简洁的模板语法来声明式地将数据渲染进 DOM 的系统：\r\n *     <div id=\"app\">\r\n *         {{ message }}\r\n *     </div>\r\n *     const vm = new Vue({\r\n *         el: '#app',\r\n *         data: {\r\n *             message: 'hello world'\r\n *         }\r\n *     });\r\n *     我们已经成功创建了第一个 Vue 应用！看起来这跟渲染一个字符串模板非常类似，但是 Vue 在背后做了大量工作。\r\n *     现在数据和 DOM 已经被建立了关联，所有东西都是【响应式的】。\r\n *     我们要怎么确认呢？\r\n *     打开你的浏览器的 JavaScript 控制台 (就在这个页面打开)，并修改【app.message】的值，你将看到上例相应地更新。\r\n *     除了文本插值，我们还可以像这样来绑定元素【attribute】：\r\n *     <div id=\"app\">\r\n *         <span v-bind:title=\"message\">\r\n *             鼠标悬停几秒钟查看此处动态绑定的提示信息！！！\r\n *         </span>\r\n *     </div>\r\n *     const vm = new Vue({\r\n *         el: '#app',\r\n *         data: {\r\n *             message: `页面加载于：${new Date().toLocaleString()}`\r\n *         }\r\n *     });\r\n *     这里我们遇到了一点新东西。你看到的 v-bind attribute 被称为指令。\r\n *     指令带有前缀 v-，以表示它们是 Vue 提供的特殊 attribute。可能你已经猜到了，它们会在渲染的 DOM 上应用特殊的响应式行为。\r\n *     在这里，该指令的意思是：将这个元素节点的 title attribute 和 Vue 实例的 message property 保持一致。\r\n *     # 条件与循环\r\n *     控制切换一个元素是否显示也相当简单：\r\n *     <button type=\"button\" v-on:click=\"switchShow()\">显示出来</button>\r\n *     <span v-if=\"show\">看到我了吧？</span>\r\n *     <span v-show=\"show\">看到你了吧？</span>\r\n *     <span v-bind:class=\"{hide:other}\">看到他了吧？</span>\r\n *     data() {\r\n *         return {\r\n *             show: false,\r\n *             other: true\r\n *         };\r\n *     },\r\n *     methods: {\r\n *         switchShow() {\r\n *             // 如何在 vue 中进行切换显示和隐藏（Toggle）三种写法？\r\n *             // 1.v-if 指令\r\n *             // 2.v-show 指令\r\n *             // 3.v-bind:class 指令\r\n *             // this.show = this.show === true ? false : true;\r\n *             // this.show = this.show !== true;\r\n *             this.show = !this.show;\r\n *             this.other = !this.other;\r\n *         }\r\n *     }\r\n *     这个例子演示了我们不仅可以把数据绑定到 DOM 文本或 attribute，还可以绑定到 DOM 结构。\r\n *     此外，Vue 也提供一个强大的过渡效果系统，可以在 Vue 插入/更新/移除元素时自动应用【过渡效果】。\r\n *     还有其它很多指令，每个都有特殊的功能。\r\n *     例如，v-for 指令可以绑定数组的数据来渲染一个项目列表：\r\n *     <ol>\r\n *       <li v-for=\"item in list\">\r\n *         {{item.text}}\r\n *       </li>\r\n *     </ol>\r\n *     data() {\r\n *         return {\r\n *             list: [\r\n *                 {text: 'HTML-5'},\r\n *                 {text: 'CSS-3'},\r\n *                 {text: 'ECMAScript-5'},\r\n *                 {text: 'DOM'},\r\n *                 {text: 'BOM'},\r\n *                 {text: 'jQuery'},\r\n *                 {text: 'Ajax'}\r\n *             ]\r\n *         };\r\n *     }\r\n *     # 处理用户输入\r\n *     为了让用户和你的应用进行交互，我们可以用 v-on 指令添加一个事件监听器，通过它调用在 Vue 实例中定义的方法：\r\n *     <button type=\"button\" v-on:click=\"reverseMessage()\">反转消息</button>\r\n *     <span>反转之后：{{message}}</span>\r\n *     methods: {\r\n *         reverseMessage() {\r\n *             this.message = this.message.split('').reverse().join();\r\n *         }\r\n *     }\r\n *     注意：在 reverseMessage 方法中，我们更新了应用的状态，但没有触碰 DOM，所有的 DOM 操作都由 Vue 来处理。\r\n *     Vue 还提供了 v-model 指令，它能轻松实现表单输入和应用状态之间的双向绑定。\r\n *     <input type=\"text\" style=\"width: 50%\" v-model=\"message\">\r\n *     data() {\r\n *         return {\r\n *             message: 'hello world: ' + new Date().toLocaleString()\r\n *         };\r\n *     }\r\n *     # 组件化应用构建\r\n *     组件系统是 Vue 的另一个重要概念，因为它是一种抽象，允许我们使用小型、独立和通常可复用的组件构建大型应用。\r\n *     仔细想想，几乎任意类型的应用界面都可以抽象为一个组件树：\r\n *     在 Vue 里，一个组件本质上是一个拥有预定义选项的一个 Vue 实例。\r\n *     在 Vue 中注册组件很简单：\r\n *     <div id=\"app\">\r\n *         <app-nav></app-nav>\r\n *         <app-view>\r\n *             <app-sidebar></app-sidebar>\r\n *             <app-content></app-content>\r\n *         </app-view>\r\n *     </div>\r\n *     # 与自定义元素的关系\r\n *     你可能已经注意到 Vue 组件非常类似于自定义元素——它是 Web 组件规范的一部分，这是因为 Vue 的组件语法部分参考了该规范。\r\n *     例如 Vue 组件实现了 Slot API 与 is attribute。但是，还是有几个关键差别：\r\n *     Web Components 规范已经完成并通过，但未被所有浏览器原生实现。\r\n *     目前 Safari 10.1+、Chrome 54+ 和 Firefox 63+ 原生支持 Web Components。\r\n *     相比之下，Vue 组件不需要任何 polyfill，并且在所有支持的浏览器 (IE9 及更高版本) 之下表现一致。\r\n *     必要时，Vue 组件也可以包装于原生自定义元素之内。\r\n *     Vue 组件提供了纯自定义元素所不具备的一些重要功能，最突出的是跨组件数据流、自定义事件通信以及构建工具集成。\r\n *     虽然 Vue 内部没有使用自定义元素，不过在应用使用自定义元素、或以自定义元素形式发布时，依然有很好的互操作性。\r\n *     Vue CLI 也支持将 Vue 组件构建成为原生的自定义元素。\r\n * 01.03.Vue实例\r\n *     # 创建一个 Vue 实例\r\n *     每个 Vue 应用都是通过用 Vue 函数创建一个新的 Vue 实例开始的：\r\n *     var vm = new Vue({\r\n *         // 选项\r\n *     });\r\n *     虽然没有完全遵循 MVVM 模型，但是 Vue 的设计也受到了它的启发。\r\n *     因此在文档中经常会使用 vm (ViewModel 的缩写) 这个变量名表示 Vue 实例。\r\n *     当创建一个 Vue 实例时，你可以传入一个选项对象。这篇教程主要描述的就是如何使用这些选项来创建你想要的行为。\r\n *     作为参考，你也可以在 API 文档中浏览完整的选项列表。\r\n *     一个 Vue 应用由一个通过 new Vue 创建的根 Vue 实例，以及可选的嵌套的、可复用的组件树组成。\r\n *     举个例子，一个 todo 应用的组件树可以是这样的：\r\n *     根实例：\r\n *     └─ TodoList\r\n *       ├─ TodoItem\r\n *       │  ├─ TodoButtonDelete\r\n *       │  └─ TodoButtonEdit\r\n *       └─ TodoListFooter\r\n *          ├─ TodosButtonClear\r\n *          └─ TodoListStatistics\r\n *     我们会在稍后的组件系统章节具体展开。\r\n *     不过现在，你只需要明白所有的 Vue 组件都是 Vue 实例，并且接受相同的选项对象 (一些根实例特有的选项除外)。\r\n *     # 数据与方法\r\n *     当一个 Vue 实例被创建时，它将 data 对象中的所有的 property 加入到 Vue 的【响应式系统】中。\r\n *     当这些 property 的值发生改变时，视图将会产生【响应】，即匹配更新为新的值。\r\n *         // 我们的数据对象\r\n *         var data = { a: 1 }\r\n *         // 该对象被加入到一个 Vue 实例中\r\n *         var vm = new Vue({\r\n *             data: data\r\n *         })\r\n *         // 获得这个实例上的 property\r\n *         // 返回源数据中对应的字段\r\n *         // => true\r\n *         vm.a == data.a\r\n *         // 设置 property 也会影响到原始数据\r\n *         // data.a => 2\r\n *         vm.a = 2\r\n *         data.a\r\n *         // 反之亦然\r\n *         // vm.a => 3\r\n *         data.a = 3\r\n *         vm.a\r\n *     当这些数据改变时，视图会进行重渲染。值得注意的是只有当实例被创建时就已经存在于 data 中的 property 才是响应式的。\r\n *     以后你可以在 API 参考中查阅到完整的实例 property 和方法的列表。\r\n *     # 实例生命周期钩子\r\n *     每个 Vue 实例在被创建时都要经过一系列的初始化过程——例如，需要设置数据监听、编译模板、将实例挂载到 DOM 并在数据变化时更新 DOM 等。\r\n *     同时在这个过程中也会运行一些叫做生命周期钩子的函数，这给了用户在不同阶段添加自己的代码的机会。\r\n *     比如 created 钩子可以用来在一个实例被创建之后执行代码：\r\n *         new Vue({\r\n *             data: {\r\n *                 a: 1\r\n *             },\r\n *             created: function () {\r\n *                 // `this` 指向 vm 实例\r\n *                 console.log('a is: ' + this.a);\r\n *             }\r\n *         });\r\n *         // => \"a is: 1\"\r\n *     也有一些其它的钩子，在实例生命周期的不同阶段被调用，如：mounted、updated、destroyed等等。\r\n *     一共有 13 个生命周期钩子函数，示例代码如下：\r\n *         beforeCreate() {\r\n *           console.log(`在实例初始化之后、数据观测和事件配置之前被调用。`);\r\n *         },\r\n *         created() {\r\n *           console.log(`在实例创建完成后被立即调用。`);\r\n *         },\r\n *         beforeMount() {\r\n *           console.log(`在挂载开始之前被调用，相关的函数首次被调用。`);\r\n *         },\r\n *         mounted() {\r\n *           console.log(`在实例挂载到DOM后被调用。`);\r\n *         },\r\n *         beforeUpdate() {\r\n *           console.log(`在响应式数据更新时，虚拟DOM重新渲染和打补丁之前被调用。`);\r\n *         },\r\n *         updated() {\r\n *           console.log(`在虚拟DOM重新渲染和打补丁后被调用。`);\r\n *         },\r\n *         beforeDestroy() {\r\n *           console.log(`在实例销毁之前被调用。`);\r\n *         },\r\n *         destroyed() {\r\n *           console.log(`在实例被销毁后调用。`);\r\n *         },\r\n *         activated() {\r\n *           console.log(`在实例被激活的时候使用，用于重复激活一个组件实例的时候。`);\r\n *         },\r\n *         deactivated() {\r\n *           console.log(`在实例没有被激活的时候。`);\r\n *         },\r\n *         errorCaptured(err, vm, info) {\r\n *           console.log(`当捕获到一个来自后代组件的错误时被调用。`);\r\n *         }\r\n *     生命周期钩子的 this 上下文指向调用它的 Vue 实例。\r\n *     注意：不要在选项 property 或回调上使用箭头函数，比如 created: () => console.log(this.a) 或 vm.$watch('a', newValue => this.myMethod())。\r\n *     因为箭头函数并【没有 this】，this 会作为变量一直向上级词法作用域查找，直至找到为止，经常导致报错：\r\n *     Uncaught TypeError: Cannot read property of undefined。\r\n *     或者\r\n *     Uncaught TypeError: this.myMethod is not a function。\r\n *     # 生命周期图示\r\n *     下图展示了实例的生命周期。你不需要立马弄明白所有的东西，不过随着你的不断学习和使用，它的参考价值会越来越高。\r\n * 01.04.模板语法\r\n *     Vue.js 使用了基于 HTML 的模板语法，允许开发者声明式地将 DOM 绑定至底层 Vue 实例的数据。\r\n *     所有 Vue.js 的模板都是合法的 HTML，所以能被遵循规范的浏览器和 HTML 解析器解析。\r\n *     在底层的实现上，Vue 将模板编译成虚拟 DOM 渲染函数。\r\n *     结合响应系统，Vue 能够智能地计算出最少需要重新渲染多少组件，并把 DOM 操作次数减到最少。\r\n *     如果你熟悉虚拟 DOM 并且偏爱 JavaScript 的原始力量，你也可以不用模板，直接写渲染 (render) 函数，使用可选的 JSX 语法。\r\n *     # 文本 {{}}\r\n *     数据绑定最常见的形式就是使用【Mustache语法】，双大括号 {{}} 的文本插值：\r\n *         // 插值表达式\r\n *         <span>插值表达式：{{ msg }}</span>\r\n *     使用 Mustache 标签将会被替代为对应数据对象上 msg property 的值。\r\n *     无论何时，绑定的数据对象上 msg property 发生了改变，插值处的内容都会更新。\r\n *     # v-once\r\n *     通过使用 v-once 指令，你也能执行一次性地插值，当数据改变时，插值处的内容不会更新。\r\n *     但请留心这会影响到该节点上的其它数据绑定：\r\n *         // 插值表达式\r\n *         <span>插值表达式：{{ msg }}</span>\r\n *         <span v-once>插值表达式：{{ msg }}，这个将不会改变</span>\r\n *     # 原始 HTML v-html\r\n *     双大括号会将数据解释为普通文本，而非 HTML 代码。为了输出真正的 HTML，你需要使用 v-html 指令：\r\n *         <p>Using mustaches: {{ message }}</p>\r\n *         <p>Using v-html directive: <span v-html=\"message\"></span></p>\r\n *     这个 span 的内容将会被替换成为 property 值 rawHtml，直接作为 HTML——会忽略解析 property 值中的数据绑定。\r\n *     注意，你不能使用 v-html 来复合局部模板，因为 Vue 不是基于字符串的模板引擎。\r\n *     反之，对于用户界面 (UI)，组件更适合作为可重用和可组合的基本单位。\r\n *     你的站点上动态渲染的任意 HTML 可能会非常危险，因为它很容易导致 XSS 攻击。\r\n *     请只对可信内容使用 HTML 插值，绝不要对用户提供的内容使用插值。\r\n *     # Attribute v-bind\r\n *     使用 Mustache 语法不能作用在 HTML attribute 上，遇到这种情况应该使用 v-bind 指令：\r\n *         <div v-bind:id=\"dynamicId\"></div>\r\n *     对于布尔 attribute (它们只要存在就意味着值为 true)，v-bind 工作起来略有不同，在这个例子中：\r\n *         <button v-bind:disabled=\"isButtonDisabled\">Button</button>\r\n *     如果 isButtonDisabled 的值是 null、undefined 或 false，则 disabled attribute 甚至不会被包含在渲染出来的 <button> 元素中。\r\n *     # 使用 JavaScript 表达式\r\n *     迄今为止，在我们的模板中，我们一直都只绑定简单的 property 键值。但实际上，对于所有的数据绑定，Vue.js 都提供了完全的 JavaScript 表达式支持。\r\n *         {{ number + 1 }}\r\n *         {{ ok ? 'YES' : 'NO' }}\r\n *         {{ message.split('').reverse().join('') }}\r\n *         <div v-bind:id=\"'list-' + id\"></div>\r\n *     这些表达式会在所属 Vue 实例的数据作用域下作为 JavaScript 被解析。有个限制就是，每个绑定都只能包含单个表达式，所以下面的例子都不会生效。\r\n *         // 这是语句，不是表达式\r\n *         {{ var a = 1 }}\r\n *         // 流控制也不会生效，请使用三元表达式\r\n *         {{ if (ok) { return message } }}\r\n *     模板表达式都被放在沙盒中，只能访问全局变量的一个白名单，如 Math 和 Date 。\r\n *     你不应该在模板表达式中试图访问用户定义的全局变量。\r\n *     # 指令 v-if\r\n *     指令 (Directives) 是带有 v- 前缀的特殊 attribute。\r\n *     指令 attribute 的值预期是单个 JavaScript 表达式 (v-for 是例外情况，稍后我们再讨论)。\r\n *     指令的职责是，当表达式的值改变时，将其产生的连带影响，响应式地作用于 DOM。回顾我们在介绍中看到的例子：\r\n *         <p v-if=\"seen\">现在你看到我了</p>\r\n *     这里，v-if 指令将根据表达式 seen 的值的真假来插入/移除 <p> 元素。\r\n *     # 参数\r\n *     一些指令能够接收一个【参数】，在指令名称之后以冒号表示。例如，v-bind 指令可以用于响应式地更新 HTML attribute：\r\n *         <a v-bind:href=\"url\">影视专区</a>\r\n *     在这里 href 是参数，告知 v-bind 指令将该元素的 href attribute 与表达式 url 的值绑定。\r\n *     另一个例子是 v-on 指令，它用于监听 DOM 事件：\r\n *         <a v-on:click=\"doSomething\">暂停播放</a>\r\n *     在这里参数是监听的事件名。我们也会更详细地讨论事件处理。\r\n *     # 动态参数\r\n *     从 2.6.0 开始，可以用方括号括起来的 JavaScript 表达式作为一个指令的参数：\r\n *     // 注意，参数表达式的写法存在一些约束，如之后的【对动态参数表达式的约束】章节所述。\r\n *     <a v-bind:[attributeName]=\"url\">影视专区</a>\r\n *     这里的 attributeName 会被作为一个 JavaScript 表达式进行动态求值，求得的值将会作为最终的参数来使用。\r\n *     例如，如果你的 Vue 实例有一个 data property attributeName，其值为 \"href\"，那么这个绑定将等价于 v-bind:href。\r\n *     同样地，你可以使用动态参数为一个动态的事件名绑定处理函数：\r\n *     <a v-on:[eventName]=\"doSomething\">影视专区</a>\r\n *     在这个示例中，当 eventName 的值为 \"focus\" 时，v-on:[eventName] 将等价于 v-on:focus。\r\n *     对动态参数的值的约束：\r\n *     动态参数预期会求出一个字符串，异常情况下值为 null。这个特殊的 null 值可以被显性地用于移除绑定。任何其它非字符串类型的值都将会触发一个警告。\r\n *     对动态参数表达式的约束：\r\n *     动态参数表达式有一些语法约束，因为某些字符，如空格和引号，放在 HTML attribute 名里是无效的。例如：\r\n *         // 这会触发一个编译警告\r\n *         <a v-bind:['foo' + bar]=\"value\">影视专区</a>\r\n *     变通的办法是使用没有空格或引号的表达式，或用计算属性替代这种复杂表达式。\r\n *     在 DOM 中使用模板时 (直接在一个 HTML 文件里撰写模板)，还需要避免使用大写字符来命名键名，因为浏览器会把 attribute 名全部强制转为小写：\r\n *         // 在 DOM 中使用模板时这段代码会被转换为 `v-bind:[someAttr]`。\r\n *         // 除非在实例中有一个名为 someAttr 的 property，否则代码不会工作。\r\n *         <a v-bind:[someAttr]=\"value\">影视专区</a>\r\n *     # 修饰符\r\n *     修饰符 (modifier) 是以半角句号 . 指明的特殊后缀，用于指出一个指令应该以特殊方式绑定。\r\n *     例如，.prevent 修饰符告诉 v-on 指令对于触发的事件调用 event.preventDefault()：\r\n *         <form v-on:submit.prevent=\"onSubmit\">填写表单</form>\r\n *     在接下来对 v-on 和 v-for 等功能的探索中，你会看到修饰符的其它例子。\r\n *     # 缩写\r\n *     使用 v- 前缀作为一种视觉提示，用来识别模板中 Vue 特定的 attribute。\r\n *     当你在使用 Vue.js 为现有标签添加动态行为 (dynamic behavior) 时，v- 前缀很有帮助，然而，对于一些频繁用到的指令来说，就会感到使用繁琐。\r\n *     同时，在构建由 Vue 管理所有模板的单页面应用程序 (SPA - single page application) 时，v- 前缀也变得没那么重要了。\r\n *     因此，Vue 为 v-bind 和 v-on 这两个最常用的指令，提供了特定简写：\r\n *     # v-bind 缩写\r\n *         // 完整语法\r\n *         <a v-bind:href=\"url\">...</a>\r\n *         // 缩写\r\n *         <a :href=\"url\">...</a>\r\n *         // 动态参数的缩写 (2.6.0+)\r\n *         <a :[key]=\"url\"> ... </a>\r\n *     # v-on 缩写\r\n *         // 完整语法\r\n *         <a v-on:click=\"doSomething\">...</a>\r\n *         // 缩写\r\n *         <a @click=\"doSomething\">...</a>\r\n *         // 动态参数的缩写 (2.6.0+)\r\n *         <a @[event]=\"doSomething\"> ... </a>\r\n *     它们看起来可能与普通的 HTML 略有不同，但 : 与 @ 对于 attribute 名来说都是合法字符，在所有支持 Vue 的浏览器都能被正确地解析。\r\n *     而且，它们不会出现在最终渲染的标记中。\r\n *     缩写语法是完全可选的，但随着你更深入地了解它们的作用，你会庆幸拥有它们。\r\n * 01.05.计算属性和侦听器\r\n *     # 计算属性 computed\r\n *     模板内的表达式非常便利，但是设计它们的初衷是用于简单运算的。在模板中放入太多的逻辑会让模板过重且难以维护。例如：\r\n *         <div id=\"example\">\r\n *             {{ message.split('').reverse().join('') }}\r\n *         </div>\r\n *     在这个地方，模板不再是简单的声明式逻辑。\r\n *     你必须看一段时间才能意识到，这里是想要显示变量 message 的翻转字符串。当你想要在模板中的多处包含此翻转字符串时，就会更加难以处理。\r\n *     所以，对于任何复杂逻辑，你都应当使用计算属性。\r\n *     基础例子：\r\n *         <p>Original message: \"{{ message }}\"</p>\r\n *         <p>Computed reversed message: \"{{ reversedMessage }}\"</p>\r\n *         var vm = new Vue({\r\n *           el: '#example',\r\n *           data: {\r\n *             message: 'Hello'\r\n *           },\r\n *           computed: {\r\n *             // 计算属性的 getter\r\n *             reversedMessage: function () {\r\n *               // `this` 指向 vm 实例\r\n *               return this.message.split('').reverse().join('');\r\n *             }\r\n *           }\r\n *         });\r\n *     结果：\r\n *     Original message: \"Hello\"\r\n *     Computed reversed message: \"olleH\"\r\n *     这里我们声明了一个计算属性 reversedMessage。\r\n *     我们提供的函数将用作 property vm.reversedMessage 的 getter 函数：\r\n *     你可以打开浏览器的控制台，自行修改例子中的 vm。\r\n *     vm.reversedMessage 的值始终取决于 vm.message 的值。\r\n *     你可以像绑定普通 property 一样在模板中绑定计算属性。\r\n *     Vue 知道 vm.reversedMessage 依赖于 vm.message，因此当 vm.message 发生改变时，所有依赖 vm.reversedMessage 的绑定也会更新。\r\n *     而且最妙的是我们已经以声明的方式创建了这种依赖关系：计算属性的 getter 函数是没有副作用 (side effect) 的，这使它更易于测试和理解。\r\n *     # 计算属性缓存 vs 方法\r\n *     你可能已经注意到我们可以通过在表达式中调用方法来达到同样的效果：\r\n *         <p>Reversed message: \"{{ reversedMessage() }}\"</p>\r\n *         // 在组件中\r\n *         methods: {\r\n *             reversedMessage: function () {\r\n *                 return this.message.split('').reverse().join('');\r\n *             }\r\n *         }\r\n *     我们可以将同一函数定义为一个方法而不是一个计算属性。两种方式的最终结果确实是完全相同的。\r\n *     然而，不同的是计算属性是基于它们的响应式依赖进行缓存的。只在相关响应式依赖发生改变时它们才会重新求值。\r\n *     这就意味着只要 message 还没有发生改变，多次访问 reversedMessage 计算属性会立即返回之前的计算结果，而不必再次执行函数。\r\n *     这也同样意味着下面的计算属性将不再更新，因为 Date.now() 不是响应式依赖：\r\n *         computed: {\r\n *           now: function () {\r\n *             return Date.now();\r\n *           }\r\n *         }\r\n *     相比之下，每当触发重新渲染时，调用方法将总会再次执行函数。\r\n *     我们为什么需要缓存？假设我们有一个性能开销比较大的计算属性 A，它需要遍历一个巨大的数组并做大量的计算。\r\n *     然后我们可能有其他的计算属性依赖于 A。\r\n *     如果没有缓存，我们将不可避免的多次执行 A 的 getter！如果你不希望有缓存，请用方法来替代。\r\n *     # 计算属性 vs 侦听属性\r\n *     Vue 提供了一种更通用的方式来观察和响应 Vue 实例上的数据变动：侦听属性。\r\n *     当你有一些数据需要随着其它数据变动而变动时，你很容易滥用 watch 特别是如果你之前使用过 AngularJS。\r\n *     然而，通常更好的做法是使用计算属性而不是命令式的 watch 回调。\r\n *     细想一下这个例子：\r\n *         <div id=\"demo\">{{ fullName }}</div>\r\n *         var vm = new Vue({\r\n *           el: '#demo',\r\n *           data: {\r\n *             firstName: 'Foo',\r\n *             lastName: 'Bar',\r\n *             fullName: 'Foo Bar'\r\n *           },\r\n *           watch: {\r\n *             firstName: function (val) {\r\n *               this.fullName = val + ' ' + this.lastName;\r\n *             },\r\n *             lastName: function (val) {\r\n *               this.fullName = this.firstName + ' ' + val;\r\n *             }\r\n *           }\r\n *         });\r\n *     上面代码是命令式且重复的。将它与计算属性的版本进行比较：\r\n *         var vm = new Vue({\r\n *           el: '#demo',\r\n *           data: {\r\n *             firstName: 'Foo',\r\n *             lastName: 'Bar'\r\n *           },\r\n *           computed: {\r\n *             fullName: function () {\r\n *               return this.firstName + ' ' + this.lastName;\r\n *             }\r\n *           }\r\n *         });\r\n *     # 计算属性的 setter\r\n *     计算属性默认只有 getter，不过在需要时你也可以提供一个 setter：\r\n *         computed: {\r\n *           fullName: {\r\n *             // getter 方法\r\n *             get: function () {\r\n *               return this.firstName + ' ' + this.lastName;\r\n *             },\r\n *             // setter 方法\r\n *             set: function (newValue) {\r\n *               var names = newValue.split(' ');\r\n *               this.firstName = names[0];\r\n *               this.lastName = names[names.length - 1];\r\n *             }\r\n *           }\r\n *         }\r\n *     现在再运行 vm.fullName = 'John Doe' 时，setter 会被调用，vm.firstName 和 vm.lastName 也会相应地被更新。\r\n *     # 侦听器 watch\r\n *     虽然计算属性在大多数情况下更合适，但有时也需要一个自定义的侦听器。\r\n *     这就是为什么 Vue 通过 watch 选项提供了一个更通用的方法，来响应数据的变化。\r\n *     当需要在数据变化时执行异步或开销较大的操作时，这个方式是最有用的。\r\n *     结果：\r\n *         Ask a yes/no question:\r\n *         Questions usually contain a question mark.\r\n *     在这个示例中，使用 watch 选项允许我们执行异步操作 (访问一个 API)，限制我们执行该操作的频率，并在我们得到最终结果前，设置中间状态。\r\n *     这些都是计算属性无法做到的。\r\n *     除了 watch 选项之外，您还可以使用命令式的 vm.$watch API。\r\n * 01.06.Class与Style绑定\r\n *     操作元素的 class 列表和内联样式是数据绑定的一个常见需求。\r\n *     因为它们都是 attribute，所以我们可以用 v-bind 处理它们：只需要通过表达式计算出字符串结果即可。\r\n *     不过，字符串拼接麻烦且易错。因此，在将 v-bind 用于 class 和 style 时，Vue.js 做了专门的增强。\r\n *     表达式结果的类型除了字符串之外，还可以是对象或数组。\r\n *\r\n * 01.07.条件渲染\r\n * 01.08.列表渲染\r\n * 01.09.事件处理\r\n * 01.10.表单输入绑定\r\n * 01.11.组件基础\r\n * 二、深入了解组件\r\n * 02.01.组件注册\r\n * 02.02.Prop\r\n * 02.03.自定义事件\r\n * 02.04.插槽\r\n * 02.05.动态组件&异步组件\r\n * 02.06.处理边界情况\r\n * 三、过滤&动画\r\n * 03.01.进入/离开&列表过渡\r\n * 03.02.状态过渡\r\n * 四、可复用性&组合\r\n * 04.01.混入\r\n * 04.02.自定义指令\r\n * 04.03.渲染函数&JSX\r\n * 04.04.插件\r\n * 04.05.过滤器\r\n * 五、工具\r\n * 05.01.单文件组件\r\n * 05.02.测试\r\n * 05.03.TypeScript支持\r\n * 05.04.生产环境部署\r\n * 六、规模化\r\n * 06.01.路由\r\n * 06.02.状态管理\r\n * 06.03.服务端渲染\r\n * 06.04.安全\r\n * 七、内在\r\n * 07.01.深入响应式原理\r\n * 八、迁移\r\n * 08.01.从Vue 1.x迁移\r\n * 08.02.从Vue Router 0.7.x迁移\r\n * 08.03.从Vuex 0.6.x迁移到1.0\r\n * 08.04.迁移至Vue 2.7\r\n * 九、更多\r\n * 09.01.对比其他框架\r\n * 09.02.加入Vue.js社区\r\n * 09.03.认识团队\r\n */\r\n\r\n\r\n\r\n\r\n/**\r\n * Vue.js 官方学习教程（https://v2.cn.vuejs.org/v2/guide/）视频讲解版本\r\n * 一、Vue 核心\r\n * 1.1 Vue 简介\r\n *     官网：\r\n *         (1).英文官网: https://vuejs.org/\r\n *         (2).中文官网: https://cn.vuejs.org/\r\n *     介绍：\r\n *         (1).动态构建用户界面的渐进式 JavaScript 框架\r\n *         (2).作者: 尤雨溪\r\n *     特点：\r\n *         (1).遵循MVVM模式。\r\n *         (2).编码简洁，体积小，运行效率高，适合移动端或者PC端开发。\r\n *         (3).它本身只关注UI，也可以引入其它第三方库开发项。\r\n *     与其它 JS 框架的关联：\r\n *         (1).借鉴 Angular 的模板和数据绑定技术。\r\n *         (2).借鉴 React 的组件化和虚拟DOM。\r\n *     Vue 相关库：\r\n *         (1).vue-cli      vue 脚手架。\r\n *         (2).vue-resource 模块发送请求。插件。通过【XMLHttpRequest】或者【JSONP】发起请求并进行处理。\r\n *         (3).axios        方式发送请求。插件。基于【Promise】用于浏览器和【nodejs】的HTTP客户端。\r\n *         (4).vue-router   vue 路由。\r\n *         (5).vuex         vue 状态管理。\r\n *         (6).element-ui   基于 vue 的 UI 组件库（PC 端）。\r\n *         (7).……\r\n * 1.2 Vue 初识\r\n *     (1).想让Vue工作，就必须创建一个Vue实例，且要传入一个配置对象；\r\n *     (2).root容器里的代码依然符合html规范，只不过混入了一些特殊的Vue语法；\r\n *     (3).root容器里的代码被称为【Vue模板】；\r\n *     (4).Vue实例和容器是一一对应的；\r\n *     (5).真实开发中只有一个Vue实例，并且会配合着组件一起使用；\r\n *     (6).{{xxx}}中的xxx要写js表达式，且xxx可以自动读取到data中的所有属性；\r\n *     (7).一旦data中的数据发生改变，那么页面中用到该数据的地方也会自动更新；\r\n *     注意：\r\n *     区分 js 表达式和 js 代码（语句）？\r\n *     (1).js表达式：一个表达式会产生一个值，可以放在任何一个需要值的地方：\r\n *         (1).a\r\n *         (2).a+b\r\n *         (3).demo(1)\r\n *         (4).x === y ? 'a' : 'b'\r\n *     (2).js代码（语句）\r\n *         (1).if() {}\r\n *         (2).for() {}\r\n *     样例：\r\n *     (1).准备好一个容器\r\n *         <div id=\"demo\"></div>\r\n *     (2).创建Vue实例\r\n *         const vm = new Vue({\r\n *             (3).el挂载用于指定当前Vue实例为哪个容器服务，值通常为css选择器字符串。\r\n *             el: '#app',\r\n *             (4).data数据用于存储数据，数据供el所指定的容器去使用，值我们暂时先写成一个对象。\r\n *             data: {\r\n *                 name: 'Hello World'\r\n *             }\r\n *         });\r\n *     或者：\r\n *     (2).创建Vue实例，然后挂载vm实例\r\n *         // 1.创建vue实例\r\n *         const vm = new Vue({\r\n *             data: {\r\n *                 name: 'Hello World'\r\n *             }\r\n *         });\r\n *         // 2.挂载\r\n *         vm.$mount('#app');\r\n *     或者：\r\n *     (2).使用Vue模板结构\r\n *         export default {\r\n *             data() {\r\n *                 name: 'Hello World'\r\n *             }\r\n *         }\r\n *     data与el的2种写法：\r\n *     (1).el有2种写法\r\n *         (1).new Vue时候配置el属性。\r\n *         (2).先创建Vue实例，随后再通过vm.$mount('#root')指定el的值。\r\n *     (2).data有2种写法\r\n *         (1).对象式。\r\n *         (2).函数式。\r\n *     如何选择：目前哪种写法都可以，以后学习到组件时，data必须使用函数式，否则会报错。\r\n *     一个重要的原则：由Vue管理的函数，一定不要写箭头函数，一旦写了箭头函数，this就不再是Vue实例了。\r\n * 1.3 模板语法\r\n *     Vue模板语法有2大类：\r\n *     (1).插值语法：\r\n *         功能：用于解析标签体内容。\r\n *         写法：{{xxx}}，xxx是js表达式，且可以直接读取到data中的所有属性。\r\n *     (2).指令语法：\r\n *         功能：用于解析标签（包括：标签属性、标签体内容、绑定事件等等）。\r\n *         举例：v-bind:href=\"xxx\" 或  简写为 :href=\"xxx\"，xxx同样要写js表达式，且可以直接读取到data中的所有属性。\r\n *         备注：Vue中有很多的指令，且形式都是：v-????，此处我们只是拿v-bind举个例子。\r\n *     理解：\r\n *     html 中包含了一些 JS 语法代码，语法分为两种，分别为：\r\n *     1. 插值语法（双大括号表达式）。\r\n *     2. 指令（以 v-开头）。\r\n *     插值语法：\r\n *     1. 功能: 用于解析标签体内容。\r\n *     2. 语法: {{xxx}} ，xxx 会作为 js 表达式解析。\r\n *     指令语法：\r\n *     1. 功能: 解析标签属性、解析标签体内容、绑定事件。\r\n *     2. 举例：v-bind:href = 'xxx'，xxx 会作为 js 表达式被解析。\r\n *     3. 说明：Vue 中有有很多的指令，此处只是用 v-bind 举个例子。\r\n * 1.4 数据绑定\r\n *     Vue中有2种数据绑定的方式：\r\n *     (1).单向绑定(v-bind)：数据只能从data流向页面。\r\n *     (2).双向绑定(v-model)：数据不仅能从data流向页面，还可以从页面流向data。\r\n *     备注：\r\n *         (1).双向绑定一般都应用在表单类元素上（如：input、select等）.\r\n *         (2).v-model:value可以简写为v-model，因为v-model默认收集的就是value值。\r\n *     单向数据绑定：\r\n *     1.语法：v-bind:href =\"xxx\" 或简写为 :href。\r\n *     2.特点：数据只能从 data 流向页面。\r\n *     双向数据绑定：\r\n *     1. 语法：v-mode:value=\"xxx\" 或简写为 v-model=\"xxx\"。\r\n *     2. 特点：数据不仅能从 data 流向页面，还能从页面流向 data。\r\n * 1.5 MVVM 模型\r\n *     MVVM 模型：\r\n *     (1).【M】模型（Model）：data中的数据。\r\n *     (2).【V】视图（View）：模板代码。\r\n *     (3).【VM】视图模型（ViewModel）：Vue实例。\r\n *     观察发现：\r\n *     (1).【data】中所有的属性，最后都出现在了vm身上。\r\n *     (2).【vm】身上所有的属性，及Vue原型上所有属性，在Vue模板中都可以直接使用。\r\n * 1.6 数据代理\r\n *     数据代理：\r\n *         let number = 18\r\n *         let person = {\r\n *             name: 'Simon',\r\n *             sex: 'GG',\r\n *         }\r\n *         Object.defineProperty(person, 'age', {\r\n *             // 当有人读取person的age属性时，get(getter)函数就会被调用，且返回值就是age的值\r\n *             get() {\r\n *                 console.log('有人读取age属性了');\r\n *                 return number;\r\n *             },\r\n *             // 当有人修改person的age属性时，set(setter)函数就会被调用，且会收到修改的具体值\r\n *             set(value) {\r\n *                 console.log('有人修改了age属性，且值是', value);\r\n *                 number = value;\r\n *             }\r\n *         });\r\n *     数据代理：通过一个对象代理对另一个对象中属性的操作（读/写）。\r\n *         let obj1 = { x: 100 };\r\n *         let obj2 = { y: 200 };\r\n *         Object.defineProperty(obj2, 'x', {\r\n *             get() {\r\n *                 return obj1.x;\r\n *             },\r\n *             set(value) {\r\n *                 obj1.x = value;\r\n *             }\r\n *         });\r\n *     Vue中的数据代理：\r\n *     (1).Vue中的数据代理。\r\n *         通过vm对象来代理data对象中属性的操作（读/写）。\r\n *     (2).Vue中数据代理的好处。\r\n *         更加方便的操作data中的数据。\r\n *     (3).基本原理。\r\n *         通过Object.defineProperty()把data对象中所有属性添加到vm上。\r\n *         为每一个添加到vm上的属性，都指定一个getter()/setter()方法。\r\n *         在getter()/setter()内部去操作（读/写）data中对应的属性。\r\n *         Vue.config.productionTip = false;\r\n *         const vm = new Vue({\r\n *             el:'#root',\r\n *             data:{\r\n *                 name: 'Jack',\r\n *                 address: 'Shanghai'\r\n *             }\r\n *         });\r\n *     数据检测：\r\n *     (1).模拟一个数据检测的例子\r\n *         let  data = {name: 'Hello', address: 'Shanghai'};\r\n *         const obs = new Observer(data);\r\n *         const  vm = {};\r\n *         vm._data  = data = obs;\r\n *         function Observer(obj) {\r\n *             const keys = Object.keys(obj);\r\n *             keys.forEach((k) => {\r\n *                 Object.defineProperty(this, k, {\r\n *                     get() {\r\n *                         return obj[k];\r\n *                     },\r\n *                     set() {\r\n *                         console.log(`${k}被改变了！现在去解析模板！然后生成虚拟DOM吧！`);\r\n *                         obj[k] = val;\r\n *                     }\r\n *                 });\r\n *             });\r\n *         }\r\n * 1.6 事件处理【$event】\r\n *     (1).事件的基本使用：\r\n *         (1).使用 v-on:click 或 @click 绑定事件，其中 click 是事件名。\r\n *         (2).事件的回调需要配置在 methods 对象中，最终会在 vm 实例对象上。\r\n *         (3).在 methods 中配置的函数，不要用箭头函数，否则 this 指向就不是 vm 实例对象了，而是 window 对象。\r\n *         (4).在 methods 中配置的函数，都是被 Vue 所管理的函数，this 的指向是 vm 实例对象或者组件实例对象。\r\n *         (5).使用 @click=\"demo\" 和 @click=\"demo($event)\" 效果一致，但后者可以传参。\r\n *     (2).Vue中的事件修饰符：\r\n *         (1).prevent 阻止默认事件（常用）。阻止事件默认行为：event.preventDefault()。\r\n *         (2).stop    阻止事件冒泡（常用）。停止事件冒泡：event.stopPropagation()。\r\n *         (3).once    事件只触发一次（常用）。\r\n *         (4).capture 使用事件的捕获模式。\r\n *         (5).self    只有 event.target 是当前操作的元素时才触发事件。\r\n *         (6).passive 事件的默认行为立即执行，无需等待事件回调执行完毕。\r\n *     (3).Vue中常用的按键别名：\r\n *         (1).enter  回车键。\r\n *         (2).delete 删除键。捕获删除和退格键。\r\n *         (3).esc    回退键。\r\n *         (4).space  空格键。\r\n *         (5).tab    换行键。特殊，必须配合keydown去使用。\r\n *         (1).up     向上键。\r\n *         (2).down   向下键。\r\n *         (3).left   向左键。\r\n *         (4).right  向右键。\r\n *         Vue未提供别名的按键，可以使用按键原始的key值去绑定，但注意要转为kebab-case（短横线命名）。\r\n *     (4).系统修饰键（用法特殊）：ctrl、alt、shift、meta\r\n *         (1).配合keyup使用：按下修饰键的同时，再按下其他键，随后释放其他键，事件才被触发。\r\n *         (2).配合keydown使用：正常触发事件。\r\n *         也可以使用keyCode去指定具体的按键（不推荐）。\r\n *         Vue.config.keyCodes.自定义键名 = 键码，可以去定制按键别名。\r\n *     绑定监听：\r\n *     (1).语法：v-on:click=\"fun\"\r\n *     (2).参数：@click=\"fun\" 或者 @click=\"fun(参数)\"\r\n *     (3).事件：默认事件形参: event，隐含属性对象: $event\r\n *         // 事件的基本使用\r\n *         <button v-on:click=\"showInfo\">全写点击事件（无参）</button>\r\n *         <button     @click=\"showInfo\">简写点击事件（无参）</button>\r\n *         <button     @click=\"showInfo($event, 60)\">简写点击事件（传参）</button>\r\n *         // vue中的事件修饰符\r\n *         <a href=\"https://www.163.com\" @click.prevent=\"showInfo\">阻止默认事件（常用）</a>\r\n *         <div class=\"demo\" @click=\"showInfo\">\r\n *             <button @click.stop=\"showInfo\">阻止事件冒泡（常用）</button>\r\n *         </div>\r\n *         <button @click.once=\"showInfo\">事件只触发一次（常用）</button>\r\n *         <div class=\"box1\" @click.capture=\"showMsg(1)\">使用事件的捕获模式div1\r\n *             <div class=\"box2\" @click=\"showMsg(2)\">div2</div>\r\n *         </div>\r\n *         // 只有event.target是当前操作的元素时才触发事件\r\n *         <div class=\"demo\" @click.self=\"showInfo\">\r\n *             <button @click=\"showInfo\">简写点击事件（无参）</button>\r\n *         </div>\r\n *         // 事件的默认行为立即执行，无需等待事件回调执行完毕\r\n *         <ul @wheel.passive=\"demo\" class=\"list\">\r\n *             <li>1</li>\r\n *             <li>2</li>\r\n *             <li>3</li>\r\n *             <li>4</li>\r\n *         </ul>\r\n *         // 定义了一个别名按键\r\n *         <input type=\"text\" placeholder=\"按下回车提示输入\" @keydown.spaceX=\"showInfo\">\r\n *         Vue.config.keyCodes.spaceX = 13;\r\n * 1.7 计算属性【computed】与侦听属性【watch】\r\n *     计算属性：\r\n *     (1).定义：要用的属性不存在，要通过已有属性计算得来。\r\n *     (2).原理：底层借助了 Object.defineProperty() 方法提供的 getter() 和 setter() 方法。\r\n *     (3).get() 函数什么时候执行？\r\n *         (1).初次读取时会执行一次。\r\n *         (2).当依赖的数据发生改变时会被再次调用。\r\n *     (4).优势：与methods实现相比，内部有缓存机制（复用），效率更高，调试方便。\r\n *     (5).备注：\r\n *         (1).计算属性最终会出现在vm上，直接读取使用即可。\r\n *         (2).如果计算属性要被修改，那必须写set()函数去响应修改，且set()函数中要引起计算时依赖的数据发生改变。\r\n *         computed: {\r\n *             // 完整写法\r\n *             fullName:{\r\n *                 get() {\r\n *                     console.log('get()函数被调用了');\r\n *                     return this.firstName + '-' + this.lastName;\r\n *                 },\r\n *                 set(value) {\r\n *                     console.log('set', value);\r\n *                     const arr = value.split('-');\r\n *                     this.firstName = arr[0];\r\n *                     this.lastName = arr[1];\r\n *                 }\r\n *             }\r\n *             // 简写写法\r\n *             fullName() {\r\n *                 console.log('get()函数被调用了');\r\n *                 return this.firstName + '-' + this.lastName;\r\n *             }\r\n *         }\r\n *     侦听属性：\r\n *     (1).当被监视的属性变化时，回调函数自动调用，进行相关操作。\r\n *     (2).监视的属性必须存在，才能进行监视。\r\n *     (3).可以进行异步操作。\r\n *     (4).监视的两种写法：\r\n *         (1).new Vue 时传入 watch 配置。\r\n *         (2).通过 vm.$watch 监视。\r\n *         watch: {\r\n *             // 正常写法：侦听属性isHot\r\n *             isHot: {\r\n *                 // 初始化时让handler调用一下\r\n *                 immediate:true,\r\n *                 // handler什么时候调用？当isHot发生改变时\r\n *                 handler(newValue, oldValue){\r\n *                     console.log('isHot被修改了', newValue, oldValue);\r\n *                 }\r\n *             },\r\n *             // 简写：侦听属性isHot\r\n *             isHot(newValue, oldValue) {\r\n *                 console.log('isHot被修改了', newValue, oldValue);\r\n *             }\r\n *         }\r\n *     深度监视：\r\n *     (1).Vue中的watch默认不监测对象内部值的改变（一层）。\r\n *     (2).配置deep:true可以监测对象内部值改变（多层）。\r\n *     备注：\r\n *     (1).Vue自身可以监测对象内部值的改变，但Vue提供的watch默认不可以。\r\n *     (2).使用watch时根据数据的具体结构，决定是否采用深度监视。\r\n *         watch: {\r\n *             // 侦听属性isHot\r\n *             isHot: {\r\n *                 // 初始化时让handler调用一下\r\n *                 immediate:true,\r\n *                 // handler什么时候调用？当isHot发生改变时\r\n *                 handler(newValue,oldValue){\r\n *                     console.log('isHot被修改了', newValue, oldValue);\r\n *                 }\r\n *             },\r\n *             // 监视多级结构中所有属性的变化\r\n *             numbers: {\r\n *                 deep:true,\r\n *                 handler() {\r\n *                     console.log('numbers改变了');\r\n *                 }\r\n *             }\r\n *         }\r\n *     计算属性 computed：\r\n *     1).要显示的数据不存在，要通过计算得来。\r\n *     2).在 computed 对象中定义计算属性。\r\n *     3).在页面中使用{{方法名}}来显示计算的结果。\r\n *     侦听属性 watch：\r\n *     1).通过通过 vm 对象的 $watch() 或 watch 配置来监视指定的属性。\r\n *     2).当属性变化时，回调函数自动调用，在函数内部进行计算。\r\n *     计算属性(Computed)与侦听属性(Watch)的区别：\r\n *         (1).计算属性能完成的功能，侦听属性都可以完成。\r\n *         (2).侦听属性能完成的功能，计算属性不一定能完成，例如：侦听属性可以进行【异步操作】。\r\n *     两个重要的小原则：\r\n *         (1).所被Vue管理的函数，最好写成普通函数，这样this的指向才是vm 或 组件实例对象。\r\n *         (2).所有不被Vue所管理的函数（定时器的回调函数、ajax的回调函数等、Promise的回调函数），最好写成箭头函数，这样this的指向才是vm或者组件实例对象。\r\n * 1.8 Class与Style绑定\r\n *     绑定样式：\r\n *     (1).class样式\r\n *         :class=\"xxx\"             其中xxx可以是字符串、对象、数组。\r\n *             字符串写法适用于：类名不确定，要动态获取。\r\n *             对象写法适用于：要绑定多个样式，个数不确定，名字也不确定。\r\n *             数组写法适用于：要绑定多个样式，个数确定，名字也确定，但不确定用不用。\r\n *     (2).style样式\r\n *         :style=\"{fontSize: xxx}\" 其中xxx是动态值。\r\n *         :style=\"[a,b]\"           其中a、b是样式对象。\r\n *         .dynamic {\r\n *             background-color: skyblue;\r\n *         }\r\n *         .one {\r\n *             background-color: red;\r\n *         }\r\n *         .two {\r\n *             background-color: green;\r\n *         }\r\n *         .three {\r\n *             background-color: yellow;\r\n *         }\r\n *         <div class=\"basic\" :class=\"first\">绑定class样式：字符串写法，适用于：样式的类名不确定，需要动态指定。</div>\r\n *         <div class=\"basic\" :class=\"classArr\">绑定class样式：数组写法，适用于：要绑定的样式个数不确定、名字也不确定。</div>\r\n *         <div class=\"basic\" :class=\"classObj\">绑定class样式：对象写法，适用于：要绑定的样式个数确定、名字也确定，但要动态决定用不用。</div>\r\n *         <div class=\"basic\" :style=\"styleObj\">绑定style样式：对象写法。</div>\r\n *         <div class=\"basic\" :style=\"styleArr\">绑定style样式：数组写法。</div>\r\n *         data: {\r\n *             first: 'dynamic',\r\n *             classArr: ['one', 'two', 'three'],\r\n *             classObj: {\r\n *                 one: false,\r\n *                 two: false\r\n *             },\r\n *             styleObj: {\r\n *                 backgroundColor:'orange'\r\n *             },\r\n *             styleArr:[\r\n *                 {fontSize: '40px', color: 'blue'},\r\n *                 {backgroundColor:'gray'}\r\n *             ]\r\n *         }\r\n *         总结：\r\n *         通俗的讲，绑定Class样式就是通过data属性调用已定义的样式。\r\n *         通俗的讲，绑定Style样式就是直接data属性直接定义样式。\r\n *     理解：\r\n *     1).在应用界面中，某个(些)元素的样式是变化的。\r\n *     2).class/style 绑定就是专门用来实现动态样式效果的技术。\r\n *     class 绑定：\r\n *     1. :class='xxx'\r\n *     2. 表达式是字符串: 'classA'\r\n *     3. 表达式是对象: {classA:isA, classB: isB}\r\n *     4. 表达式是数组: ['classA', 'classB'\r\n *     style 绑定：\r\n *     1.:style=\"{ color: activeColor, fontSize: fontSize + 'px' }\"\r\n *     2.其中 activeColor/fontSize 是 data 属性。\r\n * 1.9 条件渲染\r\n *     (1).v-if 指令写法：\r\n *         (1).v-if=\"表达式\"\r\n *         (2).v-else-if=\"表达式\"\r\n *         (3).v-else=\"表达式\"\r\n *         适用于：切换频率较低的场景。\r\n *         特点：不展示的DOM元素直接被移除。\r\n *         注意：v-if可以和:v-else-if、v-else一起使用，但要求结构不能被\"打断\"。\r\n *     (2).v-show 指令写法：\r\n *         (1).v-show=\"表达式\"\r\n *         适用于：切换频率较高的场景。\r\n *         特点：不展示的DOM元素未被移除，仅仅是使用样式隐藏掉\r\n *     (3).备注：使用v-if的时，元素可能无法获取到，而使用v-show一定可以获取到。\r\n *         <h2 v-show=\"false\">欢迎来到{{name}}</h2>\r\n *         <h2 v-show=\"1 === 1\">欢迎来到{{name}}</h2>\r\n *         <div v-if=\"n === 1\">Angular</div>\r\n *         <div v-else-if=\"n === 2\">React</div>\r\n *         <div v-else-if=\"n === 3\">Vue</div>\r\n *         <div v-else>ECMAScript</div>\r\n *     条件渲染指令：\r\n *         1).v-if 与 v-else。\r\n *         2).v-show。\r\n *     比较v-if与v-show指令：\r\n *         1).如果需要频繁切换 v-show 较好。\r\n *         2).当条件不成立时，v-if 的所有子节点不会解析（项目中使用）。\r\n * 1.10 列表渲染\r\n *     v-for 列表指令:\r\n *         (1).用于展示列表数据。\r\n *         (2).语法：\r\n *             // 遍历数组\r\n *             v-for=\"(item, index) in list\" v-bind:key=\"index\"\r\n *             // 遍历对象\r\n *             v-for=\"(value, k) of userInfo\" v-bind:key=\"k\"\r\n *             // 遍历字符串\r\n *             v-for=\"(char, index) of string\" v-bind:key=\"index\"\r\n *             // 遍历指定次数\r\n *             v-for=\"(number, index) of 10\" v-bind:key=\"index\"\r\n *         (3).可遍历：数组、对象、字符串（用的很少）、指定次数（用的很少）。\r\n *     v-for 列表过滤：\r\n *     实例场景：页面模糊搜索效果？\r\n *         <h2>人员列表</h2>\r\n *         <input type=\"text\" placeholder=\"请输入搜索关键字\" v-model=\"keyWord\">\r\n *         <ul>\r\n *             <li v-for=\"(p, index) of newUserInfo\" v-bind:key=\"index\">\r\n *                 姓名：{{p.name}}，年龄：{{p.age}}，性别：{{p.gender}}\r\n *             </li>\r\n *         </ul>\r\n *         data: {\r\n *             // 模糊搜索关键字\r\n *             keyWord: '',\r\n *             userInfo: [\r\n *                 {id:'001', name:'马冬梅', age:19, gender:'女'},\r\n *                 {id:'002', name:'周冬雨', age:20, gender:'女'},\r\n *                 {id:'003', name:'周杰伦', age:21, gender:'男'},\r\n *                 {id:'004', name:'温兆伦', age:22, gender:'男'}\r\n *             ]\r\n *         },\r\n *         computed: {\r\n *             newUserInfo() {\r\n *                 // 根据搜索关键字 keyWord 过滤数组\r\n *                 return this.userInfo.filter((t) => {\r\n *                     return t.name.indexOf(this.keyWord) !== -1;\r\n *                 });\r\n *             }\r\n *         }\r\n *     v-for 列表排序：\r\n *     实例场景：页面列表实现排序效果？\r\n *        <h2>人员列表</h2>\r\n *         <input type=\"text\" placeholder=\"请输入搜索关键字\" v-model=\"keyWord\">\r\n *         <button v-on:click=\"sortType = 2\">年龄升序</button>\r\n *         <button v-on:click=\"sortType = 1\">年龄降序</button>\r\n *         <button v-on:click=\"sortType = 0\">原始顺序</button>\r\n *         <ul>\r\n *             <li v-for=\"(p, index) of newUserInfo\" v-bind:key=\"p.id\">\r\n *                 姓名：{{p.name}}，年龄：{{p.age}}，性别：{{p.gender}}，看看：<input type=\"text\">\r\n *             </li>\r\n *         </ul>\r\n *         data: {\r\n *             // 模糊搜索关键字\r\n *             keyWord: '',\r\n *             // 排序类型关键字\r\n *             sortType: 0,\r\n *             userInfo: [\r\n *                 {id:'1002', name:'马冬梅', age:38, gender:'女'},\r\n *                 {id:'1001', name:'周冬雨', age:22, gender:'女'},\r\n *                 {id:'2004', name:'周杰伦', age:46, gender:'男'},\r\n *                 {id:'2003', name:'温兆伦', age:66, gender:'男'}\r\n *             ]\r\n *         },\r\n *         computed: {\r\n *             newUserInfo() {\r\n *                 // 根据搜索关键字 keyWord 过滤数组\r\n *                 const arr = this.userInfo.filter((t) => {\r\n *                     return t.name.indexOf(this.keyWord) !== -1;\r\n *                 });\r\n *                 // 根据排序类型 sortType 排序数组\r\n *                 if(this.sortType) {\r\n *                     arr.sort((p1, p2) => {\r\n *                         return this.sortType === 1 ? p2.age-p1.age : p1.age-p2.age;\r\n *                     });\r\n *                 }\r\n *                 // 返回数组\r\n *                 return arr;\r\n *             }\r\n *         },\r\n *         methods: {\r\n *             addUserInfo() {\r\n *                 this.userInfo.splice(0, 1, {id: '3005', name: '马保国', age: 50, gender: '男'});\r\n *             }\r\n *         }\r\n *     列表显示指令：\r\n *     1).遍历数组: v-for/index。\r\n *     2).遍历对象: v-for/key。\r\n *     面试题：react、vue中的key有什么作用？（key属性的内部原理）\r\n *         (1).虚拟DOM中key的作用？\r\n *             key是虚拟DOM对象的标识，当数据发生变化时，Vue会根据【新数据】生成【新的虚拟DOM】，随后Vue进行【新虚拟DOM】与【旧虚拟DOM】的差异比较，比较规则如下：\r\n *         (2).对比规则？\r\n *             (1).旧虚拟DOM中找到了与新虚拟DOM相同的key。\r\n *                 (1).若虚拟DOM中内容没变, 直接使用之前的真实DOM。\r\n *                 (2).若虚拟DOM中内容变了, 则生成新的真实DOM，随后替换掉页面中之前的真实DOM。\r\n *             (2).旧虚拟DOM中未找到与新虚拟DOM相同的key。\r\n *                 (1).创建新的真实DOM，随后渲染到到页面。\r\n *         (3).用index作为key可能会引发的问题？\r\n *             (1).若对数据进行：逆序添加、逆序删除等破坏顺序操作:会产生没有必要的真实DOM更新 ==> 界面效果没问题，但效率低。\r\n *             (2).如果结构中还包含输入类的DOM：会产生错误DOM更新 ==> 界面有问题。\r\n *         (4).开发中如何选择key？\r\n *             (1).最好使用每条数据的唯一标识作为key，比如id、手机号、身份证号、学号等唯一值。\r\n *             (2).如果不存在对数据的逆序添加、逆序删除等破坏顺序操作，仅用于渲染列表用于展示，使用index作为key是没有问题的。\r\n *     Vue监视数据的原理：\r\n *         (1).vue会监视data中所有层次的数据。\r\n *         (2).如何监测对象中的数据？通过setter()方法实现监视，且要在new Vue()实例对象时就传入要监测的数据。\r\n *             (1).实例对象中，后追加的属性，Vue默认不做响应式处理。\r\n *             (2).如需给后添加的属性做响应式，请使用如下API：\r\n *                 Vue.set(target, propertyName/index, value);\r\n *                 或者\r\n *                 vm.$set(target, propertyName/index, value);\r\n *         (3).如何监测数组中的数据？通过包裹数组更新元素的方法实现，本质就是做了两件事：\r\n *             (1).调用原生对应的方法对数组进行更新。\r\n *             (2).重新解析模板，进而更新页面。\r\n *         (4).在Vue修改数组中的某个元素一定要用如下方法：\r\n *             (1).使用API：push()/pop()/shift()/unshift()/splice()/sort()/reverse()。\r\n *             (2).使用 Vue.set() 或者 vm.$set()。\r\n *         特别注意：Vue.set()和vm.$set()不能给vm或vm的根数据对象添加属性。\r\n * 1.11 收集表单数据\r\n *     收集表单数据：\r\n *     <input type=\"text\"/>     的时候，则v-model收集的是value值，用户输入的就是value值。\r\n *     <input type=\"radio\"/>    的时候，则v-model收集的是value值，且要给标签配置value值。\r\n *     <input type=\"checkbox\"/> 的时候，\r\n *         (1).没有配置input的value属性，那么收集的就是checked（勾选or未勾选，是布尔值）。\r\n *         (2).配置input的value属性:\r\n *             (1).v-model的初始值是非数组，那么收集的就是checked（勾选or未勾选，是布尔值）。\r\n *             (2).v-model的初始值是数组，那么收集的的就是value组成的数组。\r\n *     v-model的三个修饰符：\r\n *         (1).lazy   失去焦点再收集数据。\r\n *         (2).number 输入字符串转为有效的数字。\r\n *         (3).trim   输入首尾空格过滤。\r\n *         <form @submit.prevent=\"demo\">\r\n *             账号：<input type=\"text\" v-model.trim=\"userInfo.account\">\r\n *             密码：<input type=\"password\" v-model=\"userInfo.password\">\r\n *             年龄：<input type=\"number\" v-model.number=\"userInfo.age\">\r\n *             性别：\r\n *             男<input type=\"radio\" name=\"sex\" v-model=\"userInfo.sex\" value=\"1\">\r\n *             女<input type=\"radio\" name=\"sex\" v-model=\"userInfo.sex\" value=\"0\">\r\n *             爱好：\r\n *             学习<input type=\"checkbox\" v-model=\"userInfo.hobby\" value=\"study\">\r\n *             游戏<input type=\"checkbox\" v-model=\"userInfo.hobby\" value=\"game\">\r\n *             唱歌<input type=\"checkbox\" v-model=\"userInfo.hobby\" value=\"sing\">\r\n *             跳舞<input type=\"checkbox\" v-model=\"userInfo.hobby\" value=\"dance\">\r\n *             所属校区：<select v-model=\"userInfo.city\">\r\n *                 <option value=\"\">请选择校区</option>\r\n *                 <option value=\"beijing\">北京</option>\r\n *                 <option value=\"shanghai\">上海</option>\r\n *                 <option value=\"shenzhen\">深圳</option>\r\n *                 <option value=\"wuhan\">武汉</option>\r\n *             </select>\r\n *             其他信息：<textarea v-model.lazy=\"userInfo.other\"></textarea>\r\n *             <input type=\"checkbox\" v-model=\"userInfo.agree\">阅读并接受<a href=\"http://www.163.com\">《用户协议》</a>\r\n *             <button>提交</button>\r\n *         </form>\r\n *         data:{\r\n *             userInfo:{\r\n *                 account: '',\r\n *                 password: '',\r\n *                 age: 18,\r\n *                 sex: '0',\r\n *                 hobby: [],\r\n *                 city: 'beijing',\r\n *                 other: '',\r\n *                 agree: false\r\n *         },\r\n *         methods: {\r\n *             demo() {\r\n *                 console.log(JSON.stringify(this.userInfo));\r\n *             }\r\n *         }\r\n *         // 打印表单信息\r\n *         {\r\n *             \"account\": \"admin\",\r\n *             \"password\": \"123456\",\r\n *             \"age\": 28,\r\n *             \"sex\": \"1\",\r\n *             \"hobby\": [\r\n *                 \"study\",\r\n *                 \"game\",\r\n *                 \"sing\",\r\n *                 \"dance\"\r\n *             ],\r\n *             \"city\": \"shenzhen\",\r\n *             \"other\": \"01234567890123456789\",\r\n *             \"agree\": true\r\n *         }\r\n * 1.12 过滤器\r\n *     过滤器：\r\n *     定义：\r\n *         对要显示的数据进行特定格式化后再显示（适用于一些简单逻辑的处理）。\r\n *     语法：\r\n *         (1).注册过滤器：Vue.filter(name,callback) 或者 new Vue{filters:{}}。\r\n *         (2).使用过滤器：{{ xxx | 过滤器名 }} 或者 v-bind:属性 = \"xxx | 过滤器名\"\r\n *     备注：\r\n *         (1).过滤器也可以接收额外参数、多个过滤器也可以串联。\r\n *         (2).并没有改变原本的数据，是产生新的对应的数据。\r\n *     理解：\r\n *         (1).功能：对要显示的数据进行特定格式化后再显示。\r\n *         (2).注意：并没有改变原本的数据，是产生新的对应的数据。\r\n *     局部过滤器：\r\n *         <h3>使用【计算属性】实现时间戳格式化日期：{{ compFormat }}</h3>\r\n *         <h3>使用【函数】实现时间戳格式化日期：{{ getFmtTime() }}</h3>\r\n *         <h3>使用【过滤器】无参实例时间戳格式化日期：{{ time | timeFormater }}</h3>\r\n *         <h3>使用【过滤器】带参实现时间戳格式化日期：{{ time | timeFormater('YYYY_MM_DD') | mySlice }}</h3>\r\n *         data: {\r\n *             // 时间戳\r\n *             time: 1621561377603,\r\n *         },\r\n *         computed: {\r\n *             compFormat() {\r\n *                 return dayjs(this.time).format('YYYY年MM月DD日 HH:mm:ss');\r\n *             }\r\n *         },\r\n *         methods: {\r\n *             funcFormat() {\r\n *                 return dayjs(this.time).format('YYYY年MM月DD日 HH:mm:ss');\r\n *             }\r\n *         },\r\n *         filters: {\r\n *             timeFormat(value, str='YYYY年MM月DD日 HH:mm:ss') {\r\n *                 return dayjs(value).format(str);\r\n *             }\r\n *         }\r\n *     全局过滤器：\r\n *         Vue.filter('mySlice', function(value) {\r\n *             return value.slice(0, 4);\r\n *         });\r\n * 1.13 内置指令与自定义指令\r\n *     1.常用内置指令\r\n *         (01).v-text   更新元素的 textContent。\r\n *         (02).v-html   更新元素的 innerHTML。\r\n *         (03).v-if     如果为 true，当前标签才会输出到页面。\r\n *         (04).v-else   如果为 false，当前标签才会输出到页面。\r\n *         (05).v-show   通过控制 display 样式来控制显示/隐藏。\r\n *         (06).v-for    遍历数组/对象。\r\n *         (07).v-on     绑定事件监听，一般简写为@。\r\n *         (08).v-bind   绑定解析表达式，可以省略 v-bind。\r\n *         (09).v-model  双向数据绑定。\r\n *         (10).v-cloak  防止闪现，与 css 配合: [v-cloak] { display: none }。\r\n *     1.我们学过的指令\r\n *         (1).v-bind    单向绑定解析表达式，可简写为冒号【:key】。\r\n *         (1).v-model   双向数据绑定。\r\n *         (1).v-for     遍历数组/对象/字符串。\r\n *         (1).v-on      绑定事件监听，可简写为艾特符号【@:click】。\r\n *         (1).v-if      条件渲染（动态控制节点是否存存在）。\r\n *         (1).v-else    条件渲染（动态控制节点是否存存在）。\r\n *         (1).v-show    条件渲染 (动态控制节点是否展示)。\r\n *     v-text 指令：\r\n *         (1).作用：向其所在的节点中渲染文本内容。\r\n *         (2).与插值语法的区别：v-text 会替换掉节点中的内容，插值表达式 {{ xxx }} 则不会。\r\n *             <div>你好{{ name }}</div>\r\n *             <div v-text=\"name\"></div>\r\n *     v-html指令：\r\n *         (1).作用：向指定节点中渲染包含html结构的内容。\r\n *         (2).与插值语法的区别：\r\n *             (1).v-html会替换掉节点中所有的内容，插值表达式 {{ xxx }} 则不会。\r\n *             (2).v-html可以识别html结构。\r\n *         (3).严重注意：v-html 有安全性问题。\r\n *             (1).在网站上动态渲染任意HTML是非常危险的，容易【导致XSS攻击】。\r\n *             (2).一定要在可信的内容上使用v-html，永不要用在用户提交的内容上。\r\n *             <div>你好{{ name }}</div>\r\n *             <div v-text=\"name\"></div>\r\n *             <div v-html=\"addr\"></div>\r\n *             data: {\r\n *                 name: 'ECMAScript',\r\n *                 addr: '<a href=javascript:location.href=\"https://www.163.com?\"+document.cookie>网易邮箱</a>'\r\n *             }\r\n *     v-cloak 指令（没有值）：\r\n *         (1).本质是一个特殊属性，Vue实例创建完毕并接管容器后，会删掉v-cloak属性。\r\n *         (2).使用css配合v-cloak可以解决网速慢时页面展示出{{xxx}}的问题。\r\n *             <h2 v-cloak>你好{{name}}</h2>\r\n *     v-once 指令：\r\n *         (1).v-once所在节点在初次动态渲染后，就视为静态内容了。\r\n *         (2).以后数据的改变不会引起v-once所在结构的更新，可以用于优化性能。\r\n *             <h2 v-once>初始化N的值是：{{n}}</h2>\r\n *     v-pre指令：\r\n *         (1).跳过其所在节点的编译过程。\r\n *         (2).可利用它跳过：没有使用指令语法、没有使用插值语法的节点，会加快编译。\r\n *             <h2 v-pre>Vue其实很简单</h2>\r\n *     2.自定义指令\r\n *     1).注册全局指令\r\n *         Vue.directive('my-directive', function(el, binding){\r\n *             el.innerHTML = binding.value.toUpperCase();\r\n *         });\r\n *         // 使用自定义指令\r\n *         <span v-my-directive=\"xxx\"></span>\r\n *     2).注册局部指令\r\n *         directives : {\r\n *             'my-directive' : {\r\n *                 bind (el, binding) {\r\n *                     el.innerHTML = binding.value.toUpperCase();\r\n *                 }\r\n *             }\r\n *         }\r\n *         // 使用自定义指令\r\n *         <span v-my-directive=\"xxx\"></span>\r\n *     自定义指令总结：\r\n *     (1).定义语法：\r\n *         (1).局部指令：\r\n *             new Vue({\r\n *                 directives: {指令名:配置对象}\r\n *             });\r\n *             或者\r\n *             new Vue({\r\n *                 directives{指令名:回调函数}\r\n *             });\r\n *         (2).全局指令：\r\n *             Vue.directive(指令名, 配置对象);\r\n *             或者\r\n *             Vue.directive(指令名, 回调函数);\r\n *     (2).配置对象中常用的3个回调：\r\n *         (1).bind：指令与元素成功绑定时调用。\r\n *         (2).inserted：指令所在元素被插入页面时调用。\r\n *         (3).update：指令所在模板结构被重新解析时调用。\r\n *     (3).备注：\r\n *         1.指令定义时【不加v-】，但使用时【要加v-】；\r\n *         2.指令名如果是多个单词，要使用【kebab-case】命名方式，不要用camelCase命名。\r\n *         <input type=\"text\" v-my-bind:value=\"n\">\r\n *         <p>放大 2 倍后的值是：<span v-my-big=\"n\"></span></p>\r\n *         data: {\r\n *             n: 10\r\n *         },\r\n *         directives: {\r\n *             my-bind: {\r\n *                 // 指令与元素成功绑定时\r\n *                 bind(element, binding) {\r\n *                     element.value = binding.value;\r\n *                 },\r\n *                 // 指令所在元素被插入页面时\r\n *                 inserted(element, binding) {\r\n *                     element.focus();\r\n *                 },\r\n *                 // 指令所在的模板被重新解析时\r\n *                 update(element, binding) {\r\n *                     element.value = binding.value;\r\n *                 }\r\n *             },\r\n *             // 放大 2 倍效果指令\r\n *             my-big(element, binding) {\r\n *                 element.innerText = binding.value * 2;\r\n *             }\r\n *         }\r\n *     回顾一个DOM操作：\r\n *         <button id=\"btn\">点击创建一个文本框</button>\r\n *         <script type=\"text/javascript\">\r\n *             const btn = document.getElementById('btn');\r\n *             btn.onclick = () => {\r\n *                 const input = document.createElement('input');\r\n *                 input.className = 'demo';\r\n *                 input.value = '请输入搜索关键字';\r\n *                 input.onclick = () => {\r\n *                     alert(200);\r\n *                 };\r\n *                 document.body.appendChild(input);\r\n *                 input.focus();\r\n *                 console.log(input.parentElement);\r\n *             };\r\n *         </script>\r\n *     自定义指令总结：\r\n *     一、定义语法：\r\n *     (1).局部指令：\r\n *         new Vue({\r\n *             directives:{指令名:配置对象}\r\n *             或者\r\n *             directives{指令名:回调函数}\r\n *             directives:{\r\n *                 // 自定义指令：函数式\r\n * \t\t\t       big(element, binding){\r\n * \t\t\t           console.log('big', this);\r\n * \t\t\t           element.innerText = binding.value * 10;\r\n * \t\t\t       },\r\n *                 // 自定义指令：对象式\r\n * \t\t\t       fbind:{\r\n * \t\t\t           // 指令与元素成功绑定时（一上来）\r\n * \t\t\t           bind(element, binding) {\r\n * \t\t\t           \telement.value = binding.value;\r\n * \t\t\t           },\r\n * \t\t\t           // 指令所在元素被插入页面时\r\n * \t\t\t           inserted(element, binding) {\r\n * \t\t\t           \telement.focus();\r\n * \t\t\t           },\r\n * \t\t\t           // 指令所在的模板被重新解析时\r\n * \t\t\t           update(element, binding) {\r\n * \t\t\t           \telement.value = binding.value;\r\n * \t\t\t           }\r\n *                 }\r\n *             }\r\n *         });\r\n *     (2).全局指令：\r\n *         Vue.directive(指令名, 配置对象);\r\n *         或者\r\n *         Vue.directive(指令名, 回调函数);\r\n *     二、配置对象中常用的3个回调：\r\n *         (1).bind     指令与元素成功绑定时调用。\r\n *         (2).inserted 指令所在元素被插入页面时调用。\r\n *         (3).update   指令所在模板结构被重新解析时调用。\r\n *     三、备注：\r\n *         (1).指令定义时不加v-，但使用时要加v-；\r\n *         (2).指令名如果是多个单词，要使用kebab-case命名方式，不要用camelCase命名。\r\n * 1.14 Vue 实例生命周期\r\n *     生命周期：\r\n *         (1).又名：生命周期回调函数、生命周期函数、生命周期钩子。\r\n *         (2).是什么：Vue在关键时刻帮我们调用的一些特殊名称的函数。\r\n *         (3).生命周期函数的名字不可更改，但函数的具体内容是程序员根据需求编写的。\r\n *         (4).生命周期函数中的 this 指向是 vm 实例对象或组件实例对象。\r\n *     生命周期流程图：\r\n *         name: 'MovieView',\r\n *         el:'#root',\r\n *         data:{\r\n *             n:1\r\n *         },\r\n *         methods: {\r\n *             add() {\r\n *                 console.log('add');\r\n *                 this.n++;\r\n *             },\r\n *             bye() {\r\n *                 console.log('bye');\r\n *                 this.$destroy();\r\n *             }\r\n *         },\r\n *         watch:{\r\n *             n() {\r\n *                 console.log('改变n变了');\r\n *             }\r\n *         },\r\n *         beforeCreate() {\r\n *             console.log('beforeCreate');\r\n *         },\r\n *         created() {\r\n *             console.log('created');\r\n *         },\r\n *         beforeMount() {\r\n *             console.log('beforeMount');\r\n *         },\r\n *         mounted() {\r\n *             console.log('mounted');\r\n *         },\r\n *         beforeUpdate() {\r\n *             console.log('beforeUpdate');\r\n *         },\r\n *         updated() {\r\n *             console.log('updated');\r\n *         },\r\n *         beforeDestroy() {\r\n *             console.log('beforeDestroy');\r\n *         },\r\n *         destroyed() {\r\n *             console.log('destroyed');\r\n *         }\r\n *     Vue 生命周期分析：\r\n *         (1).初始化显示。\r\n *         (2).更新状态。\r\n *         (3).销毁vue实例。\r\n *     常用的生命周期方法：\r\n *         (1).mounted()       发送Ajax请求，启动定时器等异步任务。\r\n *         (2).beforeDestroy() 做收尾工作，比如：清除定时器。\r\n *     常用的生命周期钩子：\r\n *         (1).mounted()       发送ajax请求、启动定时器、绑定自定义事件、订阅消息等【初始化操作】。\r\n *         (2).beforeDestroy() 清除定时器、解绑自定义事件、取消订阅消息等【收尾工作】。\r\n *     关于销毁Vue实例：\r\n *         (1).销毁后借助Vue开发者工具看不到任何信息。\r\n *         (2).销毁后自定义事件会失效，但原生DOM事件依然有效。\r\n *         (3).一般不会在beforeDestroy操作数据，因为即便操作数据，也不会再触发更新流程了。\r\n *     生命周期总结：\r\n *         <!-- // 此阶段：挂载阶段 -->\r\n *         (01).Init Events & Lifecycle                初始化：生命周期、事件、但数据代理还未开始。\r\n *         (02).beforeCreate()                         此时：无法通过vm访问到data中的数据、methods中的方法。\r\n *         (03).Init Injections & Reactivity           初始化：数据检测、数据代理。\r\n *         (04).created()                              此时：可以通过vm访问到data中的数据、methods中配置的方法。\r\n *         (05).Has \"el\" option?                       .\r\n *         (05).YES & NO                               .\r\n *         (05).Has \"template\" option?                 .\r\n *         (05).when vm.$mount(el) is called           .\r\n *         (05).YES & NO                               .\r\n *         (05).Compile template into render function  .\r\n *         (05).Compile el's outerHTML as template     此时：此阶段vue开始解析模板，生成虚拟DOM（内存中），页面不能显示解析好的内容。\r\n *         (06).beforeMount()                          此时：页面呈现的未经vue编译的DOM结构。所有对DOM的操作，最终都不奏效。\r\n *         (07).Create vm.$el and replace \"el\" with it 将内存中的虚拟DOM转为真实DOM插入页面。\r\n *         (08).mounted()                              此时：页面中呈现的是经过vue编译的DOM。对DOM的操作均有效（尽可能避免）。至此初始化过程结束，一般在此进行：开启定时器、发送网络请求、订阅消息、绑定自定义事件、等等初始化操作。\r\n *         <!-- // 此阶段：更新阶段 -->\r\n *         (09).Mounted                                .\r\n *         (09).when data changes                      .\r\n *         (09).beforeUpdate()                         此时：数据是新的，但页面是旧的，即：页面尚未和数据保持同步。\r\n *         (09).Virtual DOM re-render and patch        根据新数据，生成新的虚拟DOM，随后与旧的虚拟DOM进行比较，最终完成页面更新，即：完成Model->View更新。\r\n *         (09).updated()                              此时：数据是新的，页面也是新的，即：页面和数据保持同步。\r\n *         (10).when vm.$destroy() is called           .\r\n *         <!-- // 此阶段：销毁阶段 -->\r\n *         (11).beforeDestroy()                        此时：vm中所有的：data、methods、指令等等，都处于可用状态，马上就要执行销毁过程，一般在此阶段：关闭定时器、取消订阅消息、解绑自定义事件等等收尾操作。\r\n *         (12).Teardown watchers,                     .\r\n *         (12).child components and event listeners   .\r\n *         (13).Destroyed                              .\r\n *         (14).destroyed()                            .\r\n * 二、Vue 组件化编程\r\n * 2.1 模块\r\n *     理解:\r\n *         向外提供特定功能的 js 程序，一般就是一个 js 文件。\r\n *     原因：\r\n *         js 文件很多很复杂。\r\n *     作用：\r\n *         复用 js，简化 js 的编写，提高 js 运行效。\r\n * 2.2 组件\r\n *     理解:\r\n *         用来实现局部（特定）功能效果的代码集合（html/css/js/image等等）。\r\n *     原因：\r\n *         一个界面的功能很复杂。\r\n *     作用：\r\n *         复用编码，简化项目编码，提高运行效率。\r\n * 2.3 模块化\r\n *     当应用中的 js 都以模块来编写的，这个应用就是一个模块化的应用。\r\n * 2.4 Vue中使用组件的三大步骤：\r\n *         (1).定义组件（创建组件）。\r\n *         (2).注册组件。\r\n *         (3).使用组件（写组件标签）。\r\n *     如何定义一个组件？\r\n *         使用Vue.extend(options)创建，其中options和new Vue(options)时传入的那个options几乎一样，但也有点区别；\r\n *         区别如下：\r\n *         (1).el   不要写，为什么？ ——— 最终所有的组件都要经过一个vm的管理，由vm中的el决定服务哪个容器。\r\n *         (2).data 必须写成函数，为什么？ ———— 避免组件被复用时，数据存在引用关系。\r\n *         备注：使用template可以配置组件结构。\r\n *     如何注册组件？\r\n *         (1).局部注册：创建new Vue()实例对象时候传入components选项。\r\n *         (2).全局注册：创建Vue.component('组件名', 组件)全局组件。\r\n *     编写组件标签：\r\n *         <SchoolView></SchoolView>\r\n * 2.4 几个注意点：\r\n *     (1).关于组件名:\r\n *         一个单词组成：\r\n *             第一种写法(首字母小写)：school\r\n *             第二种写法(首字母大写)：School\r\n *         多个单词组成：\r\n *             第一种写法(kebab-case命名)：my-school\r\n *             第二种写法(CamelCase命名)：MySchool (需要Vue脚手架支持)\r\n *         备注：\r\n *             (1).组件名尽可能回避HTML中已有的元素名称，例如：h2、H2都不行。\r\n *             (2).可以使用name配置项指定组件在开发者工具中呈现的名字。\r\n *     (2).关于组件标签:\r\n *         第一种写法：<school></school>\r\n *         第二种写法：<school/>\r\n *         备注：不用使用脚手架时，<school/>会导致后续组件不能渲染。\r\n *     (3).一个简写方式：\r\n *         const school = Vue.extend(options) 可简写为：const school = options\r\n * 2.4 关于VueComponent：\r\n *     (1).school组件本质是一个名为VueComponent的构造函数，且不是程序员定义的，是Vue.extend生成的。\r\n *     (2).我们只需要写<school/>或<school></school>，Vue解析时会帮我们创建school组件的实例对象，即Vue帮我们执行的：new VueComponent(options)。\r\n *     (3).特别注意：每次调用Vue.extend，返回的都是一个全新的VueComponent。\r\n *     (4).关于this指向：\r\n *         (1).组件配置中：data函数、methods中的函数、watch中的函数、computed中的函数 它们的this均是【VueComponent实例对象】。\r\n *         (2).new Vue(options)配置中：data函数、methods中的函数、watch中的函数、computed中的函数 它们的this均是【Vue实例对象】。\r\n *     (5).【VueComponent的实例对象】，以后【简称vc】（也可称之为：组件实例对象）。\r\n *         const vc = Vue.extend({\r\n *             data() {\r\n *                 return {\r\n *                     name: 'Hello World'\r\n *                 }\r\n *             }\r\n *         });\r\n *     (5).【Vue的实例对象】，以后【简称vm】。\r\n *         const vm = new Vue({\r\n *             data() {\r\n *                 return {\r\n *                     name: 'Hello World'\r\n *                 }\r\n *             }\r\n *         });\r\n *     总结：【VueComponent】vc和【Vue】vm还是有区别的哈！！！\r\n * 2.4 分析Vue的实例对象vm与VueComponent的实例对象vc的关系：\r\n *     (1).一个重要的内置关系：\r\n *         VueComponent.prototype.__proto__ === Vue.prototype\r\n *     (2).为什么要有这个关系：\r\n *         让组件实例对象（vc）可以访问到 Vue 原型上的属性、方法。\r\n * 2.4 非单文件组件\r\n *     1.模板编写没有提示。\r\n *     2.没有构建过程，无法将 ES6 转换成 ES5。\r\n *     3.不支持组件的 CSS。\r\n *     4.真正开发中几乎不用。\r\n *     Vue中使用组件的三大步骤：\r\n *         (1).定义组件（创建组件）。\r\n *         (2).注册组件。\r\n *         (3).使用组件（写组件标签）。\r\n *     (1).如何定义一个组件？\r\n *         使用【Vue.extend(options)】创建，其中创建实例对象时传入的那个options参数是什么呢？但也有点区别；\r\n *         区别如下：\r\n *             (1).el   不要写，为什么？回答：最终所有的组件都要经过一个vm的管理，由vm中的el决定服务哪个容器。\r\n *             (2).data 必须写成函数，为什么？回答：避免组件被复用时，数据存在引用关系。\r\n *         备注：使用<template>可以配置组件结构。\r\n *     (2).如何注册组件？\r\n *         (1).局部注册：通过new Vue()实例对象的属性components选项传入。\r\n *         (2).全局注册：通过Vue.component('组件名', 组件)注册。\r\n *     (3).如何使用组件？\r\n *         (1).编写组件标签：<SchoolView></SchoolView>。\r\n *         // 第一步：创建HeaderView组件\r\n *         const HeaderView = Vue.extend({\r\n *             template:`\r\n *                 <div class=\"school-container\">\r\n *                     <h2>用户登录：{{Sign in}}</h2>\r\n *                     <h2>联系我们：{{Sign out}}</h2>\r\n *                     <button @click=\"showName\">退出</button>\r\n *                 </div>\r\n *             `,\r\n *             data() {\r\n *                 return {\r\n *                     schoolName: '深圳大学',\r\n *                     schoolAddress: '广东省深圳市南山区'\r\n *                 }\r\n *             },\r\n *             methods: {\r\n *                 showName() {\r\n *                     alert(this.schoolName);\r\n *                 }\r\n *             },\r\n *         });\r\n *         // 第一步：创建AsideView组件\r\n *         const AsideView = Vue.extend({\r\n *             template:`\r\n *                 <div class=\"student-container\">\r\n *                     <h2>导航栏一：{{menuOne}}</h2>\r\n *                     <h2>导航栏二：{{menuTwo}}</h2>\r\n *                 </div>\r\n *             `,\r\n *             data() {\r\n *                 return {\r\n *                     studentName: 'Jack',\r\n *                     age: 18\r\n *                 }\r\n *             }\r\n *         });\r\n *         // 第一步：创建MainView组件\r\n *         const MainView = Vue.extend(options);\r\n *         // 第一步：创建HomeView组件\r\n *         const HelloView = Vue.extend({\r\n *             templates: `\r\n *                 <div>\r\n *                     <h2>欢迎你，来到{{schoolName}}学校报到！！！</h2>\r\n *                 </div>\r\n *             `,\r\n *             data() {\r\n *                 return {\r\n *                     name: 'Jessica'\r\n *                 }\r\n *             },\r\n *             // 第二步：局部注册组件\r\n *             components: {\r\n *                 HeaderView,\r\n *                 AsideView,\r\n *                 MainView\r\n *             }\r\n *         });\r\n *         // 第二步：全局注册组件\r\n *         import HomeView from '@/components/HomeView.vue';\r\n *         Vue.component('HomeView', HomeView);\r\n *         <template>\r\n *             <div class=\"home-container\">\r\n *                 // 第三步：使用编写组件标签\r\n *                 <HeaderView></HeaderView>\r\n *                 // 第三步：使用编写组件标签\r\n *                 <AsideView></AsideView>\r\n *                 // 第三步：使用编写组件标签\r\n *                 <MainView></MainView>\r\n *             </div>\r\n *         </template>\r\n *     几个注意点：\r\n *     (1).关于组件名:\r\n *         一个单词组成：\r\n *             第01种写法(首字母小写)：header/aside/footer\r\n *             第02种写法(首字母大写)：Header/Aside/Footer\r\n *         多个单词组成：\r\n *             第01种写法(kebab-case命名)：my-header。\r\n *             第02种写法(CamelCase命名)：MyHeader，（需要Vue脚手架支持）。\r\n *         备注：\r\n *             (1).组件名尽可能回避HTML中已有的元素名称，例如：h2、H2都不行。\r\n *             (2).可以使用name配置项指定组件在开发者工具中呈现的名字。\r\n *     (2).关于组件标签:\r\n *         第一种写法：<school></school>\r\n *         第二种写法：<school/>\r\n *         备注：不用使用脚手架时，<school/>会导致后续组件不能渲染。\r\n *     (3).一个简写方式：\r\n *         const school = Vue.extend(options) 可简写为：const school = options。\r\n *     关于VueComponent：\r\n *         (1).school组件本质是一个名为VueComponent的构造函数，且不是程序员定义的，是Vue.extend生成的。\r\n *         (2).我们只需要写<school/>或<school></school>，Vue解析时会帮我们创建school组件的实例对象，即Vue帮我们执行的：new VueComponent(options)。\r\n *         (3).特别注意：每次调用 Vue.extend 返回的都是一个全新的 VueComponent。\r\n *         (4).关于this指向：\r\n *             (1).组件配置中：\r\n *                 data函数、methods中的函数、watch中的函数、computed中的函数 它们的this均是【VueComponent实例对象】。\r\n *             (2).new Vue(options)配置中：\r\n *                 data函数、methods中的函数、watch中的函数、computed中的函数 它们的this均是【Vue实例对象】。\r\n *         (5).VueComponent的实例对象，以后简称vc（也可称之为：组件实例对象）。\r\n *         Vue的实例对象，以后简称vm。\r\n *     一个重要的内置关系：\r\n *         (1).一个重要的内置关系：【VueComponent.prototype.__proto__】 === 【Vue.prototype】。\r\n *         (2).为什么要有这个关系：让组件实例对象（vc）可以访问到 Vue原型上的属性、方法。\r\n * 2.5 单文件组件\r\n *     一个.vue 文件的组成 3 个部分：\r\n *         (1).模板页面。\r\n *         (2).JS模块对象。\r\n *         (3).样式。\r\n *     基本使用：\r\n *         (1).引入组件。\r\n *         (2).映射成标签。\r\n *         (3).使用组件标签。\r\n *         <template>\r\n *             <div class=\"home-container\">\r\n *                 // 使用组件标签\r\n *                 <SchoolView></SchoolView>\r\n *                 // 使用组件标签\r\n *                 <StudentView></StudentView>\r\n *             </div>\r\n *         </template>\r\n *         // 引入组件\r\n *         import School from '@/components/SchoolView.vue';\r\n *         import Student from '@/components/StudentView.vue';\r\n *         // 映射成标签\r\n *         export default {\r\n *             components:{\r\n *                 SchoolView,\r\n *                 StudentView\r\n *             }\r\n *         }\r\n * 三、使用 Vue-Cli 脚手架\r\n * 3.1 Vue-Cli 初始化脚手架\r\n *     (0).翻译：\r\n *         vue-cli -> Vue - Command Line Interface\r\n *     (1).说明\r\n *         (1).Vue 脚手架是 Vue 官方提供的标准化开发工具（开发平台）。\r\n *         (2).最新的版本是 4.x。\r\n *         (3).文档: https://cli.vuejs.org/zh/。\r\n *     (2).具体步骤\r\n *         第一步（仅第一次执行）：全局安装 @vue/cli 脚手架。\r\n *             # npm install -g @vue/cli\r\n *         第二步：切换到你要创建项目的目录，然后使用命令创建项目\r\n *             # vue create vue2-cli3-demo4\r\n *         第三步：启动项目\r\n *             # npm run serve\r\n *     (3).备注\r\n *         (1).如出现下载缓慢请配置 npm 淘宝镜像：https://registry.npm.taobao.org。\r\n *             # npm config set registry\r\n *         (2).Vue 脚手架隐藏了所有 webpack 相关的配置，若想查看具体的 webpack 配置，请执行：\r\n *             # vue inspect > output.js\r\n *     (4).关于不同版本的Vue？\r\n *         (1).vue.js与vue.runtime.xxx.js的区别：\r\n *             (1).vue.js是完整版的Vue，包含：核心功能+模板解析器。\r\n *             (2).vue.runtime.xxx.js是运行版的Vue，只包含：核心功能；没有模板解析器。\r\n *         (2).因为vue.runtime.xxx.js没有模板解析器，所以不能使用template配置项，需要使用render函数接收到的createElement函数去指定具体内容。\r\n *         new Vue({\r\n *             el:'#app',\r\n *             render: h => h(App)\r\n *         });\r\n * 3.2 Vie-Cli 项目模板结构\r\n *     ├── node_modules       //\r\n *     ├── public             //\r\n *     │ ├── favicon.ico      // 页签图标\r\n *     │ └── index.html       // 主页面\r\n *     ├── src                //\r\n *     │ ├── assets           // 存放静态资源\r\n *     │ │ └── logo.png       //\r\n *     │ │── component        // 存放组件\r\n *     │ │ └── HelloWorld.vue //\r\n *     │ │── App.vue          // 汇总所有组件\r\n *     │ │── main.js          // 入口文件\r\n *     ├── .gitignore         // git 版本管制忽略的配置\r\n *     ├── babel.config.js    // babel 的配置文件\r\n *     ├── package.json       // 应用包配置文件\r\n *     ├── README.md          // 应用描述文件\r\n *     ├── package-lock.json  // 包版本控制文件\r\n * 3.2 ref 引用属性与 props 自定义属性\r\n *     1.ref 引用属性\r\n *     1).作用：用于给节点打标识。\r\n *     2).读取方式：\r\n *         <h1 v-text=\"msg\" ref=\"title\"></h1>\r\n *         <button ref=\"btn\" @click=\"showDOM\">点我输出上方的DOM元素</button>\r\n *         <School ref=\"sch\"/>\r\n *         // 真实DOM元素\r\n *         console.log(this.$refs.title);\r\n *         console.log(this.$refs.btn);\r\n *         console.log(this.$refs.sch);\r\n *     2.props 自定义属性\r\n *         // ParentView.vue\r\n *         <Student name=\"李四\" sex=\"女\" :age=\"18\"/>\r\n *         // ChildView.vue\r\n *         <h1>{{msg}}</h1>\r\n *         <h2>学生姓名：{{name}}</h2>\r\n *         <h2>学生性别：{{sex}}</h2>\r\n *         <h2>学生年龄：{{myAge+1}}</h2>\r\n *         <button @click=\"updateAge\">尝试修改收到的年龄</button>\r\n *     1).作用：用于父组件给子组件传递数据。\r\n *     2).读取方式一: 只指定名称\r\n *         props: [\r\n *             'name',\r\n *             'age',\r\n *             'setName'\r\n *         ]\r\n *     3).读取方式二: 指定名称和类型\r\n *         props: {\r\n *             userName: String,\r\n *             age: Number,\r\n *             running: Function\r\n *         }\r\n *     4).读取方式三: 指定名称/类型/必要性/默认值\r\n *         props: {\r\n *             name: {\r\n *                 type: String,\r\n *                 required: true,\r\n *                 default: 'admin'\r\n *             },\r\n *             age: {\r\n *                 type: Number,\r\n *                 default: 0\r\n *             }\r\n *         }\r\n *     ref属性与props属性：\r\n *     ref=\"myH3\"\r\n *     ref=\"myBtn\"\r\n *     ref=\"myIpt\"\r\n *     props:['name', 'age', 'sex']\r\n *     props:{\r\n *         name: String,\r\n *         age: Number\r\n *     }\r\n *     props:{\r\n *         name:{\r\n *             type: String,\r\n *             required: true,\r\n *         },\r\n *         age:{\r\n *             type: Number,\r\n *             default: 18\r\n *         },\r\n *         sex:{\r\n *             type: String,\r\n *             required: true\r\n *         }\r\n *     }\r\n * 3.3 混入\r\n *     (1).Vue 插件是一个包含 install 方法的对象。\r\n *     (2).通过 install 方法给 Vue 或 Vue 实例添加方法，定义全局指令。\r\n *     (3).mixin 混入。\r\n *     import {hunhe1, hunhe2} from '@/mixin.js';\r\n *     // 全局混合\r\n *     Vue.mixin(hunhe1);\r\n *     Vue.mixin(hunhe2);\r\n *     // 配置文件混入mixin.js\r\n *     export const hunhe1 = {\r\n *         methods: {\r\n *             showName() {\r\n *                 alert(this.name);\r\n *             }\r\n *         },\r\n *         mounted() {\r\n *             console.log('你好啊！');\r\n *         },\r\n *     }\r\n *     export const hunhe2 = {\r\n *         data() {\r\n *             return {\r\n *                 x:100,\r\n *                 y:200\r\n *             }\r\n *         },\r\n *     }\r\n * 3.4 插件\r\n *     (1).Vue 插件是一个包含 install 方法的对象。\r\n *     (2).通过 install 方法给 Vue 或 Vue 实例添加方法, 定义全局指令等。\r\n *     (3).插件：\r\n *     import plugins from '@/plugins.js';\r\n *     // 配置文件使用插件plugins.js\r\n *     Vue.use(plugins);\r\n *     // plugins.js\r\n *     export default {\r\n *         install(Vue) {\r\n *             Vue.filter('mySlice', function(value) {\r\n *                 return value.slice(0, 4);\r\n *             });\r\n *             Vue.directive('fbind', {\r\n *                 bind(element,binding) {\r\n *                     element.value = binding.value\r\n *                 },\r\n *                 inserted(element,binding){\r\n *                     element.focus()\r\n *                 },\r\n *                 update(element,binding){\r\n *                     element.value = binding.value\r\n *                 }\r\n *             });\r\n *             Vue.mixin({\r\n *                 data() {\r\n *                     return {\r\n *                         x:100,\r\n *                         y:200\r\n *                     }\r\n *                 },\r\n *             });\r\n *         }\r\n *     }\r\n * 3.5 ToDoList案例\r\n *     扩展：\r\n *     本地存储：SessionStorage与LocalStorage\r\n *         sessionStorage.setItem('token', JSON.stringify(token));\r\n *         const result = sessionStorage.getItem('token');\r\n *         console.log(JSON.parse(result));\r\n *         sessionStorage.removeItem('token');\r\n *         sessionStorage.clear();\r\n *         --\r\n *         localStorage.setItem('token', JSON.stringify(token));\r\n *         const result = localStorage.getItem('token');\r\n *         console.log(JSON.parse(result));\r\n *         localStorage.removeItem('token');\r\n *         localStorage.clear();\r\n *     (1).浏览器本地存储LocalStorage对象：\r\n *         <button onclick=\"saveToken()\">点我保存一个数据</button>\r\n *         <button onclick=\"readToken()\">点我读取一个数据</button>\r\n *         <button onclick=\"deleteToken()\">点我删除一个数据</button>\r\n *         <button onclick=\"deleteAll()\">点我清空一个数据</button>\r\n *         function saveToken() {\r\n *             localStorage.setItem('token', token);\r\n *         }\r\n *         function readToken() {\r\n *             const token = localStorage.getItem('token');\r\n *             console.log(JSON.parse(token));\r\n *         }\r\n *         function deleteToken() {\r\n *             localStorage.removeItem('token');\r\n *         }\r\n *         function deleteAll() {\r\n *             localStorage.clear();\r\n *         }\r\n *     (2).浏览器本地存储SessionStorage对象：\r\n *         function saveToken() {\r\n *             sessionStorage.setItem('token', token);\r\n *         }\r\n *         function readToken() {\r\n *             const token = sessionStorage.getItem('token');\r\n *             console.log(JSON.parse(token));\r\n *         }\r\n *         function deleteToken() {\r\n *             sessionStorage.removeItem('token');\r\n *         }\r\n *         function deleteAll() {\r\n *             sessionStorage.clear();\r\n *         }\r\n *     添加：\r\n *     (01).先从App.vue组件传递给MyHeader.vue组件通过绑定属性v-bind。\r\n *     <MyList v-bind:list=\"array\"></MyList>\r\n *     export default {\r\n *         data() {\r\n *             return {\r\n *                 array: [\r\n *                     {id: '10086', name: '中国移动', state: true},\r\n *                     {id: '10010', name: '中国联通', state: false},\r\n *                     {id: '10000', name: '中国电信', state: true},\r\n *                 ]\r\n *             }\r\n *         },\r\n *         methods: {\r\n *             // (04).添加obj到array中。【props适用于】子组件===>父组件通信（要求父组件先给子组件一个函数）\r\n *             array(obj) {\r\n *                 this.array.unshift(obj);\r\n *             }\r\n *         }\r\n *     }\r\n *     (02).然后MyHeader.vue组件接收App.vue传递过来的属性。\r\n *     <input type=\"text\" placeholder=\"请输入搜索关键字\" @keyup.enter=\"addObj($event)\"></input>\r\n *     export default {\r\n *         【props适用于】父组件===>子组件通信\r\n *         props: {\r\n *             'list'\r\n *         },\r\n *         methods: {\r\n *             // (03).添加obj到list中。【props适用于】子组件===>父组件通信（要求父组件先给子组件一个函数）\r\n *             addObj(event) {\r\n *                 const obj = {id: '12306', title: '中国铁路', state: false};\r\n *                 this.list(obj);\r\n *             }\r\n *         }\r\n *     }\r\n *     勾选：\r\n *     (01).先从App.vue父级组件传递给MyList.vue子级组件通过绑定属性v-bind。\r\n *     <MyList v-bind:list=\"array\" v-bind:check=\"checked\"/>\r\n *     export default {\r\n *         data() {\r\n *             return {\r\n *                 array: [\r\n *                     {id: '10086', name: '中国移动', state: true},\r\n *                     {id: '10010', name: '中国联通', state: false},\r\n *                     {id: '10000', name: '中国电信', state: true},\r\n *                 ]\r\n *             }\r\n *         },\r\n *         methods: {\r\n *             // (04).添加obj到array中。\r\n *             array(obj) {\r\n *                 this.array.unshift(obj);\r\n *             },\r\n *             // (04).添加到checked中。【props适用于】子组件===>父组件通信（要求父组件先给子组件一个函数）\r\n *             checked(id) {\r\n * \t\t\t\tthis.array.forEach((t) => {\r\n * \t\t\t\t\tif(t.id === id) t.state = !t.state;\r\n * \t\t\t\t})\r\n * \t\t\t},\r\n *         }\r\n *     }\r\n *     (02).然后MyList.vue子级组件接收App.vue父级组件传递过来的属性。\r\n *     <MyItem v-for=\"item in list\" :key=\"item.id\" v-bind:check=\"check\"/>\r\n *     export default {\r\n *         【props适用于】父组件===>子组件通信\r\n *         props: {\r\n *             'list',\r\n *             'check'\r\n *         }\r\n *     }\r\n *     (02).然后MyItem.vue孙级组件接收MyList.vue子级组件传递过来的属性。\r\n *     <input type=\"checkbox\" v-bind:checked=\"list.state\" @change=\"set(list.id)\"/>\r\n *     export default {\r\n *         【props适用于】父组件===>子组件通信\r\n *         props: {\r\n *             'list',\r\n *             'check'\r\n *         },\r\n *         check: {\r\n *             // (03).添加到check中。【props适用于】子组件===>父组件通信（要求父组件先给子组件一个函数）\r\n * \t\t\t  set(id) {\r\n * \t\t\t    this.check(id);\r\n * \t\t\t  },\r\n * \t\t  },\r\n *     }\r\n * 3.6 组件化编码流程（通用）\r\n *     1.实现静态组件：抽取组件，使用组件实现静态页面效果。\r\n *     2.展示动态数据：\r\n *         1).数据的类型、名称是什么？\r\n *         2).数据保存在哪个组件？\r\n *     3.交互——从绑定事件监听开始。\r\n * 3.6 Vue 中的自定义事件\r\n *     (1).组件自定义事件：\r\n *     // 子级组件\r\n *     this.$emit('share', value);\r\n *     // 父级组件\r\n *     <ChildView v-on:share=\"getShare\">\r\n *     export default {\r\n *         methods: {\r\n *             // 回调函数\r\n *             getShare(val) {\r\n *                 console.log(val);\r\n *             }\r\n *         }\r\n *     }\r\n *     注意：解绑自定义事件。\r\n *     this.$off();\r\n *     父子组件相互共享数据场景一：自定义事件v-on\r\n *         // 父级组件：App.vue\r\n *         <div id=\"app\">\r\n *             <!-- 使用v-bind父组件向子组件共享数据，使用v-on子组件向父组件共享数据 -->\r\n *             <MyHeader v-bind:one=\"oneAttr\" v-bind:wei=\"weiAttr\" v-on:ming=\"mingAttr\">\r\n *             </MyHeader>\r\n *         </div>\r\n *         export default {\r\n *             components: {\r\n *                 MyHeader\r\n *             },\r\n *             methods: {\r\n *                 oneAttr(obj) {\r\n *                   console.log(`添加二个对象吧：${JSON.stringify(obj)}`);\r\n *                   this.array.unshift(obj);\r\n *                 },\r\n *                 weiAttr(val) {\r\n *                   console.log('10086', val);\r\n *                 },\r\n *                 mingAttr(val) {\r\n *                   console.log('12306', val);\r\n *                 },\r\n *             }\r\n *         }\r\n *         // 子级组件：MyHeader.vue\r\n *         <!-- 使用双向数据绑定：v-model=\"title\"，使用事件绑定向父组件传递：v-on:keyup.enter=\"first()\" -->\r\n *         <input type=\"text\" placeholder=\"请输入你的搜索关键字\" v-model=\"title\" v-on:keyup.enter=\"first($event)\">\r\n *         export default {\r\n *             // 父组件向子组件共享数据需要使用【自定义属性】\r\n *             props: [\r\n *               'one',\r\n *               'wei'\r\n *             ],\r\n *             methods: {\r\n *                 first() {\r\n *                     const obj = {id: nanoid(), title: this.title, state: false};\r\n *                     console.log(`添加一个对象吧：${JSON.stringify(obj)}`);\r\n *                     // 子组件向父组件共享数据使用【自定义事件?what?怎么传过去的呀】\r\n *                     this.one(obj);\r\n *                     this.wei(obj);\r\n *                     // 子组件向父组件共享数据使用【自定义事件$emit】\r\n *                     this.$emit('ming', obj);\r\n *                 }\r\n *             },\r\n *         }\r\n *     父子组件相互共享数据场景二：自定义事件$emit\r\n *         // 父级组件：App.vue\r\n *         <div id=\"app\">\r\n *             <!-- 使用v-bind父组件向子组件共享数据，使用v-on子组件向父组件共享数据 -->\r\n *             <MyFooter v-bind:list=\"array\" @twoChecked=\"oneChecked\" @twoClear=\"oneClear\">\r\n *             </MyFooter>\r\n *         </div>\r\n *         methods: {\r\n *             oneChecked(state) {\r\n *                 this.array.forEach((t) => {\r\n *                     t.state = state;\r\n *                 });\r\n *             },\r\n *             oneClear() {\r\n *                 this.array = this.array.filter((t) => {\r\n *                     return !t.state;\r\n *                 });\r\n *             }\r\n *         }\r\n *         // 子级组件：MyHeader.vue\r\n *         <input type=\"checkbox\" v-model=\"threeChecked\">\r\n *         <button class=\"btn btn-danger\" @click=\"threeClear\">清除已选清单</button>\r\n *         computed: {\r\n *             threeChecked: {\r\n *                 get() {\r\n *                     return this.other === this.total && this.total > 0;\r\n *                 },\r\n *                 set(value) {\r\n *                     // 子组件向父组件共享数据使用自定义事件\r\n *                     this.$emit('twoChecked', value);\r\n *                 }\r\n *             }\r\n *         },\r\n *         methods: {\r\n *             threeClear() {\r\n *                 // 子组件向父组件共享数据使用自定义事件\r\n *                 this.$emit('twoClear');\r\n *             }\r\n *         }\r\n *     父子组件相互共享数据场景三：全局事件总线$bus\r\n *         // 入口文件：main.js\r\n *         new Vue({\r\n *             router,\r\n *             store,\r\n *             render: h => h(App),\r\n *             // 第一步：安装全局事件总线\r\n *             beforeCreate() {\r\n *                 Vue.prototype.$bus = this\r\n *             }\r\n *         }).$mount('#app');\r\n *         // 父级组件：App.vue\r\n *         components: {\r\n *             MyList\r\n *         },\r\n *         methods: {\r\n *             oneState(id) {\r\n *                 console.log(`这里使用【${id}】的状态`);\r\n *                 this.array.forEach((t) => {\r\n *                     if (t.id === id) {\r\n *                         t.state = !t.state;\r\n *                     }\r\n *                 });\r\n *             },\r\n *             oneDelete(id) {\r\n *                 console.log(`第一层模块结构中【${id}】编号是`);\r\n *                 this.array = this.array.filter(t => t.id !== id);\r\n *             }\r\n *         },\r\n *         mounted() {\r\n *             // 接收数据\r\n *             this.$bus.$on('threeState', this.oneState);\r\n *             // 接收数据\r\n *             this.$bus.$on('threeDelete', this.oneDelete);\r\n *         },\r\n *         beforeDestroy() {\r\n *             // 解绑自定义事件监听\r\n *             this.$bus.$off('threeState');\r\n *             // 解绑自定义事件监听\r\n *             this.$bus.$off('threeDelete');\r\n *         }\r\n *         // 子级组件：MyItem.vue\r\n *         <input type=\"checkbox\" v-bind:checked=\"obj.state\" v-on:change=\"fourState(obj.id)\">\r\n *         <button class=\"btn btn-danger\" @click=\"fourDelete(obj.id)\">删除</button>\r\n *         methods: {\r\n *             fourState(id) {\r\n *                 console.log(`这里勾选【${id}】的状态`);\r\n *                 // 子组件向父组件共享数据使用自定义事件\r\n *                 // this.threeState(id);\r\n *                 // 子组件向父组件共享数据使用自定义事件\r\n *                 // 发送数据\r\n *                 this.$bus.$emit('threeState', id);\r\n *             },\r\n *             fourDelete(id) {\r\n *                 console.log(`第三层模块结构中【${id}】编号是`);\r\n *                 // 子组件向父组件共享数据使用自定义事件\r\n *                 // this.threeDelete(id);\r\n *                 // 子组件向父组件共享数据使用自定义事件\r\n *                 // 发送数据\r\n *                 this.$bus.$emit('threeDelete', id);\r\n *             }\r\n *         }\r\n *     1.绑定事件监听\r\n *         <Header v-on:share=\"addCustomEvents\"/>\r\n *         或者\r\n *         <Header ref=\"header\"/>\r\n *         this.$refs.header.$on('share', this.addCustomEvents);\r\n *     2.触发事件\r\n *         this.$emit('share', customEvents);\r\n * 3.7 全局事件总线\r\n *     // 全局事件总线，任意组件间通信\r\n *     (1).一种组件间通信的方式，适用于任意组件间通信。\r\n *     (2).安装全局事件总结；\r\n *         new Vue({\r\n *             beforeCreate() {\r\n *                 // 安装全局事件总线，$bus就是当前应用的vm\r\n *                 Vue.prototype.$bus = this\r\n *             }\r\n *         });\r\n *     (3).使用事件总线；\r\n *         (1).接收数据，A组件想接收数据，则在A组件中给$bus绑定自定义事件，事件的回调留在A组件自身。\r\n *         (2).提供数据：this.$bus.$emit('share', data)。\r\n *     (4).最好在beforeDestroy()钩子中，使用$off去解绑当前组件中所用到的事件。\r\n *     理解：\r\n *     (1). Vue 原型对象上包含事件处理的方法\r\n *         1).$on(eventName, listener)   绑定自定义事件监听。\r\n *         2).$emit(eventName, data)     分发自定义事件。\r\n *         3).$off(eventName)            解绑自定义事件监听。\r\n *         4).$once(eventName, listener) 绑定事件监听，但只能处理一次。\r\n *     (2). 所有组件实例对象的原型对象的原型对象就是 Vue 的原型对象\r\n *         1).所有组件对象都能看到 Vue 原型对象上的属性和方法。\r\n *         2).Vue.prototype.$bus = new Vue()，所有的组件对象都能看到 $bus 这个属性对象。\r\n *     (3). 全局事件总线\r\n *         1).包含事件处理相关方法的对象(只有一个)。\r\n *         2).所有的组件都可以得到。\r\n *     (4).指定事件总线对象：\r\n *         // 引入依赖创建实例对象方式\r\n *         const vm = new Vue({\r\n *             // 使用生命周期钩子函数创建之前，执行挂载全局事件总线对象的操作\r\n *             beforeCreate() {\r\n *                 Vue.prototype.$globalEventBus = this;\r\n *             }\r\n *         });\r\n *         vm.$mount('#app');\r\n *         // vue2-cli3脚手架入口文件方式\r\n *         new Vue({\r\n *             router,\r\n *             store,\r\n *             render: h => h(App),\r\n *             // 第一步：安装全局事件总线\r\n *             beforeCreate() {\r\n *                 Vue.prototype.$bus = this\r\n *             }\r\n *         }).$mount('#app');\r\n *     (5).绑定事件：\r\n *         this.$globalEventBus.$on('share', this.addCustomEvents);\r\n *     (6).分发事件：\r\n *         this.$globalEventBus.$emit('share', this.index);\r\n *     (7).解绑事件：\r\n *         this.$globalEventBus.$off('share');\r\n *     扩展：$nextTick\r\n *     (1).语法：this.$nextTick(callback)\r\n *     (2).作用：在下一次DOM更新结束后，执行其指定的回调函数。\r\n *     (3).场景：当改变数据后，要基于更新后的新DOM进行某些操作时，要在$nextTick()所指定的回调函数中执行。\r\n *         handleEdit(array) {\r\n *             if(array.hasOwnProperty('isEdit')) {\r\n *                 array.isEdit = true;\r\n *             }else {\r\n *                 this.$set(array, 'isEdit', true);\r\n *             }\r\n *             this.$nextTick(function() {\r\n *                 this.$refs.inputTitle.focus();\r\n *             });\r\n *         }\r\n * 3.8 消息订阅与发布\r\n *     理解：\r\n *     1.这种方式的思想与全局事件总线很相似\r\n *     2.它包含以下操作:\r\n *         1).订阅消息--对应绑定事件监听。\r\n *         2).发布消息--分发事件。\r\n *         3).取消消息订阅--解绑事件监听。\r\n *     3.需要引入一个消息订阅与发布的第三方实现库: PubSubJS\r\n * 3.9 使用 PubSubJS\r\n *     (1).在线文档: https://github.com/mroderick/PubSubJS\r\n *     (2).下载: npm install pubsub-js -S\r\n *     (3).相关语法\r\n *         // 引入第三方模块依赖包\r\n *         import PubSub from 'pubsub-js';\r\n *         PubSub.subscribe('msgName', function(msgName, data) {\r\n *            // 执行代码\r\n *         });\r\n *         // 发布消息, 触发订阅的回调函数调用\r\n *         PubSub.publish('msgName', data);\r\n *         // 取消消息的订阅\r\n *         PubSub.unsubscribe(token);\r\n *     (4).使用：\r\n *         // 接收方模块组件.vue\r\n *         import pubsub from 'pubsub-js';\r\n * \t       export default {\r\n * \t\t   mounted() {\r\n *             // 通过全局事件总线接收数据\r\n *             this.$bus.$on('hello', data});\r\n *             // 通过消息订阅与发布接收数据\r\n *             this.data = pubsub.subscribe('hello', (msgName, data) => {\r\n *                 console.log(this);\r\n *                 console.log('有人发布了消息，消息的回调执行了', msgName, data);\r\n *             });\r\n *             beforeDestroy() {\r\n *                 // 解绑自定义事件监听\r\n *                 this.$bus.$off('hello');\r\n *                 // 同上\r\n *                 pubsub.unsubscribe(this.data);\r\n *             }\r\n *         }\r\n *         // 发送方模块组件.vue\r\n *         <button @click=\"sendData()\">把数据发送给接收方组件</button>\r\n *         import pubsub from 'pubsub-js';\r\n * \t       export default {\r\n *         data() {\r\n *             return {\r\n *                 name: 'Hello World'\r\n *             }\r\n *         },\r\n *         methods: {\r\n *             sendData() {\r\n *                 // 通过全局事件总线发送数据\r\n *                 this.$bus.$emit('hello', this.name);\r\n *                 // 同上\r\n *                 pubsub.publish('hello', this.name);\r\n *             }\r\n *         }\r\n * 3.9 过渡与动画\r\n *     【动画】\r\n *     Vue封装的过渡与动画。\r\n *     (1).作用：在插入、更新或者移除DOM元素时，在合适的时候给元素添加样式类名。\r\n *     (2).图示：\r\n *     (3).写法一：\r\n *         (1).准备好样式；\r\n *         (2).使用<transition></transition>双标签包裹过渡的元素，并且配置name属性；\r\n *         (3).备注：若有多个元素需要过渡，则需要使用<transition-group></transition-group>双标签包裹，并且每个元素都需要指定key值。\r\n *             .hello-enter-active {\r\n *                 animation: liuweiwei 0.5s linear;\r\n *             }\r\n *             .hello-leave-active {\r\n *                 animation: liuweiwei 0.5s linear reverse;\r\n *             }\r\n *             @keyframes liuweiwei {\r\n *                 from {\r\n *                     transform: translateX(-100%);\r\n *                 }\r\n *                 to {\r\n *                     transform: translateX(0px);\r\n *                 }\r\n *             }\r\n *     【过渡】\r\n *     Vue封装的过渡与动画。\r\n *     (1).作用：在插入、更新或者移除DOM元素时，在合适的时候给元素添加样式类名。\r\n *     (2).图示：\r\n *     (3).写法一：\r\n *         (1).准备好样式；\r\n *         (2).使用<transition></transition>双标签包裹过渡的元素，并且配置name属性；\r\n *         (3).备注：若有多个元素需要过渡，则需要使用<transition-group></transition-group>双标签包裹，并且每个元素都需要指定key值。\r\n *             <transition name=\"hello\" appear>\r\n *                 <h1 v-show=\"isShow\">你好啊！！！</h1>\r\n *             </transition>\r\n *             <transition-group name=\"hello\" appear>\r\n *                 <h1 v-show=\"!isShow\" key=\"1\">你好啊！！！</h1>\r\n *                 <h1 v-show=\"isShow\"  key=\"2\">好不好！！！</h1>\r\n *             </transition-group>\r\n *             <transition-group name=\"todo\" appear>\r\n *                 <MyItem v-for=\"todoObj in todos\" :key=\"todoObj.id\" :todo=\"todoObj\" />\r\n *             </transition-group>\r\n *     理解：\r\n *     1.操作 css 的 transition 或 animation。\r\n *     2.vue 会给目标元素添加/移除特定的 class。\r\n *     3.过渡的相关类名：\r\n *         1).xxx-enter-active       指定显示的 transition。\r\n *         2).xxx-leave-active       指定隐藏的 transition。\r\n *         3).xxx-enter/xxx-leave-to 指定隐藏时的样式。\r\n *     4.图示：\r\n *         [            Enter          ] [            Leave          ]\r\n *         [Opacity: 0]---->[Opacity: 1] [Opacity: 1]---->[Opacity: 0]\r\n *         [   |                |      ] [   |                |      ]\r\n *         [v-enter          v-enter-to] [v-leave          v-leave-to]\r\n *         [---------------------------] [---------------------------]\r\n *         [             |             ] [             |             ]\r\n *         [      v-enter-active       ] [      v-leave-active       ]\r\n *     【配置代理】\r\n *     (1).xhr           new XMLHttpRequest();\r\n *     (2).jQuery        $.ajax();\r\n *     (3).axios         .get();\r\n *     (4).fetch         .\r\n *     (5).vue-resource  插件库。\r\n *     # npm install axios\r\n *     const url = 'http://localhost:8080/api/list'\r\n *     axios.get(url).then(\r\n *         response => {\r\n *             console.log(response.data);\r\n *         },\r\n *         error => {\r\n *             console.log(error.message);\r\n *         }\r\n *     );\r\n *     报错：\r\n *     Access to XMLHttpRequest at '' from origin '' has been blocked by CORS policy: 'Access-Control-Allow-Origin'\r\n *     解决方式一：\r\n *     (1).vue.config.js\r\n *     (2).开启配置代理服务器\r\n *     module.exports = {\r\n *         devServer: {\r\n *             proxy: 'http://localhost:8080'\r\n *         }\r\n *     }\r\n *     解决方式二：\r\n *     (1).vue.config.js\r\n *     (2).开启配置代理服务器\r\n *     module.exports {\r\n *         devServer: {\r\n *             proxy: {\r\n *                 '/api': {\r\n *                     target: '<url>',\r\n *                     ws: true,\r\n *                     changeOrigin: true\r\n *                 },\r\n *                 '/foo': {\r\n *                     target: '<other_url>'\r\n *                 }\r\n *             }\r\n *         }\r\n *     }\r\n *     <!-- vue-resource  插件库 -->\r\n *     (0).安装第三方模块\r\n *     # npm install vue-resource\r\n *     (1).引入插件\r\n *     import vueResource from 'vue-resource';\r\n *     (2).使用插件\r\n *     Vue.use(vueResource);\r\n *     export default {\r\n *     name:'SearchView',\r\n *         data() {\r\n *             return {\r\n *                 keyWord: ''\r\n *             }\r\n *         },\r\n *         methods: {\r\n *             search() {\r\n *                 this.$http.get(`https://api.github.com/search/users?q=${this.keyWord}`).then(\r\n *                     response => {\r\n *                         console.log(response.data);\r\n *                         this.$bus.$emit('share', response.data);\r\n *                     },\r\n *                     error => {\r\n *                         this.$bus.$emit('share', 500);\r\n *                     }\r\n *                 )\r\n *             }\r\n *         },\r\n * \t    }\r\n * 3.10 基本过渡动画的编码\r\n *     1.在目标元素外包裹：<transition name=\"xxx\">\r\n *     2.定义 class 样式\r\n *         a).指定过渡样式: transition。\r\n *         b).指定隐藏时的样式: opacity/其它。\r\n * 四、Vue 中的 Ajax\r\n *     (1).场景：\r\n *         在开发中经常会遇到跨域这个问题。今天想从跨域的原理说起，接着到解决方案，最后到框架对跨域的封装。\r\n *     (2).原理：\r\n *         跨域指的是在URL访问地址中的协议、域名、端口任意一个不同，都被称为跨域访问。\r\n *         先对一个URL进行部分的拆分：\r\n *             http://carts.shopping:8080/api/index.html\r\n *             http://192.168.50.168:8080/api/index.html\r\n *             协议：\r\n *                 http 或者 https\r\n *             域名：\r\n *                 carts.shopping 或者 192.168.50.168\r\n *             端口号：\r\n *                 8080\r\n *             路径：\r\n *                 api\r\n *             文件：\r\n *                 index.html\r\n *         如果单独针对前端不涉及服务器，那么是无法处理端口、协议不同的情况，要解决这种情况，必须涉及到服务器，使用代理等方法。\r\n *     (3).CORS\r\n *         CORS：Cross-Origin Resource Sharing 跨域资源共享。\r\n *         大家最经常使用的跨域解决方案是：CORS（Cross-Origin Resource Sharing 跨域资源共享）。\r\n *         注意：需要前后端统一 http 的请求头。\r\n * 4.0 配置代理\r\n *     (1).xhr           new XMLHttpRequest();\r\n *     (2).jQuery-Ajax   $.ajax();\r\n *     (3).axios         .get();\r\n *     (4).fetch         .\r\n *     (5).vue-resource  插件库。\r\n * 第一种：xhr 原生\r\n *     const xhr = new XMLHttpRequest();\r\n *     xhr.open('post', 'url', 'true');\r\n *     xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');\r\n *     xhr.send('name' + username);\r\n * 第二种：jQuery-Ajax\r\n *     $.ajax({\r\n *         url: 'http://abc.com/abc.html',\r\n *         dataType:'jsonp',\r\n *         jsonp: 'jsonpcallback',\r\n *         success: function(data) {\r\n *             // 处理返回函数\r\n *             console.log('data', data);\r\n *         },\r\n *         error: function() {\r\n *             console.log(500);\r\n *         }\r\n *     });\r\n * 第三种：Axios\r\n *     # npm install axios\r\n *     const url = 'http://localhost:8080/api/list'\r\n *     axios.get(url).then(\r\n *         response => {\r\n *             console.log(response.data);\r\n *         },\r\n *         error => {\r\n *             console.log(error.message);\r\n *         }\r\n *     );\r\n *     报错：\r\n *     Access to XMLHttpRequest at '' from origin '' has been blocked by CORS policy: 'Acess-Control-Allow-Origin'\r\n *     解决方式一：\r\n *     (1).vue.config.js\r\n *     (2).开启配置代理服务器\r\n *     module.exports = {\r\n *         devServer: {\r\n *             proxy: 'http://localhost:8080'\r\n *         }\r\n *     }\r\n *     解决方式二：\r\n *     (1).vue.config.js\r\n *     (2).开启配置代理服务器\r\n *     module.exports {\r\n *         devServer: {\r\n *             proxy: {\r\n *                 '/api': {\r\n *                     target: '<url>',\r\n *                     ws: true,\r\n *                     changeOrigin: true\r\n *                 },\r\n *                 '/foo': {\r\n *                     target: '<other_url>'\r\n *                 }\r\n *             }\r\n *         }\r\n *     }\r\n * 第四种：fetch\r\n *     // 候补\r\n * 第五种：vue-resource 插件库\r\n *     (0).安装第三方模块\r\n *     # npm install vue-resource\r\n *     (1).引入插件\r\n *     import vueResource from 'vue-resource';\r\n *     (2).使用插件\r\n *     Vue.use(vueResource);\r\n *     export default {\r\n *         name:'SearchView',\r\n *         data() {\r\n *             return {\r\n *                 keyWord: ''\r\n *             }\r\n *         },\r\n *         methods: {\r\n *             search() {\r\n *                 this.$http.get(`https://api.github.com/search/users?q=${this.keyWord}`).then(\r\n *                     response => {\r\n *                         console.log(response.data);\r\n *                         this.$bus.$emit('share', response.data);\r\n *                     },\r\n *                     error => {\r\n *                         this.$bus.$emit('share', 500);\r\n *                     }\r\n *                 )\r\n *             }\r\n *         },\r\n *     }\r\n * 4.1 解决开发环境 Ajax 跨域问题\r\n *     使用代理服务器。\r\n * 4.2 github 用户搜索案例\r\n *     效果：\r\n *     Search Github Users\r\n *     welcome to use...\r\n *     接口地址：\r\n *     https://api.github.com/search/users?q=liuweiwei\r\n * 4.3 Vue 项目中常用的 2 个 Ajax 库\r\n *     1).axios\r\n *     通用的 Ajax 请求库, 官方推荐，使用广泛。\r\n *     2).vue-resource\r\n *     vue 插件库，vue1.x 版本使用广泛，官方已不维护。\r\n * 4.4 slot 插槽\r\n *     (1).不使用插槽\r\n *     <template>\r\n *         <div class=\"category\">\r\n *             <h3>{{title}}分类</h3>\r\n *         </div>\r\n *     </template>\r\n *     (2).默认插槽\r\n *     <template>\r\n *         <div class=\"category\">\r\n *             <h3>{{title}}分类</h3>\r\n *             <!-- 定义一个插槽（挖个坑，等着组件的使用者进行填充） -->\r\n *             <slot>我是一些默认值，当使用者没有传递具体结构时，我会出现</slot>\r\n *         </div>\r\n *     </template>\r\n *     (3).具名插槽\r\n *     // App.vue\r\n *     <template>\r\n *         <div class=\"container\">\r\n *             <Category title=\"美食\" >\r\n *                 <img slot=\"center\" src=\"https://s3.ax1x.com/2021/01/16/srJlq0.jpg\" alt=\"\">\r\n *                 <a slot=\"footer\" href=\"http://www.atguigu.com\">更多美食</a>\r\n *             </Category>\r\n *             <Category title=\"游戏\" >\r\n *                 <ul slot=\"center\">\r\n *                     <li v-for=\"(g,index) in games\" :key=\"index\">{{g}}</li>\r\n *                 </ul>\r\n *                 <div class=\"foot\" slot=\"footer\">\r\n *                     <a href=\"http://www.atguigu.com\">单机游戏</a>\r\n *                     <a href=\"http://www.atguigu.com\">网络游戏</a>\r\n *                 </div>\r\n *             </Category>\r\n *             <Category title=\"电影\">\r\n *                 <video slot=\"center\" controls src=\"http://clips.vorwaerts-gmbh.de/big_buck_bunny.mp4\"></video>\r\n *                 <template v-slot:footer>\r\n *                     <div class=\"foot\">\r\n *                         <a href=\"http://www.atguigu.com\">经典</a>\r\n *                         <a href=\"http://www.atguigu.com\">热门</a>\r\n *                         <a href=\"http://www.atguigu.com\">推荐</a>\r\n *                     </div>\r\n *                     <h4>欢迎前来观影</h4>\r\n *                 </template>\r\n *             </Category>\r\n *         </div>\r\n *     </template>\r\n *     // CategoryView.vue\r\n *     <template>\r\n *         <div class=\"category\">\r\n *             <h3>{{title}}分类</h3>\r\n *             <!-- 定义一个插槽（挖个坑，等着组件的使用者进行填充） -->\r\n *             <slot name=\"center\">我是Center插槽，当使用者没有传递具体结构时，我会出现哈！！！</slot>\r\n *             <slot name=\"footer\">我是Footer插槽，当使用者没有传递具体结构时，我会出现哒！！！</slot>\r\n *         </div>\r\n *     </template>\r\n *     (4).作用域插槽\r\n *     // App.vue\r\n *     <Category title=\"游戏\">\r\n *         <template scope=\"liuweiwei\">\r\n *             <ul>\r\n *                 <li v-for=\"(g, index) in list.games\" :key=\"index\">{{g}}</li>\r\n *             </ul>\r\n *         </template>\r\n *     </Category>\r\n *     <Category title=\"游戏\">\r\n *         <template scope=\"{games}\">\r\n *             <ol>\r\n *                 <li style=\"color:red\" v-for=\"(g, index) in games\" :key=\"index\">{{g}}</li>\r\n *             </ol>\r\n *         </template>\r\n *     </Category>\r\n *     <Category title=\"游戏\">\r\n *         <template slot-scope=\"{games}\">\r\n *             <h4 v-for=\"(g,index) in games\" :key=\"index\">{{g}}</h4>\r\n *         </template>\r\n *     </Category>\r\n *     // CategoryView.vue\r\n *     <div class=\"category\">\r\n *         <h3>{{title}}分类</h3>\r\n *         <slot :games=\"games\" msg=\"hello\">我是默认的一些内容</slot>\r\n *     </div>\r\n *     理解：\r\n *         父组件向子组件传递带数据的标签，当一个组件有不确定的结构时，就需要使用 slot 插槽技术，\r\n *     注意：\r\n *         插槽内容是在父组件中编译后，再传递给子组件的。\r\n * 五、Vuex\r\n * 5.1 Vuex 概念：\r\n *     (1).专门在 Vue 中实现集中式状态（数据）管理的一个 Vue 插件，对 vue 应用中多个组件的共享状态进行集中式的管理（读/写），也是一种组件间通信的方式，且适用于任意组件间通信。\r\n *     (1).在Vue中实现集中式状态（数据）管理的一个Vue插件，对vue应用中多个组件的共享状态进行集中式的管理（读/写），也是一种组件间通信的方式，且适用于任意组件间通信。\r\n *     (2).Github 地址: https://github.com/vuejs/vuex\r\n * 5.2 Vuex 场景：\r\n *     (1).多个组件需要共享数据时。\r\n * 5.3 Vuex 搭建环境：\r\n *     // @/store/index.js\r\n *     (0).下载第三方模板插件状态管理依赖包\r\n *         # npm install vuex@3.6.2\r\n *     (1).引入第三方模板插件状态管理依赖包\r\n *         import Vuex from 'vuex';\r\n *     (2).使用第三方模板插件状态管理vuex\r\n *         Vue.use(Vuex);\r\n *     (3).创建状态管理实例对象\r\n *         const store = new Vuex.Store({\r\n *             state: {},\r\n *             getters: {},\r\n *             mutations: {},\r\n *             actions: {},\r\n *             modules: {}\r\n *         });\r\n *     (4).向外共享状态管理实例对象\r\n *         export default store;\r\n *     // @/main.js\r\n *     (5).导入第三方模块插件状态管理实例对象\r\n *         import store from \"@/store/index.js\";\r\n *     (6).挂载第三方模板插件状态管理实例对象store\r\n *         new Vue({\r\n *             // 核心一：路由管理\r\n *             router: router,\r\n *             // 核心二：状态管理\r\n *             store: store,\r\n *             // 核心三：渲染函数\r\n *             render: h => h(App)\r\n *         }).$mount('#app');\r\n * 5.4 Vuex 基本使用：\r\n *     (1).初始化数据。配置：actions，配置：mutations，配置：state，均在操作文件：@/store/index.js。\r\n *         import Vue  from 'vue';\r\n *         import Vuex from 'vuex';\r\n *         Vue.use(Vuex);\r\n *         const store = new Vuex.Store({\r\n *             state: {\r\n *                 sum: 0\r\n *             },\r\n *             mutations: {\r\n *                 ADD(state, value) {\r\n *                     state.sum += value;\r\n *                 }\r\n *             },\r\n *             actions: {\r\n *                 additionWait(context, value) {\r\n *                     context.commit('ADD', value);\r\n *                 }\r\n *             }\r\n *         });\r\n *         export default store;\r\n *     (2).组件中读取vuex中的数据：$store.state.sum。\r\n *         <h4>当前求和为：{{ this.$store.state.sum }}</h4>\r\n *     (3).组件中修改vuex中的数据：$store.dispatch('action中的方法名', 数据)，或者$store.commit('mutations中的方法名', 数据)。\r\n *         data() {\r\n *             return {\r\n *                 n: 1\r\n *             };\r\n *         },\r\n *         methods: {\r\n *             increment() {\r\n *                 this.$store.commit('ADD', this.n);\r\n *             },\r\n *             incrementWait() {\r\n *                 this.$store.dispatch('additionWait', this.n);\r\n *             }\r\n *         }\r\n *     备注：若没有网络请求或其他业务逻辑，组件中也可以越过actions，即不写dispatch，直接编写commit。\r\n * 5.5 Vuex getters()基本使用：\r\n *     (1).概念：当state中的数据需要经过加工后再使用时，可以使用getters加工。\r\n *     (2).在@/store/index.js中追加getters配置。\r\n *         import Vue  from 'vue';\r\n *         import Vuex from 'vuex';\r\n *         Vue.use(Vuex);\r\n *         const store = new Vuex.Store({\r\n *             state: {\r\n *                 sum: 0\r\n *             },\r\n *             getters: {\r\n *                 dataProcessing(state) {\r\n *                     return state.sum * 10;\r\n *                 }\r\n *             },\r\n *             mutations: {\r\n *                 ADD(state, value) {\r\n *                     state.sum += value;\r\n *                 }\r\n *             },\r\n *             actions: {\r\n *                 additionWait(context, value) {\r\n *                     context.commit('ADD', value);\r\n *                 }\r\n *             }\r\n *         });\r\n *         export default store;\r\n *     (3).组件中读取数据：$store.getters.dataProcessing。\r\n *         <h4>当前求和翻十倍：{{ this.$store.getters.dataProcessing }}</h4>\r\n * 5.6 Vuex 提供的四个map方法的使用：\r\n *         // 引入第三方模板状态管理vuex的什么mapState\r\n *         import {mapActions, mapGetters, mapMutations, mapState} from \"vuex\";\r\n *     (1).使用Vuex中的mapState方法，用于帮助我们映射```state```中的数据为计算属性。\r\n *         <!-- Vuex.$store.mapState()或者Vuex.$store.mapGetters() -->\r\n *         <button v-on:click=\"increment()\">递增+1</button>\r\n *         <button v-on:click=\"decrement()\">递减-1</button>\r\n *         <button v-on:click=\"incrementOdd()\">当前求和为奇数再加</button>\r\n *         <button v-on:click=\"incrementWait()\">等一等再加</button>\r\n *         computed: {\r\n *             // 借助mapState生成计算属性，从state中读取数据。（对象写法）\r\n *             ...mapState({key1: 'sum', key2: 'message', key3: 'status'}),\r\n *             // 借助mapState生成计算属性，从state中读取数据。（数组写法）\r\n *             ...mapState(['sum', 'message', 'status']),\r\n *         },\r\n *         // 获取计算属性的值\r\n *         <h4>通过Vuex插件mapState()函数获取state中的数据：{{key1}}，{{key2}}，{{key3}}</h4>\r\n *         <h4>通过Vuex插件mapState()函数获取state中的数据：{{sum}}，{{message}}，{{status}}</h4>\r\n *     (2).使用Vuex中的mapGetters方法，用于帮助我们映射```getters```中的数据为计算属性。\r\n *         <!-- Vuex.$store.mapState()或者Vuex.$store.mapGetters() -->\r\n *         <button v-on:click=\"increment()\">递增+1</button>\r\n *         <button v-on:click=\"decrement()\">递减-1</button>\r\n *         <button v-on:click=\"incrementOdd()\">当前求和为奇数再加</button>\r\n *         <button v-on:click=\"incrementWait()\">等一等再加</button>\r\n *         computed: {\r\n *             // 借助mapGetters生成计算属性，从getters中读取数据。（对象写法）\r\n *             ...mapGetters({bigSum: 'dataProcessing'}),\r\n *             // 借助mapGetters生成计算属性，从getters中读取数据。（数组写法）\r\n *             ...mapGetters(['dataProcessing']),\r\n *         },\r\n *         // 获取计算属性的值\r\n *         <h4>通过Vuex插件mapGetters()函数获取getters中的数据：{{bigSum}}</h4>\r\n *         <h4>通过Vuex插件mapGetters()函数获取getters中的数据：{{dataProcessing}}</h4>\r\n *     (3).使用Vuex中的mapActions方法，用于帮助我们生成与```actions```对话的方法。即：包含$store.dispatch(xxx)的函数。\r\n *         <!-- Vuex.$store.mapMutations()或者Vuex.$store.mapActions() -->\r\n *         <button v-on:click=\"increment(n)\">递增+1</button>\r\n *         <button v-on:click=\"decrement(n)\">递减-1</button>\r\n *         <button v-on:click=\"incrementOdd(n)\">当前求和为奇数再加</button>\r\n *         <button v-on:click=\"incrementWait(n)\">等一等再加</button>\r\n *         methods:{\r\n *             // 靠mapActions生成：increment、decrement（对象形式）\r\n *             ...mapMutations({increment:'ADD', decrement:'SUB'}),\r\n *             // 靠mapMutations生成：ADD、SUB（对象形式）\r\n *             ...mapMutations(['ADD', 'SUB']),\r\n *         }\r\n *     (4).使用Vuex中的mapMutations方法，用于帮助我们生成与```mutations```对话的方法。即：包含$store.commit(xxx)的函数。\r\n *         <!-- Vuex.$store.mapMutations()或者Vuex.$store.mapActions() -->\r\n *         <button v-on:click=\"increment(n)\">递增+1</button>\r\n *         <button v-on:click=\"decrement(n)\">递减-1</button>\r\n *         <button v-on:click=\"incrementOdd(n)\">当前求和为奇数再加</button>\r\n *         <button v-on:click=\"incrementWait(n)\">等一等再加</button>\r\n *         methods:{\r\n *             // 靠mapActions生成：incrementOdd、incrementWait（对象形式）\r\n *             ...mapActions({incrementOdd: 'addOdd', incrementWait: 'addWait'}),\r\n *             // 靠mapActions生成：incrementOdd、incrementWait（数组形式）\r\n *             ...mapActions(['addOdd', 'addWait']),\r\n *         }\r\n *     备注：mapActions与mapMutations使用时，若需要传递参数需要：在模板中绑定事件时传递好参数，否则参数是事件对象。\r\n * 5.7 Vuex 模块化+命名空间基本使用：\r\n *     (1).目的：让代码更好维护，让多种数据分类更加明确。\r\n *     (2).修改：@/store/index.js。\r\n *         // 统计命名空间一\r\n *         const countAbout = {\r\n *             // 开启命名空间\r\n *             namespaced:true,\r\n *             state:{\r\n *                 x:200,\r\n *                 sum:0,\r\n *                 school:'SZ',\r\n *                 subject:'Font-End'\r\n *             },\r\n *             mutations: {\r\n *                 ADD(state, value) {\r\n *                     state.sum += value;\r\n *                 },\r\n *                 SUB() {\r\n *                     state.sum -= value;\r\n *                 }\r\n *             },\r\n *             actions: {\r\n *                 jiaOdd(context, value) {\r\n *                     if(context.state.sum % 2) {\r\n *                         context.commit('ADD', value);\r\n *                     }\r\n *                 },\r\n *                 jiaWait(context, value) {\r\n *                     setTimeout(() => {\r\n *                         context.commit('ADD', value);\r\n *                     }, 1000);\r\n *                 }\r\n *             },\r\n *             getters: {\r\n *                 bigSum(state){\r\n *                     return state.sum * 10\r\n *                 }\r\n *             }\r\n *         }\r\n *         // 职工命名空间二\r\n *         const personAbout = {\r\n *             // 开启命名空间\r\n *             namespaced:true,\r\n *             state:{\r\n *                 y:500,\r\n *                 list:[\r\n *                     {id:1, name:'a', age:28}\r\n *                 ]\r\n *             },\r\n *             getters:{\r\n *                 firstPersonName(state){\r\n *                     return state.personList[0].name\r\n *                 }\r\n *             },\r\n *             mutations: {\r\n *                 ADD_PERSON(state, value) {\r\n *                     state.personList.unshift(value);\r\n *                 }\r\n *             },\r\n *             actions: {\r\n *                 addPersonWang(context, value) {\r\n *                     if(value.name.indexOf('王') === 0) {\r\n *                         context.commit('ADD_PERSON', value);\r\n *                     }\r\n *                 }\r\n *             }\r\n *         }\r\n *         // 创建状态管理实例对象\r\n *         const store = new Vuex.Store({\r\n *             modules: {\r\n *                 countAbout,\r\n *                 personAbout\r\n *             }\r\n *         });\r\n *         // 向外共享状态管理实例对象\r\n *         export default store;\r\n *     提示：或者创建两个不同的JS文件，比如：@/store/count-store.js和@/store/person-store.js，然后在@/store/index.js中引入。\r\n *     (3).开启命名空间后，组件中读取state数据：\r\n *         // 方式一：自己直接读取\r\n *         this.$store.state.personAbout.list;\r\n *         // 方式二：借助mapState读取：\r\n *         ...mapState('countAbout',['sum', 'school', 'subject']),\r\n *     （4）.开启命名空间后，组件中读取getters数据：\r\n *         // 方式一：自己直接读取\r\n *         this.$store.getters['personAbout/firstPersonName'];\r\n *         // 方式二：借助mapGetters读取：\r\n *         ...mapGetters('countAbout', ['bigSum']);\r\n *     （5）.开启命名空间后，组件中调用dispatch\r\n *         // 方式一：自己直接dispatch\r\n *         this.$store.dispatch('personAbout/addPersonWang', person);\r\n *         // 方式二：借助mapActions：\r\n *         ...mapActions('countAbout', {incrementOdd:'jiaOdd', incrementWait:'jiaWait'});\r\n *     （6）.开启命名空间后，组件中调用commit\r\n *         //方式一：自己直接commit\r\n *         this.$store.commit('personAbout/ADD_PERSON', person);\r\n *         //方式二：借助mapMutations：\r\n *         ...mapMutations('countAbout',{increment:'ADD', decrement:'SUB'}),\r\n *     实例：(命名空间一)count-store.js+(命名空间二)person-store.js+index.js\r\n *         // PersonView.vue\r\n *         <h4>通过Vuex插件mapState()函数获取modules中的数据：{{val1}}，{{val2}}，{{val3}}</h4>\r\n *         <h4>通过Vuex插件mapState()函数获取modules中的数据：{{countSum}}，{{countMessage}}，{{countStatus}}</h4>\r\n *         <h4>通过Vuex插件mapState()函数获取modules中的数据：{{personSum}}，{{personMessage}}，{{personStatus}}</h4>\r\n *         import {mapActions, mapGetters, mapMutations, mapState} from \"vuex\";\r\n *         computed: {\r\n *            // mapState()\r\n *            // 借助mapState生成计算属性，从state中读取数据。（对象写法）\r\n *            ...mapState({key1: 'sum', key2: 'message', key3: 'status', key4: 'list'}),\r\n *            // 借助mapState生成计算属性，从state中读取数据。（数组写法）\r\n *            ...mapState(['sum', 'message', 'status', 'list']),\r\n *            // mapState()\r\n *            // 借助mapState()函数生成计算属性，从模块命名空间中读取数据。（对象写法）\r\n *            ...mapState('countStore', {val1: 'countSum', val2: 'countMessage', val3: 'countStatus'}),\r\n *            // 借助mapState()函数生成计算属性，从模块命名空间中读取数据。（数组写法）\r\n *            ...mapState('countStore', ['countSum', 'countMessage', 'countStatus']),\r\n *            ...mapState('personStore', ['personSum', 'personMessage', 'personStatus']),\r\n *            // mapGetters()\r\n *            // 借助mapGetters生成计算属性，从getters中读取数据。（对象写法）\r\n *            ...mapGetters({bigSum: 'dataProcessing'}),\r\n *            // 借助mapGetters生成计算属性，从getters中读取数据。（数组写法）\r\n *            ...mapGetters(['dataProcessing']),\r\n *         },\r\n *         methods: {\r\n *            // mapMutations()\r\n *            // 靠mapActions生成：increment、decrement（对象形式）\r\n *            ...mapMutations({increment:'ADD', decrement:'SUB'}),\r\n *            // 靠mapMutations生成：ADD、SUB（对象形式）\r\n *            ...mapMutations(['ADD', 'SUB']),\r\n *            // mapActions()\r\n *            // 靠mapActions生成：incrementOdd、incrementWait（对象形式）\r\n *            ...mapActions({incrementOdd: 'addOdd', incrementWait: 'addWait'}),\r\n *            // 靠mapActions生成：incrementOdd、incrementWait（数组形式）\r\n *            ...mapActions(['addOdd', 'addWait']),\r\n *         },\r\n *         // CountView.vue\r\n *         <h4 style=\"color: red\">当前求和为：{{ this.$store.state.sum }}</h4>\r\n *         <h4 style=\"color: red\">当前求和翻十倍：{{ this.$store.getters.dataProcessing }}</h4>\r\n *         <h4 style=\"color: red\">当前总人数是：{{ this.$store.state.list.length }}</h4>\r\n *         <h4 style=\"color: red\">列表中第一个人的名字是：{{ firstName }}</h4>\r\n *         <input type=\"text\" placeholder=\"请输入模糊搜索关键字...\" v-model=\"nickname\">&nbsp\r\n *         <button v-on:click=\"addPerson()\">新增</button>\r\n *         <input type=\"text\" placeholder=\"请输入模糊搜索关键字...\" v-model=\"nickname\">&nbsp;\r\n *         <button v-on:click=\"add()\">添加</button>\r\n *         <ul>\r\n *             <li v-for=\"person in list\" v-bind:key=\"person.id\">{{ person.nickname }}</li>\r\n *         </ul>\r\n *         <ul>\r\n *             <li v-for=\"person in personList\" v-bind:key=\"person.id\">工号：{{person.id}}，姓名：{{person.name}}，年龄：{{person.age}}</li>\r\n *         </ul>\r\n *         // 通过计算属性（Computed）获取状态管理插件中的状态或数据（State）生成属性。\r\n *         computed: {\r\n *             list() {\r\n *                 return this.$store.state.list;\r\n *             },\r\n *             sum() {\r\n *                 return this.$store.state.sum;\r\n *             },\r\n *             personList() {\r\n *               return this.$store.state.personStore.personList;\r\n *             },\r\n *             firstName() {\r\n *                 return this.$store.getters['personStore/firstName'];\r\n *             }\r\n *         },\r\n *         methods: {\r\n *             // 通过状态管理后厨：用于操作数据（State）的函数添加数据（State）\r\n *             addPerson() {\r\n *                 const person = {id: nanoid(), nickname: this.nickname, status: 0, isDelete: false};\r\n *                 this.$store.commit('ADD_LIST', person);\r\n *                 this.nickname = '';\r\n *             },\r\n *             add() {\r\n *                 const person = {id: nanoid(), name: this.nickname, age: 44, state: 0};\r\n *                 this.$store.commit('personStore/ADD_PERSON', person);\r\n *                 this.nickname = '';\r\n *             }\r\n *         }\r\n * 5.2 Vuex 的使用\r\n *     1. 多个组件依赖于同一状态。\r\n *     2. 来自不同组件的行为需要变更同一状态。\r\n * 5.3 Vuex 案例\r\n *     当前求和为：0\r\n * 5.4 Vuex 工作原理图\r\n *     [ Vuex ]\r\n *     Vue Components -> Dispatch -> [ Actions -> Commit -> Mutations -> Mutate -> State ] -> Render\r\n * 5.5 Vuex 核心概念和API\r\n *     1. state\r\n *     1).Vuex管理的状态对象。\r\n *     2).Vuex应该是唯一的。\r\n *     3).示例代码：\r\n *         const state = {\r\n *             xxx: initialValue\r\n *         }\r\n *     2. actions\r\n *     1).值为一个对象，包含多个响应用户动作的回调函数。\r\n *     2).通过 commit()来触发 mutation 中函数的调用，间接更新 state。\r\n *     3).如何触发 actions 中的回调？在组件中使用: $store.dispatch('对应的 action 回调名') 触发。\r\n *     4).可以包含异步代码（定时器，ajax 等等）。\r\n *     5).示例代码：\r\n *         const actions = {\r\n *             zzz ({commit, state}, data1) {\r\n *                 commit('yyy', {data1});\r\n *             }\r\n *         }\r\n *     3. mutations\r\n *     1).值是一个对象，包含多个直接更新 state 的方法。\r\n *     2).谁能调用 mutations 中的方法？如何调用？在 action 中使用：commit('对应的 mutations 方法名') 触发。\r\n *     3).mutations 中方法的特点：不能写异步代码、只能单纯的操作 state。\r\n *     4).示例代码：\r\n *         const mutations = {\r\n *             yyy (state, {data1}) {\r\n *                 // 更新state的某个属性\r\n *             }\r\n *         }\r\n *     4. getters\r\n *     1).值为一个对象，包含多个用于返回数据的函数。\r\n *     2).如何使用？使用：$store.getters.xxx。\r\n *     3).示例代码：\r\n *         const getters = {\r\n *             mmm (state) {\r\n *                 return state.msg + '!';\r\n *             }\r\n *         }\r\n *     5. modules\r\n *     1).包含多个 module。\r\n *     2).一个 module 是一个 store 的配置对象。\r\n *     3).与一个组件（包含有共享数据）对应。\r\n * 六、Vue-Router 路由\r\n * 6.1 vue-router 的理解\r\n *     vue 的一个插件库，专门用来实现 SPA 应用。\r\n *     一个路由（route）就是一组映射关系（key - value），多个路由需要路由器（router）进行管理。\r\n *     前端路由：key是路径，value是组件。\r\n * 6.2 对 SPA 应用的理解\r\n *     1. 单页 Web 应用（Single Page web Application，SPA）。\r\n *     2. 整个应用只有一个完整的页面。\r\n *     3. 点击页面中的导航链接不会刷新页面，只会做页面的局部更新。\r\n *     4. 数据需要通过 ajax 请求获取。\r\n * 6.3 什么是路由？\r\n *     1. 一个路由就是一组映射关系（key - value）。\r\n *     2. key 为【路径】，value 可能是【function】或者【component】。\r\n * 6.4 路由的分类？【重点】\r\n *     (1).后端路由：\r\n *         1).理解：value 是【function】，用于处理客户端提交的请求。\r\n *         2).工作过程：服务器接收到一个请求时，根据请求路径找到匹配的函数来处理请求，返回响应数据。\r\n *     (2).前端路由：\r\n *         1).理解：value 是【component】，用于展示页面内容。\r\n *         2).工作过程：当浏览器的路径改变时, 对应的组件就会显示。\r\n * 6.5 路由的基本使用\r\n *     ```@/router/index.js```\r\n *     (1).安装vue-router插件依赖包\r\n *     // 第00步：安装vue-router路由依赖包\r\n *     # npm install vue-router@3.2.0\r\n *     // 第01步：导入第三方路由模块（依赖包）\r\n *     import VueRouter from 'vue-router';\r\n *     import About from '@/components/About';\r\n *     import Home from '@/components/Home';\r\n *     (2).使用插件\r\n *     Vue.use(VueRouter);\r\n *     // 第02步：调用Vue.use()函数，把VueRouter安装为Vue插件\r\n *     Vue.use(VueRouter);\r\n *     (3).编写路由配置项\r\n *     // 第03步：创建路由模块实例对象\r\n *     const router = new VueRouter({\r\n *         routes:[\r\n *             {path:'/about', component: About},\r\n *             {path:'/home', component: Home}\r\n *         ]\r\n *     });\r\n *     // 第04步：向外共享路由的实例对象\r\n *     export default router;\r\n *     ```@/main.js```\r\n *     // 第05步：导入第三方模块插件（路由模块：vue-router）\r\n *     import router from \"@/router/index.js\";\r\n *     // 第06步：挂载 router 路由模块\r\n *     // 第06步：挂载 vuex   状态管理\r\n *     // 第06步：挂载 render 渲染函数\r\n *     new Vue({\r\n *         // 核心一：路由管理\r\n *         router: router,\r\n *         // 核心二：状态管理\r\n *         store: store,\r\n *         // 核心三：渲染函数\r\n *         render: h => h(App),\r\n *         // 核心四：事件总线\r\n *         beforeCreate() {\r\n *             Vue.prototype.$bus = this\r\n *         }\r\n *     }).$mount('#app');\r\n *     ```@/App.vue```\r\n *     <!-- 第07步：定义路由的【链接】router-link -->\r\n *     <router-link to=\"/home\">公司首页</router-link>\r\n *     <!-- 第07步：定义路由的【占位符】router-view -->\r\n *     <router-view></router-view>\r\n *     (4).实现切换路由的链接\r\n *     <router-link active-class=\"active\" to=\"/about\">About</router-link>\r\n *     (5).指定展示位置路由的占位符\r\n *     <router-view></router-view>\r\n *     (6).浏览器访问\r\n *     http://localhost:8080/#/\r\n * 6.5 路由几个注意点：\r\n *     (1).路由组件通常存放在```pages```文件夹，一般组件通常存放在```components```文件夹。\r\n *     (2).通过切换，【隐藏了】的路由组件，默认是被销毁掉的，需要的时候再去挂载。\r\n *     (3).每个组件都有自己的```$route```属性，里面存储着自己的路由信息。\r\n *     (4).整个应用只有一个```router```，可以通过组件的```$router```属性获取到。\r\n * 6.6 总结\r\n *     编写使用路由的 3 个步骤：\r\n *     (1).定义路由组件。\r\n *     (2).注册路由。\r\n *     (3).使用路由。\r\n * 6.7 嵌套（多级）路由\r\n *     (1).配置路由规则，使用children配置项：\r\n *     const router = new VueRouter({\r\n *         routes:[\r\n *             {path: '/about', component: About},\r\n *             {path: '/home', component: Home, children: [\r\n *                 {path: 'news', component: News},\r\n *                 {path: 'message', component: Message}\r\n *             ]}\r\n *         ]\r\n *     });\r\n *     注意：子级路由不要写斜杠（/），子级路由不要写斜杠（/），子级路由不要写斜杠（/），重要的事情说三遍。\r\n *     (2).跳转（要写完整路径）：\r\n *     <router-link to=\"/home/news\">News</router-link>\r\n * 6.8 路由传参\r\n *     // path 或者 name\r\n *     <router-link class=\"list-group-item\" active-class=\"active\" :to=\"`/movies/12306/andy?username=LiuWeiWei&password=123456`\">中国铁路</router-link>\r\n *     <router-link class=\"list-group-item\" active-class=\"active\" :to=\"{path:'/movies/10086/jack',query:{username:'LiuWeiWei',password:123456}}\">中国移动</router-link>\r\n *     <router-link class=\"list-group-item\" active-class=\"active\" :to=\"{name:'movies',params:{id:10010,title:'lucy'}}\">中国电信</router-link>\r\n *     // query\r\n *     <!-- 跳转路由并携带【query】参数，to的字符串写法 -->\r\n *     <router-link :to=\"`/home/message/detail?id=${item.id}&title=${item.title}`\">{{item.name}}</router-link>\r\n *     <router-link :to=\"`/movies/12306/jessica?username=LiuWeiWei&password=123456`\">中国铁路</router-link>\r\n *     <!-- 跳转路由并携带【query】参数，to的对象的写法 -->\r\n *     <router-link :to=\"{path:'/home/message/detail',query:{id:item.id,title:item.title}}\">{{item.name}}</router-link>\r\n *     <router-link :to=\"{path:'/movies/10086/jessica',query:{username:'LiuWeiWei',password:123456}}\">中国移动</router-link>\r\n *     // params\r\n *     <!-- 跳转路由并携带【params】参数，to的字符串写法 -->\r\n *     <router-link :to=\"`/home/message/detail/${item.id}/${item.title}`\">{{item.name}}</router-link>\r\n *     <router-link :to=\"`/movies/12306/jessica`\">中国铁路</router-link>\r\n *     <!-- 跳转路由并携带【params】参数，to的对象的写法 -->\r\n *     <router-link :to=\"{name:'xiangqing',params:{id:item.id,title:item.title}}\">{{item.name}}</router-link>\r\n *     <router-link :to=\"{name:'movies',params:{id:10010,title:'lucy'}}\">中国电信</router-link>\r\n *     (1).路由的query参数\r\n *         1).传递参数\r\n *             // 跳转并携带query参数，to的字符串写法\r\n *             <router-link to=\"/movie/2?name=LiuWeiWei&age=38\">日韩专区</router-link>\r\n *             // 跳转并携带query参数，to的对象写法\r\n *             <router-link v-bind:to=\"{path:'/movie/3', query:{id:'10086',title:'中国移动'}}\">欧美专区</router-link>\r\n *         2).接收参数\r\n *             <span>路由的Query参数获取：name->{{this.$route.query.name}},age->{{ this.$route.query.age}}</span><br>\r\n *             <span>路由的Query参数获取：id->{{this.$route.query.id}},title->{{ this.$route.query.title}}</span><br>\r\n *             computed: {\r\n *                 id() {\r\n *                     return $route.query.id;\r\n *                 },\r\n *                 title() {\r\n *                     return $route.query.title;\r\n *                 }\r\n *             }\r\n *     (2).路由的params参数\r\n *         1).配置路由，声明接收params参数\r\n *         // 第08步：配置路由规则，开启 props 传递参数，从而获取动态参数（/:mid）的值。\r\n *         {name: 'alias', path: '/movie/:mid', component: Movie, props: true},\r\n *         2).传递参数\r\n *         <router-link to=\"/movie/1\">国内专区</router-link>\r\n *         <router-link to=\"/movie/2?name=LiuWeiWei&age=38\">日韩专区</router-link>\r\n *         <router-link v-bind:to=\"{path:'/movie/3', query:{id:'10086',title:'中国移动'}}\">西欧专区</router-link>\r\n *         <router-link v-bind:to=\"{name:'alias', query:{id:'10086',title:'中国移动'}}\">南美专区</router-link>\r\n *         3).接收参数\r\n *         <span>路由的Params参数获取：mid->{{ this.$route.params.mid }}，或者：{{ mid }}</span>\r\n *         特别注意：路由携带params参数时，若使用to的对象写法，则不能使用path配置项，必须使用name配置。\r\n *     (3).路由的Props配置\r\n *         1).作用：让路由组件更方便的收到参数。\r\n *         // 第08步：配置路由规则，开启 props 传递参数，从而获取动态参数（/:mid）的值。\r\n *         {name: 'alias', path: '/movie/:mid', component: Movie, props: true},\r\n *         // 定义自定义属性props动态参数mid\r\n *         export default {\r\n *             name: 'Movie',\r\n *             props: [\r\n *                 'mid'\r\n *             ],\r\n *         }\r\n *         // 渲染动态参数mid的值\r\n *         <span>路由的Params参数获取：{{ mid }}</span>\r\n *         传说中的三种写法：\r\n *         // 第一种写法：props值为布尔值，布尔值为true，则把路由收到的所有params参数通过props传给组件\r\n *         {name: 'alias', path: '/movie/:mid', component: Movie, props: true}\r\n *         // 第二种写法：props值为对象，该对象中所有的key-value的组合最终都会通过props传给组件\r\n *         props:{mid:200}\r\n *         // 第三种写法：props值为函数，该函数返回的对象中每一组key-value都会通过props传给组件\r\n *         props(route) {\r\n *             return {\r\n *                 mid: route.query.mid\r\n *             }\r\n *         }\r\n * 6.9 路由命名\r\n *     (1).作用：\r\n *         1).可以简化路由的跳转。\r\n *     (2).使用：\r\n *         1).给路由命名\r\n *         const router = new VueRouter({\r\n *             routes:[\r\n *                 // 添加name属性给路由命名\r\n *                 {name: 'about', path: '/about', component: About},\r\n *                 {name: 'home', path: '/home', component: Home, children: [\r\n *                     {name: 'news', path: 'news', component: News},\r\n *                     {name: 'message', path: 'message', component: Message}\r\n *                 ]}\r\n *             ]\r\n *         });\r\n *         2).简化跳转\r\n *         // 简化前，需要写完整的路径\r\n *         <router-link v-bind:to=\"/home/message\">简化之前【全路径】跳转</router-link>\r\n *         // 简化后，直接通过名字跳转\r\n *         <router-link v-bind:to=\"{name:'message'}\">简化之后【路由名】跳转</router-link>\r\n * 6.9 router-link 标签的Replace属性\r\n *     (1).作用：控制路由跳转时操作浏览器历史记录的模式。\r\n *     (2).浏览器的历史记录有两种写入方式：分别为push和replace。\r\n *         1).push    是追加新的历史记录。每跳转一次，都会有一个历史记录产生。\r\n *         2).replace 是替换当前历史记录。第跳转一次，都会替换上次历史记录。\r\n *         提示：路由跳转时候默认为push。\r\n *     (3).如何开启replace模式：\r\n *         // 添加replace属性即可替换为替换当前历史记录\r\n *         <router-link to=\"/movie/1\">国内专区</router-link>\r\n *         <router-link to=\"/movie/2?name=LiuWeiWei&age=38\">日韩专区</router-link>\r\n *         <router-link v-bind:to=\"{path:'/movie/3', query:{id:'10086',title:'中国移动'}}\">西欧专区</router-link>\r\n *         <router-link v-bind:to=\"{name:'alias', query:{id:'10086',title:'中国移动'}}\">南美专区</router-link>\r\n *         <router-link replace to=\"/about\">路由管理VueRouter</router-link>\r\n *         <router-link replace to=\"/support\">状态管理Vuex</router-link>\r\n *         <router-link replace to=\"/contain\">饿了么UI</router-link>\r\n * 6.9 编程式路由导航\r\n *     声明式导航与编程式导航的区别？\r\n *     (1).在浏览器中，点击链接实现导航的方式，叫做声明式导航。\r\n *         例如：普通网页中点击【<a>链接】、或者 VUE 项目中点击【<router-link>】都属于声明式导航。\r\n *     (2).在浏览器中，调用 API 方法实现导航的方式，叫做编程式导航。\r\n *         例如：普通网页中调用【location.href】跳转到新页面的方式，属于编程式导航。\r\n *     vue-router 路由提供了许多编程式导航的 API，其中最常用的导航 API 分别是：\r\n *     相关 API：\r\n *         (1).this.$router.push(path)    : 相当于点击路由链接(可以返回到当前路由界面)。\r\n *         (2).this.$router.replace(path) : 用新路由替换当前路由(不可以返回到当前路由界面)。\r\n *         (3).this.$router.back()        : 请求(返回)上一个记录路由。\r\n *         (4).this.$router.forward()     : 请求(返回)下一个记录路由。\r\n *         (5).this.$router.go(-1)        : 请求(返回)上一个记录路由。\r\n *         (5).this.$router.go(1)         : 请求(返回)下一个记录路由。\r\n *     示例：\r\n *         <button type=\"button\" @click=\"back()\">后退</button>\r\n *         <button type=\"button\" @click=\"forward()\">前进</button>\r\n *         <button type=\"button\" @click=\"goto()\">goto(n)</button>\r\n *         methods: {\r\n *             back(){\r\n *                 this.$router.back();\r\n *             },\r\n *             forward(){\r\n *                 this.$router.forward();\r\n *             },\r\n *             test(){\r\n *                 this.$router.go(3);\r\n *             }\r\n *         },\r\n *     示例：\r\n *         <button @click=\"pushShow(m)\">push()查看</button>\r\n *         <button @click=\"replaceShow(m)\">replace()查看</button>\r\n *         methods: {\r\n *             pushShow(m) {\r\n *                 this.$router.push({\r\n *                     name:'details',\r\n *                     query:{\r\n *                         id:m.id,\r\n *                         title:m.title\r\n *                     }\r\n *                 });\r\n *             },\r\n *             replaceShow(m) {\r\n *                 this.$router.replace({\r\n *                     name:'details',\r\n *                     query:{\r\n *                         id:m.id,\r\n *                         title:m.title\r\n *                     }\r\n *                 });\r\n *             }\r\n *         },\r\n * 6.9 缓存路由组件\r\n *     (1).作用：\r\n *         让不展示的路由组件保持挂载状态，不被销毁。\r\n *     (2).具体编码\r\n *         <keep-alive include=\"News\">\r\n *             <router-view></router-view>\r\n *         </keep-alive>\r\n *     (3).keep-alive 几个参数：\r\n *         1).include 参数指定【需要缓存】的组件name集合，参数格式支持String, RegExp, Array。当为字符串的时候，多个组件名称以逗号隔开。\r\n *         2).exclude 参数指定【不需要缓存】的组件name集合，参数格式和include一样。\r\n *         3).max     参数指定最多可缓存组件的数量，超过数量删除第一个。参数格式支持String、Number。\r\n *         注意：不带任何参数，则默认所有组件都需要缓存。\r\n *     (4).两个新的生命周期钩子函数\r\n *         1).作用：路由组件所独有的两个钩子，用于捕获路由组件的激活状态。\r\n *         2).具体名字：\r\n *             (1).activated()   路由组件被激活时触发。\r\n *             (2).deactivated() 路由组件被失活时触发。\r\n *         注意：只要当组件被缓存的时候，才能触发这两个钩子函数生效。\r\n *         activated() {\r\n *             console.log('Home组件的Message组件被激活了呀！！！');\r\n *             this.timer = setInterval(() => {\r\n *                 console.log('@');\r\n *                 this.opacity -= 0.01;\r\n *                 if (this.opacity <= 0) {\r\n *                     this.opacity = 1;\r\n *                 }\r\n *             }, 15);\r\n *         },\r\n *         deactivated() {\r\n *             console.log('Home组件的Message组件被缓存了呀！！！');\r\n *             clearInterval(this.timer);\r\n *         },\r\n *     (5).示例：\r\n *         // 缓存所有路由组件\r\n *         <keep-alive>\r\n *             <router-view></router-view>\r\n *         </keep-alive>\r\n *         // 缓存一个路由组件\r\n *         <keep-alive include=\"News\">\r\n *             <router-view></router-view>\r\n *         </keep-alive>\r\n *         // 缓存多个路由组件\r\n *         <!-- <keep-alive :include=\"['News','Message']\"> -->\r\n * 6.12 路由守卫\r\n *     (1).作用\r\n *         对路由进行权限控制。\r\n *         提示：路由守卫，就好比古代的带刀侍卫。路由守卫是守护路由器，带刀侍卫是守护皇宫吧。\r\n *     (2).分类\r\n *         1).全局守卫。两个：全局前置守卫，全局后置守卫。\r\n *         2).独享守卫。\r\n *         3).组件内守卫。两个：组件内进入守卫，组件内离开守卫。\r\n *     (3).全局守卫\r\n *         // 第03步：全局前置守卫（全局前置监听器）\r\n *         // 第03步：全局前置路由守卫————初始化的时候被调用、每次路由切换之前被调用\r\n *         router.beforeEach(function (to, from, next) {\r\n *             // to     参数是将要访问的路由的信息对象。去哪里的路由规则。\r\n *             // from   参数是将要离开的路由的信息对象。从哪来的路由规则。\r\n *             // next() 函数表示放行，允许这次路由导航。放行函数。\r\n *             // 当前用户拥有后台主页的访问权限，直接放行：next()\r\n *             // 当前用户没有后台主页的访问权限，强制其跳转到登录页面：next('/login')\r\n *             // 当前用户没有后台主页的访问权限，不允许跳转到后台主页：next(false)\r\n *             console.log('去哪里呀：', to.name);\r\n *             console.log('从哪来呀：', from.name);\r\n *             if (to.path === '/main') {\r\n *                 const token = localStorage.getItem('token');\r\n *                 console.log(token);\r\n *                 if (token) {\r\n *                     next();\r\n *                 } else {\r\n *                     next('/login');\r\n *                 }\r\n *             } else {\r\n *                 next();\r\n *             }\r\n *         });\r\n *         // 第03步：全局后置守卫（全局后置监听器）\r\n *         // 第03步：全局后置路由守卫————初始化的时候被调用、每次路由切换之后被调用\r\n *         router.afterEach(function (to, from) {\r\n *             console.log('去哪里呀：', to.name);\r\n *             console.log('从哪来呀：', from.name);\r\n *             document.title = to.meta.title || '如果没有标题就用我吧';\r\n *         });\r\n *     (4).独享守卫\r\n *         {\r\n *             name: 'news',\r\n *             path: 'news',\r\n *             component: News,\r\n *             // 配置独享路由守卫（就此路由规则享用此路由守卫）\r\n *             meta: {\r\n *                 token: true,\r\n *                 title: '新闻联播'\r\n *             },\r\n *             beforeEnter: function (to, from, next) {\r\n *                 console.log('独享路由守卫', to.name, from.name);\r\n *                 if (to.meta.token) {\r\n *                     if (localStorage.getItem('token') === to.meta.token) {\r\n *                         next();\r\n *                     } else {\r\n *                         alert(`认证失败！无权登录！返回登录页面！！！`);\r\n *                         next('/login');\r\n *                     }\r\n *                 } else {\r\n *                     next();\r\n *                 }\r\n *             }\r\n *         },\r\n *     (5).组件内守卫\r\n *         export default {\r\n *             name: 'About',\r\n *             beforeDestroy() {\r\n *                 console.log('About组件即将被销毁了呀！');\r\n *             },\r\n *             destroyed() {\r\n *                 console.log('About组件即将被销毁了呀！！！');\r\n *             },\r\n *             mounted() {\r\n *                 console.log('About组件挂载完毕了呀！！！', this);\r\n *             },\r\n *             // 组件内守卫：进入守卫，通过路由规则，进入该组件时被调用\r\n *             beforeRouteEnter(to, from, next) {\r\n *                 console.log('组件内进入守卫', to, from);\r\n *                 if (to.meta.token) {\r\n *                     if (localStorage.getItem('token') === to.meta.token) {\r\n *                         next();\r\n *                     } else {\r\n *                         alert(`认证失败！鉴权无效！返回登录页面！！！`);\r\n *                         next('/login');\r\n *                     }\r\n *                 } else {\r\n *                     next();\r\n *                 }\r\n *             },\r\n *             // 组件内守卫：离开守卫，通过路由规则，离开该组件时被调用\r\n *             beforeRouteLeave(to, from, next) {\r\n *                 console.log('组件内离开守卫', to, from);\r\n *                 next();\r\n *             }\r\n *         }\r\n * 6.13 路由的两种工作模式\r\n *     (1).对于一个url来说，什么是hash值？回答：井号（#）及其后面的内容就是hash值。\r\n *     (2).hash值不会包含在 HTTP 请求中，即：hash 值不会带给服务器。\r\n *     (3).hash模式：\r\n *        1).地址中永远带着（#）井号，不美观。\r\n *        2).若以后将地址通过第三方手机app分享，若app校验严格，则地址会被标记为不合法。\r\n *        3).兼容性较好。\r\n *     (4).history模式：\r\n *        1).地址干净，美观。\r\n *        2).兼容性和hash模式相比略差。\r\n *        3).应用部署上线时需要后端人员支持，解决刷新页面服务端404的问题。\r\n *     (5).实例\r\n *         // 第02步：调用Vue.use()函数，把VueRouter安装为Vue插件\r\n *         Vue.use(VueRouter);\r\n *         // 第03步：创建路由模块实例对象\r\n *         const router = new VueRouter({\r\n *             // 路由模式（两种：hash，history）\r\n *             mode: 'history',\r\n *             // vue-router 的 base 属性可以设置所有路由的基础路径，即将路由的路径相对于该基础路径来定义。\r\n *             base: process.env.BASE_URL,\r\n *             // 路由规则\r\n *             routes: [\r\n *                 // 第08步：配置路由规则（前面需要加斜杠（/））\r\n *                 {\r\n *                     path: '/',\r\n *                     redirect: '/about'\r\n *                 },\r\n *                 {\r\n *                     name: 'about',\r\n *                     path: '/about',\r\n *                     component: About\r\n *                 }\r\n *             ]\r\n *         });\r\n *     (6).在 Vue CLI 3 及以上版本的项目中，可以在 vue.config.js 中进行配置，示例代码如下：\r\n *         // vue.config.js\r\n *         module.exports = {\r\n *             publicPath: process.env.NODE_ENV === 'production' ? '/your-base-path' : '/'\r\n *         };\r\n * 七、Vue UI 组件库\r\n * 7.1 Mobile 端常用 UI 组件库\r\n *     1. Vant：https://youzan.github.io/vant\r\n *     2. Cube UI：https://didi.github.io/cube-ui\r\n *     3. Mint UI：http://mint-ui.github.io\r\n * 7.2 PC 端常用 UI 组件库\r\n *     1. Element UI：https://element.eleme.cn\r\n *     2. IView UI：https://www.iviewui.com\r\n * 7.3 引入饿了么UI组件库\r\n *     // 导入第三方饿了么UI依赖包\r\n *     import ElementUI from 'element-ui';\r\n *     // 导入第三方饿了么UI样式文件\r\n *     import 'element-ui/lib/theme-chalk/index.css';\r\n *     // 使用饿了么UI插件\r\n *     Vue.use(ElementUI);\r\n */\r\n\r\n\r\n\r\n\r\n/**\r\n * 总结：\r\n * 【黑马程序员Vue视频教程目录】\r\n * 一、webpack 前端工程化\r\n *     (01).创建 vue-cli 工程。\r\n *     (02).创建 vite 工程。\r\n *     (03).打包发布。\r\n * 二、vue 基础\r\n *     (01).MVVM 原理\r\n *     (02).vue-devtools 调试工具\r\n *     (03).vue 指令\r\n *         01).内容渲染指令。\r\n *         02).属性绑定指令。\r\n *         03).事件绑定指令。\r\n *         04).双向绑定指令。\r\n *         05).条件渲染指令。\r\n *         06).列表渲染指令。\r\n *     (04).过滤器\r\n *         01).私有过滤器。\r\n *         02).全局过滤器。\r\n *     (05).侦听器\r\n *         01).侦听 property 变化。\r\n *     (06).计算属性\r\n *         01).计算 property 数据。\r\n * 三、vue-cli 脚手架\r\n *     (01).单页面应用程序（Single Page Application）\r\n * 四、vue 组件\r\n *     (01).组件关系\r\n *     (02).组件结构\r\n *     (03).组件使用\r\n *     (04).私有组件\r\n *     (05).全局组件\r\n *     (06).组件之间的关系\r\n *     (07).EventBus.js 模块\r\n * 五、引用\r\n *     (01).ref 引用属性\r\n *     (02).$refs 引用对象\r\n * 六、生命周期\r\n *     (01).生命周期的三个阶段\r\n *     (02).生命周期的钩子函数\r\n * 七、动态组件\r\n *     (01).<component>\r\n *     (02).<component> + <keep-alive>\r\n * 八、插槽\r\n *     (01).抽象元素<slot></slot>\r\n * 九、自定义指令\r\n *     (01).私有自定义指令\r\n *     (02).全局自定义指令\r\n * 十、路由\r\n *     (01).前端路由\r\n *     (02).简易的前端路由\r\n *     (03).vue-router 路由\r\n *     (04).vue-router 路由常用方法\r\n *         01).重定向路由\r\n *         02).嵌套路由\r\n *         03).动态路由\r\n *         04).使用 $router 对象，params 参数接收\r\n *         05).使用 props 自定义属性接收\r\n *         06).vue-router 路由常用API\r\n *         07).vue-router 路由全局守卫\r\n * 【尚硅谷Vue视频教程目录】\r\n * 一、基础\r\n *     (01).模板语法\r\n *     (02).数据绑定\r\n *     (03).MVVM模型\r\n *     (04).数据代理\r\n *     (05).事件处理\r\n *     (06).侦听属性与计算属性\r\n *     (07).Class与Style绑定\r\n *     (08).条件渲染\r\n *     (09).列表渲染\r\n *     (10).表单数据收集\r\n *     (11).过滤器\r\n *     (12).内置指令与自定义指令\r\n *     (13).Vue实例生命周期\r\n * 二、组件化编程\r\n *     (01).模块\r\n *     (02).组件\r\n *     (03).Vue组件\r\n *     (04).关于VueComponent\r\n *     (05).非单文件组件\r\n *     (06).单文件组件\r\n * 三、Vue-CLI 脚手架\r\n *     (01).vue-cli脚手架初始化\r\n *     (02).vue-cli项目模板结构\r\n *     (03).ref引用属性与$refs引用对象和props自定义属性\r\n *     (04).混入\r\n *     (05).插件\r\n *     (06).组件化编码流程\r\n *     (07).Vue中的自定义事件\r\n *     (08).全局事件总线【重点】\r\n *     (09).消息订阅与发布\r\n *     (10).过滤与动画\r\n * 四、Vue中的Ajax\r\n *     (01).配置代理\r\n *     (02).Vue中常用的2个Ajax库\r\n *     (03).插槽\r\n * 五、Vuex 状态管理\r\n *     (01).Vuex概念\r\n *     (02).Vuex场景\r\n *     (03).Vuex搭建环境\r\n *     (04).Vuex工作原理图\r\n *     (05).Vuex核心API\r\n *     (06).Vuex基本使用\r\n *     (07).Vuex getters()基本使用\r\n *     (08).Vuex提供的四个Map方法的使用\r\n *     (09).Vuex模板化+命名空间基本使用\r\n * 六、VueRouter 路由管理\r\n *     (01).vue-router的理解\r\n *     (02).对SPA应用的理解\r\n *     (03).什么是路由？\r\n *     (04).路由的分类？【重点】\r\n *     (05).路由的基本使用\r\n *     (05).路由几个注意点：\r\n *     (06).总结\r\n *     (07).嵌套（多级）路由\r\n *     (08).路由传参\r\n *     (08).路由命名\r\n *     (09).router-link标签的replace属性\r\n *     (10).编程式路由导航\r\n *     (11).缓存路由组件\r\n *     (12).路由守卫\r\n *     (13).路由的两种工作模式\r\n * 七、Vue UI 组件库\r\n *     (01).Mobile 端常用 UI 组件库\r\n *     (02).PC 端常用 UI 组件库\r\n *     (03).引入饿了么UI组件库\r\n * 【官网Vue视频教程目录】\r\n * 一、基础\r\n *     (01).安装\r\n *     (02).介绍\r\n *     (03).vue实例\r\n *     (04).模板语法\r\n *     (01).计算属性与侦听属性\r\n *     (02).Class与Style绑定\r\n *     (03).条件渲染\r\n *     (04).列表渲染\r\n *     (05).事件处理\r\n *     (06).表单输入绑定\r\n *     (07).组件基础\r\n * 二、深入了解组件\r\n *     (01).组件注册\r\n *     (02).Prop\r\n *     (03).自定义事件\r\n *     (04).插槽\r\n *     (05).动态组件与异步组件\r\n *     (06).处理边界情况\r\n * 三、过滤与动画\r\n *     (01).进入与离开&&列表过渡\r\n *     (02).状态过渡\r\n * 四、可复用性与组合\r\n *     (01).混入\r\n *     (02).自定义指令\r\n *     (03).渲染函数与JSX\r\n *     (04).插件\r\n *     (05).过滤器\r\n * 五、工具\r\n *     (01).单文件组件\r\n *     (02).测试\r\n *     (03).TypeScript支持\r\n *         01).发布为NPM包的官方声明文件\r\n *         02).推荐配置\r\n *         03).开发工具链\r\n *             01).工程创建\r\n *             02).编辑器支持\r\n *         04).基本用法\r\n *         05).基于类的Vue组件\r\n *         06).增加类型以配合插件使用\r\n *         07).标注返回值\r\n *         08).标Prop\r\n *     (04).生产环境部署\r\n *         01).开启生产环境模式\r\n *             01).不使用构建工具\r\n *             02).使用构建工具\r\n *         02).模板预编译\r\n *         03).提取组件的CSS样式\r\n *         04).跟踪运行时错误\r\n * 六、规模化\r\n *     (01).路由\r\n *         01).官方路由\r\n *         02).从零开始简单的路由\r\n *         03).整合第三方路由\r\n *     (02).状态管理\r\n *         01).类 Flux 状态管理的官方实现\r\n *             01).React 的开发者请参考以下信息\r\n *         02).简单状态管理起步使用\r\n *     (03).服务端渲染\r\n *         01).SSR 完全指南\r\n *         02).Nuxt.js\r\n *         03).Quasar Framework SSR + PWA\r\n *     (04).安全\r\n *         01).报告安全漏洞\r\n *         02).第一原则：永远不要使用不可信任的模板\r\n *         03).Vue的安全措施\r\n *             01).HTML内容\r\n *             02).Attribute绑定\r\n *         04).潜在危险\r\n *             01).注入HTML\r\n *             02).注入URL\r\n *             03).注入CSS\r\n *             04).注入JavaScript\r\n *         05).最佳实践\r\n *         06).后端协作\r\n *         07).服务端渲染\r\n * 七、内在\r\n *     (01).深入响应式原理\r\n *         01).如何追踪变化\r\n *         02).检测变化的注意事项\r\n *             01).对于对象\r\n *             02).对于数组\r\n *         03).声明响应式property\r\n *         04).异步更新队列\r\n * 八、迁移\r\n *     (01).从Vue 1.x迁移\r\n *     (02).从Vue Router 0.7.x迁移\r\n *     (03).从Vue 0.6.x迁移到1.0\r\n *     (04).迁移至Vue 2.7\r\n * 九、更多\r\n *     (01).对比其他框架\r\n *     (02).加入Vue.js社区\r\n *     (03).认识团队\r\n */\r\n\r\n\r\n\r\n\r\n// 指定饿了么UI版本下载依赖包\r\n// # npm install element-ui@2.15.9 -S\r\n\r\nimport Vue from 'vue';\r\n// 导入第三方BootStrapUI依赖包\r\n// import BootstrapVue from \"bootstrap-vue\";\r\n// 导入第三方饿了么UI依赖包\r\nimport ElementUI from 'element-ui';\r\n\r\nimport App from '@/App3.vue';\r\n\r\n// 导入第三方BootStrapUI样式文件\r\n// import 'bootstrap/dist/css/bootstrap.css';\r\n// import 'bootstrap-vue/dist/bootstrap-vue.css';\r\n// 导入第三方饿了么UI样式文件\r\nimport 'element-ui/lib/theme-chalk/index.css';\r\n\r\n// 第05步：导入第三方模块插件（路由模块：vue-router）\r\nimport router from \"@/router/index.js\";\r\n// 第05步：导入第三方模块插件（状态管理：vuex)\r\nimport store from \"@/store/index.js\";\r\n\r\n// 导入 bootstrap 样式\r\nimport '@/assets/css/bootstrap.css';\r\n// 全局样式\r\nimport '@/assets/global.css';\r\n\r\nVue.config.productionTip = false;\r\n\r\n// 使用BootStrapUI插件\r\n// Vue.use(BootstrapVue);\r\n// 使用饿了么UI插件\r\nVue.use(ElementUI);\r\n\r\n// 第06步：挂载 router 路由模块\r\n// 第06步：挂载 vuex   状态管理\r\n// 第06步：挂载 render 渲染函数\r\nnew Vue({\r\n    // 核心一：路由管理\r\n    router: router,\r\n    // 核心二：状态管理\r\n    store: store,\r\n    // 核心三：渲染函数\r\n    render: h => h(App),\r\n    // 核心四：事件总线\r\n    beforeCreate() {\r\n        Vue.prototype.$bus = this\r\n    }\r\n}).$mount('#app');\r\n\r\n\r\n\r\n"],"sourceRoot":""}